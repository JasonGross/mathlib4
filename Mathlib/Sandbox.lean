import Mathlib.Analysis.SpecialFunctions.PolarCoord
import Mathlib.MeasureTheory.Constructions.Pi
import Mathlib.MeasureTheory.Measure.Haar.Unique
import Mathlib.MeasureTheory.MeasurableSpace.Embedding

section frontier

theorem frontier_union_subset' {X : Type*} [TopologicalSpace X] (s : Set X) (t : Set X) :
    frontier (s ‚à™ t) ‚äÜ frontier s ‚à™ frontier t :=
  (frontier_union_subset s t).trans <|
    Set.union_subset_union Set.inter_subset_left Set.inter_subset_right

theorem Finset.frontier_biUnion {Œπ : Type*} (s : Finset Œπ) {X : Type*} [TopologicalSpace X]
    (t : Œπ ‚Üí Set X) :
    frontier (‚ãÉ i ‚àà s, t i) ‚äÜ ‚ãÉ i ‚àà s, frontier (t i) := by
  classical
  induction s using Finset.induction with
  | empty => simp
  | insert _ h_ind =>
      simp_rw [mem_insert, Set.iUnion_iUnion_eq_or_left]
      exact (frontier_union_subset' _ _).trans ( Set.union_subset_union subset_rfl h_ind)

example {Œ± Œ≤ : Type*} (f : Œ± ‚Üí Set Œ≤) :
    ‚ãÉ a, f a = ‚ãÉ a ‚àà Set.univ, f a := by
  exact Eq.symm (Set.biUnion_univ f)

theorem frontier_iUnion {Œπ : Type*} [Fintype Œπ] {X : Type*} [TopologicalSpace X]
    (t : Œπ ‚Üí Set X) :
    frontier (‚ãÉ i, t i) ‚äÜ ‚ãÉ i, frontier (t i) := by
  have := Finset.frontier_biUnion Finset.univ t
  simp only [Finset.mem_univ, Set.iUnion_true] at this
  exact this

end frontier

section finset

@[simp]
theorem Finset.union_nonempty {Œ± : Type*} [DecidableEq Œ±] {s : Finset Œ±}  {t : Finset Œ±} :
    (s ‚à™ t : Finset Œ±).Nonempty ‚Üî s.Nonempty ‚à® t.Nonempty := by
  rw [‚Üê Finset.coe_nonempty, Finset.coe_union, Set.union_nonempty, coe_nonempty, coe_nonempty]

end finset

section rpow

theorem Real.rpow_comm {x : ‚Ñù} (hx : 0 ‚â§ x)  (y z : ‚Ñù) :
    (x ^ y) ^ z = (x ^ z) ^ y := by
  rw [‚Üê rpow_mul hx, ‚Üê rpow_mul hx, mul_comm]

end rpow

section ennreal

@[simp]
theorem ENNReal.coe_RealtoNNReal (r : ‚Ñù) : (Real.toNNReal r : ENNReal) = ENNReal.ofReal r := rfl

theorem ENNReal.ofReal_ne_zero_iff {r : ‚Ñù} :
    ENNReal.ofReal r ‚â† 0 ‚Üî 0 < r := by
  rw [‚Üê zero_lt_iff, ENNReal.ofReal_pos]

end ennreal

section topo

theorem measurableSet_frontier {Œ± : Type*} {s : Set Œ±} [TopologicalSpace Œ±] [MeasurableSpace Œ±]
    [OpensMeasurableSpace Œ±] :
    MeasurableSet (frontier s) :=
  measurableSet_closure.diff measurableSet_interior

end topo

section basis

variable {ùïú : Type*} [hnorm : NontriviallyNormedField ùïú] {E : Type*} [AddCommGroup E] [Module ùïú E]
  [TopologicalSpace E] [TopologicalAddGroup E] [ContinuousSMul ùïú E] [CompleteSpace ùïú] {Œπ : Type*}
  [Finite Œπ]  [T2Space E] (v : Basis Œπ ùïú E)

theorem Basis.equivFunL_coe :
  ‚áëv.equivFunL = v.equivFun := rfl

theorem Basis.equivFunL_symm_coe :
  ‚áëv.equivFunL.symm = v.equivFun.symm := rfl

end basis

section indicator

variable {Œ± Œ≤ : Type*} [One Œ≤] {f : Œ± ‚Üí Œ≤} {s : Set Œ±}

@[to_additive]
theorem Set.eqOn_mulIndicator' : Set.EqOn (Set.mulIndicator s f) 1 s·∂ú :=
  fun _ hx => mulIndicator_of_not_mem hx f

variable [TopologicalSpace Œ±] [TopologicalSpace Œ≤]

open scoped Topology

@[to_additive]
theorem continuousAt_mulIndicator_of_not_mem_frontier (hf : ContinuousOn f (interior s))
    {x : Œ±} (hx : x ‚àâ frontier s) :
    ContinuousAt (s.mulIndicator f) x := by
  rw [‚Üê Set.not_mem_compl_iff, Set.not_not_mem, compl_frontier_eq_union_interior] at hx
  obtain h | h := hx
  ¬∑ have hs : interior s ‚àà ùìù x := mem_interior_iff_mem_nhds.mp (by rwa [interior_interior])
    exact ContinuousAt.congr (hf.continuousAt hs) <| Filter.eventuallyEq_iff_exists_mem.mpr
      ‚ü®interior s, hs, Set.eqOn_mulIndicator.symm.mono interior_subset‚ü©
  ¬∑ refine ContinuousAt.congr continuousAt_const <| Filter.eventuallyEq_iff_exists_mem.mpr
      ‚ü®s·∂ú, mem_interior_iff_mem_nhds.mp h, Set.eqOn_mulIndicator'.symm‚ü©

end indicator

section diff

theorem Set.eq_union_of_diff_subset {Œ± : Type*} {s t u : Set Œ±} (h : t ‚äÜ s) :
    s \ t = u ‚Üí s = t ‚à™ u := by aesop

end diff

section Measure

open MeasureTheory MeasureTheory.Measure MeasurableSpace

theorem MeasureTheory.measure_restrict_pi_pi {Œπ : Type*} {Œ± : Œπ ‚Üí Type*} [Fintype Œπ]
    [(i : Œπ) ‚Üí MeasurableSpace (Œ± i)] (Œº : (i : Œπ) ‚Üí MeasureTheory.Measure (Œ± i))
    [‚àÄ i, SigmaFinite (Œº i)] (s : (i : Œπ) ‚Üí Set (Œ± i)) :
    (Measure.pi Œº).restrict (Set.univ.pi fun i ‚Ü¶ s i) =
      Measure.pi (fun i ‚Ü¶ (Œº i).restrict (s i)) := by
  refine (Measure.pi_eq fun _ h ‚Ü¶ ?_).symm
  simp_rw [restrict_apply (MeasurableSet.univ_pi h), restrict_apply (h _),
    ‚Üê Set.pi_inter_distrib, pi_pi]

section marginal

variable {Œ¥ : Type*} {œÄ : Œ¥ ‚Üí Type*} [DecidableEq Œ¥] [(x : Œ¥) ‚Üí MeasurableSpace (œÄ x)]
    {Œº : (i : Œ¥) ‚Üí MeasureTheory.Measure (œÄ i)} {s : Finset Œ¥}

theorem Measurable.lmarginal_zero {x : (i : Œ¥) ‚Üí œÄ i} :
    (‚à´‚ãØ‚à´‚Åª_s, 0 ‚àÇŒº) x = 0 := lintegral_zero

theorem Measurable.lmarginal_update [‚àÄ (i : Œ¥), SigmaFinite (Œº i)]
    {f : ((i : Œ¥) ‚Üí œÄ i) ‚Üí ENNReal} (hf : Measurable f) {x : (i : Œ¥) ‚Üí œÄ i} {i : Œ¥} :
    Measurable fun x·µ¢ ‚Ü¶ (‚à´‚ãØ‚à´‚Åª_s, f ‚àÇŒº) (Function.update x i x·µ¢) := by
  exact (Measurable.lmarginal _ hf).comp (measurable_update x)

theorem MeasureTheory.lmarginal_const_smul
    {f : ((i : Œ¥) ‚Üí œÄ i) ‚Üí ENNReal} (hf : Measurable f) {x : (i : Œ¥) ‚Üí œÄ i} (r : ENNReal) :
    (‚à´‚ãØ‚à´‚Åª_s, r ‚Ä¢ f ‚àÇŒº) x = r * (‚à´‚ãØ‚à´‚Åª_s, f ‚àÇŒº) x := by
  simp_rw [lmarginal, Pi.smul_apply, smul_eq_mul]
  rw [lintegral_const_mul _ (by convert hf.comp measurable_updateFinset)]

theorem MeasureTheory.lmarginal_const_smul'
    {f : ((i : Œ¥) ‚Üí œÄ i) ‚Üí ENNReal} {x : (i : Œ¥) ‚Üí œÄ i} (r : ENNReal) (hr : r ‚â† ‚ä§):
    (‚à´‚ãØ‚à´‚Åª_s, r ‚Ä¢ f ‚àÇŒº) x = r * (‚à´‚ãØ‚à´‚Åª_s, f ‚àÇŒº) x := by
  simp_rw [lmarginal, Pi.smul_apply, smul_eq_mul]
  rw [lintegral_const_mul' _ _ hr]

end marginal

theorem Complex.lintegral_pi_comp_polarCoord_symm_aux {Œπ : Type*} [DecidableEq Œπ]
    (f : (Œπ ‚Üí ‚ÑÇ) ‚Üí ENNReal) (hf : Measurable f) (s : Finset Œπ) (a : Œπ ‚Üí ‚Ñù √ó ‚Ñù) :
    (‚à´‚ãØ‚à´‚Åª_s, f ‚àÇfun _ ‚Ü¶ (volume : Measure ‚ÑÇ)) (fun i ‚Ü¶ Complex.polarCoord.symm (a i)) =
      (‚à´‚ãØ‚à´‚Åª_s, fun p ‚Ü¶
          ((‚àè i ‚àà s, (p i).1.toNNReal) * f (fun i ‚Ü¶ Complex.polarCoord.symm (p i)))
            ‚àÇfun _ ‚Ü¶ ((volume : Measure (‚Ñù √ó ‚Ñù)).restrict polarCoord.target)) a := by
  induction s using Finset.induction generalizing f a with
  | empty => simp
  | @insert i‚ÇÄ s hi‚ÇÄ h_ind =>
      have h : ‚àÄ t : Finset Œπ, Measurable fun p : Œπ ‚Üí ‚Ñù √ó ‚Ñù ‚Ü¶
          (‚àè i ‚àà t, (p i).1.toNNReal) * f fun i ‚Ü¶ Complex.polarCoord.symm (p i) := by
        intro _
        refine Measurable.mul ?_ ?_
        ¬∑ exact measurable_coe_nnreal_ennreal_iff.mpr <|
            Finset.measurable_prod _ fun _ _ ‚Ü¶ by fun_prop
        ¬∑ exact hf.comp <| measurable_pi_lambda _ fun _ ‚Ü¶
            Complex.continuous_polarCoord_symm.measurable.comp (measurable_pi_apply _)
      calc
        _ = ‚à´‚Åª x in polarCoord.target, x.1.toNNReal ‚Ä¢
              (‚à´‚ãØ‚à´‚Åª_s, f ‚àÇfun _ ‚Ü¶ volume)
                fun j ‚Ü¶ Complex.polarCoord.symm (Function.update a i‚ÇÄ x j) := by
          rw [MeasureTheory.lmarginal_insert _ hf hi‚ÇÄ, ‚Üê Complex.lintegral_comp_polarCoord_symm _
            hf.lmarginal_update]
          congr!
          simp_rw [Function.update_apply]
          split_ifs <;> rfl
        _ = ‚à´‚Åª (x : ‚Ñù √ó ‚Ñù) in polarCoord.target,
              (‚à´‚ãØ‚à´‚Åª_s,
                (fun p ‚Ü¶ ‚Üë(‚àè i ‚àà insert i‚ÇÄ s, (p i).1.toNNReal) *
                  (f fun i ‚Ü¶ Complex.polarCoord.symm (p i))) ‚àò fun p ‚Ü¶ Function.update p i‚ÇÄ x
              ‚àÇfun _ ‚Ü¶ volume.restrict polarCoord.target) a := by
            simp_rw [h_ind _ hf, lmarginal_update_of_not_mem (h s) hi‚ÇÄ, Function.comp_def,
              ENNReal.smul_def, smul_eq_mul, ‚Üê lmarginal_const_smul' _ ENNReal.coe_ne_top,
              Pi.smul_def, Finset.prod_insert hi‚ÇÄ, Function.update_same, smul_eq_mul,
              ENNReal.coe_mul, mul_assoc]
        _ = (‚à´‚ãØ‚à´‚Åª_insert i‚ÇÄ s, fun p ‚Ü¶ (‚àè i ‚àà insert i‚ÇÄ s, (p i).1.toNNReal) *
              f (fun i ‚Ü¶ Complex.polarCoord.symm (p i))
                ‚àÇfun _ ‚Ü¶ volume.restrict polarCoord.target) a := by
          simp_rw [‚Üê lmarginal_update_of_not_mem (h _) hi‚ÇÄ]
          rw [MeasureTheory.lmarginal_insert _ (h _) hi‚ÇÄ]

theorem Complex.lintegral_pi_comp_polarCoord_symm {Œπ : Type*} [Fintype Œπ] [DecidableEq Œπ]
    (f : (Œπ ‚Üí ‚ÑÇ) ‚Üí ENNReal) (hf : Measurable f) :
    ‚à´‚Åª p, f p = ‚à´‚Åª p in (Set.univ.pi fun _ : Œπ ‚Ü¶ polarCoord.target),
      (‚àè i, (p i).1.toNNReal) * f (fun i ‚Ü¶ Complex.polarCoord.symm (p i)) := by
  rw [volume_pi, lintegral_eq_lmarginal_univ (fun _ ‚Ü¶ Complex.polarCoord.symm 0),
    Complex.lintegral_pi_comp_polarCoord_symm_aux _ hf, lmarginal_univ, ‚Üê measure_restrict_pi_pi]
  rfl

/-- A family of algebra homomorphisms `g i : A ‚Üí‚Çê[R] B i` defines an algebra homomorphism
`Pi.algHom f : A ‚Üí+* Œ† i, B i` given by `Pi.algHom f x i = f i x`. -/
@[simps!]
def Pi.algHom {I R : Type*} [CommSemiring R] {A : Type*} [Semiring A] [Algebra R A] {B : I ‚Üí Type*}
    [‚àÄ i, Semiring (B i)] [‚àÄ i, Algebra R (B i)] (g : (i : I) ‚Üí A ‚Üí‚Çê[R] B i) :
    A ‚Üí‚Çê[R] (i : I) ‚Üí B i where
  __ := Pi.ringHom fun i ‚Ü¶ (g i)
  commutes' _ := by ext; simp

theorem Equiv.arrowProdEquivProdArrow_preimage {Œ± Œ≤ Œ≥ : Type*} {s : Œ≥ ‚Üí Set Œ±} {t : Œ≥ ‚Üí Set Œ≤} :
    Equiv.arrowProdEquivProdArrow Œ± Œ≤ Œ≥ ‚Åª¬π' (_root_.Set.univ.pi s √óÀ¢ _root_.Set.univ.pi t) =
      (_root_.Set.univ.pi fun i ‚Ü¶ s i √óÀ¢ t i) := by
  ext
  simp only [arrowProdEquivProdArrow, coe_fn_mk, Set.mem_preimage, Set.mem_prod, Set.mem_pi,
    Set.mem_univ, true_implies, forall_and]

def MeasurableEquiv.arrowProdEquivProdArrow (Œ± Œ≤ Œ≥ : Type*) [MeasurableSpace Œ±]
    [MeasurableSpace Œ≤] :
    (Œ≥ ‚Üí Œ± √ó Œ≤) ‚âÉ·µê (Œ≥ ‚Üí Œ±) √ó (Œ≥ ‚Üí Œ≤) where
  __ := Equiv.arrowProdEquivProdArrow Œ± Œ≤ Œ≥
  measurable_toFun _ h := by
    simp_rw [Equiv.arrowProdEquivProdArrow, Equiv.coe_fn_mk]
    exact MeasurableSet.preimage h (by fun_prop)
  measurable_invFun _ h := by
    simp_rw [Equiv.arrowProdEquivProdArrow, Equiv.coe_fn_symm_mk]
    exact MeasurableSet.preimage h (by fun_prop)

theorem MeasurePreserving.arrowProdEquivProdArrow (Œ± Œ≤ Œ≥ : Type*) [MeasurableSpace Œ±]
    [MeasurableSpace Œ≤] [Fintype Œ≥] (Œº : Œ≥ ‚Üí Measure Œ±) (ŒΩ : Œ≥ ‚Üí Measure Œ≤) [‚àÄ i, SigmaFinite (Œº i)]
    [‚àÄ i, SigmaFinite (ŒΩ i)] :
    MeasurePreserving (MeasurableEquiv.arrowProdEquivProdArrow Œ± Œ≤ Œ≥)
      (.pi fun i ‚Ü¶ (Œº i).prod (ŒΩ i))
        ((Measure.pi fun i ‚Ü¶ Œº i).prod (Measure.pi fun i ‚Ü¶ ŒΩ i)) where
  measurable := (MeasurableEquiv.arrowProdEquivProdArrow Œ± Œ≤ Œ≥).measurable
  map_eq := by
    refine (FiniteSpanningSetsIn.ext ?_ (isPiSystem_pi.prod isPiSystem_pi)
      ((FiniteSpanningSetsIn.pi fun i ‚Ü¶ (Œº i).toFiniteSpanningSetsIn).prod
      (FiniteSpanningSetsIn.pi (fun i ‚Ü¶ (ŒΩ i).toFiniteSpanningSetsIn))) ?_).symm
    ¬∑ refine (generateFrom_eq_prod generateFrom_pi generateFrom_pi ?_ ?_).symm
      exact (FiniteSpanningSetsIn.pi (fun i ‚Ü¶ (Œº i).toFiniteSpanningSetsIn)).isCountablySpanning
      exact (FiniteSpanningSetsIn.pi (fun i ‚Ü¶ (ŒΩ i).toFiniteSpanningSetsIn)).isCountablySpanning
    ¬∑ rintro _ ‚ü®s, ‚ü®s, _, rfl‚ü©, ‚ü®_, ‚ü®t, _, rfl‚ü©, rfl‚ü©‚ü©
      rw [MeasurableEquiv.map_apply, MeasurableEquiv.arrowProdEquivProdArrow,
        MeasurableEquiv.coe_mk, Equiv.arrowProdEquivProdArrow_preimage]
      simp_rw [pi_pi, prod_prod, pi_pi, Finset.prod_mul_distrib]

theorem MeasureTheory.volume_preserving.arrowProdEquivProdArrow (Œ± Œ≤ Œ≥ : Type*) [MeasureSpace Œ±]
    [MeasureSpace Œ≤] [Fintype Œ≥] [SigmaFinite (volume : Measure Œ±)]
    [SigmaFinite (volume : Measure Œ≤)] :
    MeasurePreserving (MeasurableEquiv.arrowProdEquivProdArrow Œ± Œ≤ Œ≥) :=
  MeasurePreserving.arrowProdEquivProdArrow Œ± Œ≤ Œ≥ (fun _ ‚Ü¶ volume) (fun _ ‚Ü¶ volume)

theorem MeasurablePreserving.prodAssoc {Œ± Œ≤ Œ≥ : Type*} [MeasurableSpace Œ±] [MeasurableSpace Œ≤]
    [MeasurableSpace Œ≥] (Œº : Measure Œ±) (ŒΩ : Measure Œ≤) (œÄ : Measure Œ≥) [SigmaFinite Œº]
    [SigmaFinite ŒΩ] [SigmaFinite œÄ] :
    MeasurePreserving (MeasurableEquiv.prodAssoc : (Œ± √ó Œ≤) √ó Œ≥ ‚âÉ·µê Œ± √ó Œ≤ √ó Œ≥)
      ((Œº.prod ŒΩ).prod œÄ) (Œº.prod (ŒΩ.prod œÄ)) where
  measurable := MeasurableEquiv.prodAssoc.measurable
  map_eq := by
    refine (FiniteSpanningSetsIn.ext ?_
      (isPiSystem_measurableSet.prod (isPiSystem_measurableSet.prod isPiSystem_measurableSet))
      (Œº.toFiniteSpanningSetsIn.prod (ŒΩ.toFiniteSpanningSetsIn.prod œÄ.toFiniteSpanningSetsIn))
      ?_).symm
    ¬∑ refine (generateFrom_eq_prod generateFrom_measurableSet
        (generateFrom_eq_prod ?_ ?_ ?_ ?_) ?_ (IsCountablySpanning.prod ?_ ?_)).symm
      any_goals exact generateFrom_measurableSet
      all_goals exact isCountablySpanning_measurableSet
    ¬∑ rintro _ ‚ü®s, _, _, ‚ü®t, _, ‚ü®u, _, rfl‚ü©‚ü©, rfl‚ü©
      rw [MeasurableEquiv.map_apply, MeasurableEquiv.prodAssoc, MeasurableEquiv.coe_mk,
        Equiv.prod_assoc_preimage, prod_prod, prod_prod, prod_prod, prod_prod, mul_assoc]

theorem MeasureTheory.volume_preserving.prodAssoc {Œ± Œ≤ Œ≥ : Type*} [MeasureSpace Œ±] [MeasureSpace Œ≤]
    [MeasureSpace Œ≥] [SigmaFinite (volume : Measure Œ±)] [SigmaFinite (volume : Measure Œ≤)]
    [SigmaFinite (volume : Measure Œ≥)] :
    MeasurePreserving (MeasurableEquiv.prodAssoc : (Œ± √ó Œ≤) √ó Œ≥ ‚âÉ·µê Œ± √ó Œ≤ √ó Œ≥) :=
  MeasurablePreserving.prodAssoc volume volume volume

def MeasurableEquiv.arrowCongr' {Œ±‚ÇÅ Œ≤‚ÇÅ Œ±‚ÇÇ Œ≤‚ÇÇ : Type*} [MeasurableSpace Œ≤‚ÇÅ] [MeasurableSpace Œ≤‚ÇÇ]
    (hŒ± : Œ±‚ÇÅ ‚âÉ Œ±‚ÇÇ) (hŒ≤ : Œ≤‚ÇÅ ‚âÉ·µê Œ≤‚ÇÇ) :
    (Œ±‚ÇÅ ‚Üí Œ≤‚ÇÅ) ‚âÉ·µê (Œ±‚ÇÇ ‚Üí Œ≤‚ÇÇ) where
  __ := Equiv.arrowCongr' hŒ± hŒ≤
  measurable_toFun _ h := by
    exact MeasurableSet.preimage h <|
      measurable_pi_iff.mpr fun _ ‚Ü¶ hŒ≤.measurable.comp' (measurable_pi_apply _)
  measurable_invFun _ h := by
    exact MeasurableSet.preimage h <|
      measurable_pi_iff.mpr fun _ ‚Ü¶ hŒ≤.symm.measurable.comp' (measurable_pi_apply _)

theorem MeasurePreserving.arrowCongr' {Œ±‚ÇÅ Œ≤‚ÇÅ Œ±‚ÇÇ Œ≤‚ÇÇ : Type*} [Fintype Œ±‚ÇÅ] [Fintype Œ±‚ÇÇ]
    [MeasurableSpace Œ≤‚ÇÅ] [MeasurableSpace Œ≤‚ÇÇ] (Œº : Œ±‚ÇÅ ‚Üí Measure Œ≤‚ÇÅ) (ŒΩ : Œ±‚ÇÇ ‚Üí Measure Œ≤‚ÇÇ)
    [‚àÄ i, SigmaFinite (ŒΩ i)] (hŒ± : Œ±‚ÇÅ ‚âÉ Œ±‚ÇÇ) (hŒ≤ : Œ≤‚ÇÅ ‚âÉ·µê Œ≤‚ÇÇ)
    (hm : ‚àÄ i, MeasurePreserving hŒ≤ (Œº i) (ŒΩ (hŒ± i))) :
    MeasurePreserving (MeasurableEquiv.arrowCongr' hŒ± hŒ≤) (Measure.pi fun i ‚Ü¶ Œº i)
      (Measure.pi fun i ‚Ü¶ ŒΩ i) := by
  classical
  convert (measurePreserving_piCongrLeft (fun i : Œ±‚ÇÇ ‚Ü¶ ŒΩ i) hŒ±).comp
    (measurePreserving_pi Œº (fun i : Œ±‚ÇÅ ‚Ü¶ ŒΩ (hŒ± i)) hm)
  simp only [MeasurableEquiv.arrowCongr', Equiv.arrowCongr', Equiv.arrowCongr, EquivLike.coe_coe,
    MeasurableEquiv.coe_mk, Equiv.coe_fn_mk, MeasurableEquiv.piCongrLeft, Equiv.piCongrLeft,
    Equiv.symm_symm_apply, Equiv.piCongrLeft'_symm, Equiv.symm_symm]
  rfl

theorem MeasureTheory.volume_preserving.arrowCongr' {Œ±‚ÇÅ Œ≤‚ÇÅ Œ±‚ÇÇ Œ≤‚ÇÇ : Type*} [Fintype Œ±‚ÇÅ] [Fintype Œ±‚ÇÇ]
    [MeasureSpace Œ≤‚ÇÅ] [MeasureSpace Œ≤‚ÇÇ] [SigmaFinite (volume : Measure Œ≤‚ÇÇ)]
    (hŒ± : Œ±‚ÇÅ ‚âÉ Œ±‚ÇÇ) (hŒ≤ : Œ≤‚ÇÅ ‚âÉ·µê Œ≤‚ÇÇ) (hm : MeasurePreserving hŒ≤) :
    MeasurePreserving (MeasurableEquiv.arrowCongr' hŒ± hŒ≤) :=
  MeasurePreserving.arrowCongr' (fun _ ‚Ü¶ volume) (fun _ ‚Ü¶ volume) hŒ± hŒ≤ (fun _ ‚Ü¶ hm)

def MeasurableEquiv.subtypeEquiv {Œ± Œ≤ : Type*} [MeasurableSpace Œ±] [MeasurableSpace Œ≤]
    {p : Œ± ‚Üí Prop} {q : Œ≤ ‚Üí Prop} (e : Œ± ‚âÉ·µê Œ≤) (h : ‚àÄ x, p x ‚Üî q (e x)) :
    {a : Œ± // p a} ‚âÉ·µê {b : Œ≤ // q b} where
  __ := Equiv.subtypeEquiv e h
  measurable_toFun _ h := by
    exact MeasurableSet.preimage h (e.measurable.comp' measurable_subtype_coe).subtype_mk
  measurable_invFun _ h := by
    exact MeasurableSet.preimage h (e.symm.measurable.comp' measurable_subtype_coe).subtype_mk

theorem MeasurablePreserving.subtypeEquiv {Œ± Œ≤ : Type*} [MeasurableSpace Œ±] [MeasurableSpace Œ≤]
    (Œº : Measure Œ±) (ŒΩ : Measure Œ≤) {p : Œ± ‚Üí Prop} {q : Œ≤ ‚Üí Prop} (hq : MeasurableSet {x | q x})
    (e : Œ± ‚âÉ·µê Œ≤) (he : MeasurePreserving e Œº ŒΩ) (h : ‚àÄ x, p x ‚Üî q (e x)) :
    MeasurePreserving (MeasurableEquiv.subtypeEquiv e h)
      (Œº.comap Subtype.val) (ŒΩ.comap Subtype.val) where
  measurable := (e.subtypeEquiv h).measurable
  map_eq := by
    have heq : MeasurableEmbedding Subtype.val := MeasurableEmbedding.subtype_coe hq
    ext _ hs
    erw [MeasurableEmbedding.map_apply (e.subtypeEquiv h).measurableEmbedding,
      MeasurableEmbedding.comap_apply heq, MeasurableEmbedding.comap_apply, ‚Üê he.measure_preimage]
    ¬∑ congr; aesop
    ¬∑ exact (heq.measurableSet_image.mpr hs).nullMeasurableSet
    ¬∑ convert (e.symm.measurableEmbedding.comp heq).comp (e.subtypeEquiv h).measurableEmbedding
      ext
      simp only [Set.mem_setOf_eq, MeasurableEquiv.subtypeEquiv, MeasurableEquiv.coe_mk,
        Function.comp_apply, Equiv.subtypeEquiv_apply, EquivLike.coe_coe,
        MeasurableEquiv.symm_apply_apply]

def MeasurableEquiv.subtypeEquivRight {Œ± : Type*} [MeasurableSpace Œ±] {p : Œ± ‚Üí Prop} {q : Œ± ‚Üí Prop}
    (e : ‚àÄ x, p x ‚Üî q x) :
    { x : Œ± // p x } ‚âÉ·µê { x : Œ± // q x } := subtypeEquiv (MeasurableEquiv.refl _) e

theorem MeasurablePreserving.subtypeEquivRight {Œ± : Type*} [MeasurableSpace Œ±] (Œº : Measure Œ±)
    {p : Œ± ‚Üí Prop} {q : Œ± ‚Üí Prop} (hq : MeasurableSet {x | q x}) (e : ‚àÄ x, p x ‚Üî q x) :
    MeasurePreserving (MeasurableEquiv.subtypeEquivRight e) (Œº.comap Subtype.val)
      (Œº.comap Subtype.val) :=
  MeasurablePreserving.subtypeEquiv Œº Œº hq (MeasurableEquiv.refl _) (MeasurePreserving.id _) _

end Measure

theorem Complex.dist_induced (x y : ‚Ñù) :
    dist (x : ‚ÑÇ) (y : ‚ÑÇ) = dist x y := by
  rw [Complex.dist_of_im_eq (by rfl), Complex.ofReal_re, Complex.ofReal_re]

theorem Complex.ofReal_uniformEmbedding : UniformEmbedding (Complex.ofReal) := by
  simp_rw [Metric.uniformEmbedding_iff', Complex.ofReal_eq_coe, Complex.dist_induced, and_self]
  exact fun Œµ hŒµ ‚Ü¶ ‚ü®Œµ, hŒµ, fun h ‚Ü¶ h‚ü©

section Topo

open Set

theorem closure_lt_eq_le {Œ± Œ≤ : Type*} [TopologicalSpace Œ±] [PartialOrder Œ±] [OrderClosedTopology Œ±]
    [TopologicalSpace Œ≤] {f : Œ≤ ‚Üí Œ±}  {g : Œ≤ ‚Üí Œ±} (hf : Continuous f) (hg : Continuous g)
    (h : ‚àÄ ‚¶Éx‚¶Ñ, f x = g x ‚Üí ‚àÉ·∂† y in nhds x, f y < g y) :
    closure {b | f b < g b} = {b | f b ‚â§ g b} := by
  refine le_antisymm (closure_lt_subset_le hf hg) fun x hx ‚Ü¶ ?_
  obtain (hx‚ÇÅ| hx‚ÇÇ) := le_iff_eq_or_lt.mp hx
  ¬∑ exact mem_closure_iff_frequently.mpr (h hx‚ÇÅ)
  ¬∑ exact subset_closure hx‚ÇÇ

theorem frontier_le_eq_eq {Œ± Œ≤ : Type*} [TopologicalSpace Œ±] [LinearOrder Œ±] [OrderClosedTopology Œ±]
    {f : Œ≤ ‚Üí Œ±} {g : Œ≤ ‚Üí Œ±} [TopologicalSpace Œ≤] (hf : Continuous f)  (hg : Continuous g)
    (h : ‚àÄ ‚¶Éx‚¶Ñ, g x = f x ‚Üí ‚àÉ·∂† y in nhds x, g y < f y) :
    frontier {b | f b ‚â§ g b} = {b | f b = g b} := by
  rw [frontier_eq_closure_inter_closure, closure_le_eq hf hg]
  ext x
  rw [show {x | f x ‚â§ g x}·∂ú = {x | g x < f x} by ext; simp, closure_lt_eq_le hg hf h]
  simp only [Set.mem_inter_iff, Set.mem_setOf_eq, le_antisymm_iff]

theorem frontier_lt_eq_eq {Œ± Œ≤ : Type*} [TopologicalSpace Œ±] [LinearOrder Œ±] [OrderClosedTopology Œ±]
    {f : Œ≤ ‚Üí Œ±} {g : Œ≤ ‚Üí Œ±} [TopologicalSpace Œ≤] (hf : Continuous f)  (hg : Continuous g)
    (h : ‚àÄ ‚¶Éx‚¶Ñ, f x = g x ‚Üí ‚àÉ·∂† y in nhds x, f y < g y) :
    frontier {b | f b < g b} = {b | f b = g b} := by
  simpa only [eq_comm, ‚Üê not_lt, ‚Üê Set.compl_setOf, frontier_compl] using frontier_le_eq_eq hg hf h

end Topo

theorem Set.indicator_one_eq_indicator_one_iff {Œπ : Type*} (M‚ÇÄ : Type*) [MulZeroOneClass M‚ÇÄ]
    {s : Set Œπ} {t : Set Œπ} [Nontrivial M‚ÇÄ] :
    s.indicator (1 : Œπ ‚Üí M‚ÇÄ) = t.indicator 1 ‚Üî s = t :=
  ‚ü®fun h ‚Ü¶ indicator_one_inj M‚ÇÄ h, fun h ‚Ü¶ by rw [h]‚ü©

open MeasureTheory MeasureTheory.Measure

open Set in
theorem lintegral_comp_abs {f : ‚Ñù ‚Üí ENNReal} (hf : Measurable f) :
    ‚à´‚Åª x, f |x| = 2 * ‚à´‚Åª x in Ioi 0, f x := by
  calc
    _ = (‚à´‚Åª x in Iic 0, f |x|) + ‚à´‚Åª x in Ioi 0, f |x| := by
      rw [‚Üê lintegral_union measurableSet_Ioi (Iic_disjoint_Ioi le_rfl), Iic_union_Ioi,
        setLIntegral_univ]
    _ = (‚à´‚Åª x in Iio 0, f (-x)) + ‚à´‚Åª x in Ioi 0, f x := by
      rw [restrict_Iio_eq_restrict_Iic]
      congr 1
      ¬∑ refine setLIntegral_congr_fun measurableSet_Iic ?_
        exact Filter.Eventually.of_forall fun x hx ‚Ü¶ by rw [abs_of_nonpos hx]
      ¬∑ refine setLIntegral_congr_fun measurableSet_Ioi ?_
        exact Filter.Eventually.of_forall fun x hx ‚Ü¶ by rw [abs_of_pos (by convert hx)]
    _ = 2 * ‚à´‚Åª x in Ioi 0, f x := by
      rw [two_mul, show Iio (0 : ‚Ñù) = (fun x ‚Ü¶ -x) ‚Åª¬π' Ioi 0 by simp,
        ‚Üê (setLIntegral_map measurableSet_Ioi hf measurable_neg), Measure.map_neg_eq_self]

theorem MeasureTheory.Measure.restrict_prod_eq_univ_prod {Œ± Œ≤ : Type*} [MeasurableSpace Œ±]
    [MeasurableSpace Œ≤] {Œº : MeasureTheory.Measure Œ±} {ŒΩ : MeasureTheory.Measure Œ≤}
    [MeasureTheory.SFinite ŒΩ] [MeasureTheory.SFinite Œº]  (t : Set Œ≤) :
    Œº.prod (ŒΩ.restrict t) = (Œº.prod ŒΩ).restrict (Set.univ √óÀ¢ t) := by
  have : Œº = Œº.restrict Set.univ := Measure.restrict_univ.symm
  rw [this, Measure.prod_restrict, ‚Üê this]

theorem Real.rpow_ne_zero_of_pos {x : ‚Ñù} (hx : 0 < x) (y : ‚Ñù) : x ^ y ‚â† 0 := by
  rw [rpow_def_of_pos hx]; apply exp_ne_zero _

-- theorem Basis.total_eq_iff_eq_repr {M R Œπ : Type*} [Semiring R] [AddCommMonoid M] [Module R M]
--     (B : Basis Œπ R M) (x : M) (c : Œπ ‚Üí‚ÇÄ R) : Finsupp.total Œπ M R B c = x ‚Üî c = B.repr x :=
--   ‚ü®fun h ‚Ü¶ by rw [‚Üê h, B.repr_total], fun h ‚Ü¶ by rw [h, B.total_repr]‚ü©

-- Is it a good idea to use equivFun?
theorem Basis.sum_eq_iff_eq_equivFun {M R Œπ : Type*} [Fintype Œπ] [Semiring R] [AddCommMonoid M]
    [Module R M] (B : Basis Œπ R M) (x : M) (c : Œπ ‚Üí R) :
    ‚àë i, (c i) ‚Ä¢ (B i) = x ‚Üî c = B.equivFun x :=
  ‚ü®fun h ‚Ü¶ by rw [‚Üê h, B.equivFun_apply, B.repr_sum_self], fun h ‚Ü¶ by rw [h, B.sum_equivFun]‚ü©

theorem ContinuousLinearEquiv.image_interior {R‚ÇÅ R‚ÇÇ : Type*} [Semiring R‚ÇÅ] [Semiring R‚ÇÇ]
    {œÉ‚ÇÅ‚ÇÇ : R‚ÇÅ ‚Üí+* R‚ÇÇ} {œÉ‚ÇÇ‚ÇÅ : R‚ÇÇ ‚Üí+* R‚ÇÅ} [RingHomInvPair œÉ‚ÇÅ‚ÇÇ œÉ‚ÇÇ‚ÇÅ] [RingHomInvPair œÉ‚ÇÇ‚ÇÅ œÉ‚ÇÅ‚ÇÇ]
    {M‚ÇÅ : Type*} [TopologicalSpace M‚ÇÅ] [AddCommMonoid M‚ÇÅ] {M‚ÇÇ : Type*} [TopologicalSpace M‚ÇÇ]
    [AddCommMonoid M‚ÇÇ] [Module R‚ÇÅ M‚ÇÅ] [Module R‚ÇÇ M‚ÇÇ] (e : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ)  (s : Set M‚ÇÅ) :
    e '' interior s = interior (e '' s) :=
  e.toHomeomorph.image_interior s

theorem ContinuousLinearEquiv.preimage_interior {R‚ÇÅ R‚ÇÇ : Type*} [Semiring R‚ÇÅ] [Semiring R‚ÇÇ]
    {œÉ‚ÇÅ‚ÇÇ : R‚ÇÅ ‚Üí+* R‚ÇÇ} {œÉ‚ÇÇ‚ÇÅ : R‚ÇÇ ‚Üí+* R‚ÇÅ} [RingHomInvPair œÉ‚ÇÅ‚ÇÇ œÉ‚ÇÇ‚ÇÅ] [RingHomInvPair œÉ‚ÇÇ‚ÇÅ œÉ‚ÇÅ‚ÇÇ]
    {M‚ÇÅ : Type*} [TopologicalSpace M‚ÇÅ] [AddCommMonoid M‚ÇÅ] {M‚ÇÇ : Type*} [TopologicalSpace M‚ÇÇ]
    [AddCommMonoid M‚ÇÇ] [Module R‚ÇÅ M‚ÇÅ] [Module R‚ÇÇ M‚ÇÇ] (e : M‚ÇÅ ‚âÉSL[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ) (s : Set M‚ÇÇ) :
    e ‚Åª¬π' interior s = interior (e ‚Åª¬π' s) :=
  e.toHomeomorph.preimage_interior s

def ContinuousLinearEquiv.piCongrRight {R : Type*} [Semiring R] {Œπ : Type*} {M : Œπ ‚Üí Type*}
    [‚àÄ i, TopologicalSpace (M i)] [‚àÄ i, AddCommMonoid (M i)] [‚àÄ i, Module R (M i)] {N : Œπ ‚Üí Type*}
    [‚àÄ i, TopologicalSpace (N i)] [‚àÄ i, AddCommMonoid (N i)] [‚àÄ i, Module R (N i)]
    (f : (i : Œπ) ‚Üí M i ‚âÉL[R] N i) :
    ((i : Œπ) ‚Üí M i) ‚âÉL[R] (i : Œπ) ‚Üí N i :=
  { LinearEquiv.piCongrRight fun i ‚Ü¶ f i with
    continuous_toFun := by
      exact continuous_pi fun i ‚Ü¶ (f i).continuous_toFun.comp (continuous_apply i)
    continuous_invFun := by
      exact continuous_pi fun i => (f i).continuous_invFun.comp (continuous_apply i) }

@[simp]
theorem ContinuousLinearEquiv.piCongrRight_apply {R : Type*} [Semiring R] {Œπ : Type*}
    {M : Œπ ‚Üí Type*} [‚àÄ i, TopologicalSpace (M i)] [‚àÄ i, AddCommMonoid (M i)] [‚àÄ i, Module R (M i)]
    {N : Œπ ‚Üí Type*} [‚àÄ i, TopologicalSpace (N i)] [‚àÄ i, AddCommMonoid (N i)] [‚àÄ i, Module R (N i)]
    (f : (i : Œπ) ‚Üí M i ‚âÉL[R] N i) (m : (i : Œπ) ‚Üí M i) (i : Œπ) :
    ContinuousLinearEquiv.piCongrRight f m i = (f i) (m i) := rfl

@[simp]
theorem ContinuousLinearEquiv.piCongrRight_symm_apply {R : Type*} [Semiring R] {Œπ : Type*}
    {M : Œπ ‚Üí Type*} [‚àÄ i, TopologicalSpace (M i)] [‚àÄ i, AddCommMonoid (M i)] [‚àÄ i, Module R (M i)]
    {N : Œπ ‚Üí Type*} [‚àÄ i, TopologicalSpace (N i)] [‚àÄ i, AddCommMonoid (N i)] [‚àÄ i, Module R (N i)]
    (f : (i : Œπ) ‚Üí M i ‚âÉL[R] N i) (n : (i : Œπ) ‚Üí N i) (i : Œπ) :
    (ContinuousLinearEquiv.piCongrRight f).symm n i = (f i).symm (n i) := rfl

def ContinuousLinearEquiv.neg (R : Type*) {M : Type*} [Semiring R] [AddCommGroup M]
    [TopologicalSpace M] [ContinuousNeg M] [Module R M] :
    M ‚âÉL[R] M :=
  { LinearEquiv.neg R with
    continuous_toFun := continuous_neg
    continuous_invFun := continuous_neg }

@[simp]
theorem ContinuousLinearEquiv.coe_neg {R : Type*} {M : Type*} [Semiring R] [AddCommGroup M]
    [TopologicalSpace M] [ContinuousNeg M] [Module R M] :
    ‚áë(neg R : M ‚âÉL[R] M) = -id := rfl

@[simp]
theorem ContinuousLinearEquiv.neg_apply {R : Type*} {M : Type*} [Semiring R] [AddCommGroup M]
    [TopologicalSpace M] [ContinuousNeg M] [Module R M] (x : M) : neg R x = -x := by simp

@[simp]
theorem ContinuousLinearEquiv.symm_neg {R : Type*} {M : Type*} [Semiring R] [AddCommGroup M]
    [TopologicalSpace M] [ContinuousNeg M] [Module R M] :
    (neg R : M ‚âÉL[R] M).symm = neg R := rfl

@[simp]
theorem ContinuousLinearEquiv.refl_apply (R‚ÇÅ : Type*) [Semiring R‚ÇÅ] (M‚ÇÅ : Type*)
    [TopologicalSpace M‚ÇÅ] [AddCommMonoid M‚ÇÅ] [Module R‚ÇÅ M‚ÇÅ] (x : M‚ÇÅ) :
    ContinuousLinearEquiv.refl R‚ÇÅ M‚ÇÅ x = x := rfl
