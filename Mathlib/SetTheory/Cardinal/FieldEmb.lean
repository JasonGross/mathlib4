/-
Copyright (c) 2024 Junyan Xu. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Junyan Xu
-/
import Mathlib.FieldTheory.MvPolynomial
import Mathlib.FieldTheory.SeparableClosure
import Mathlib.FieldTheory.PurelyInseparable
import Mathlib.LinearAlgebra.FreeAlgebra
import Mathlib.Order.Interval.Set.WithBotTop

/-!
# Number of embeddings of an infinite algebraic field extension into the algebraic closure

We show that if `E/F` is an infinite-dimensional algebraic extension, then
`#(Field.Emb F E) = 2 ^ Field.sepDegree F E`. If `E/F` is moreover separable, then
`#(Field.Emb F E) = 2 ^ Module.rank F E`. This is in contrast to the finite-dimensional case, where
`#(Field.Emb F E) = Module.rank F E`.

We use a transfinite recursive construction that is fairly standard in set theory, but the author
has not seen similar arguments elsewhere in mathlib, and some parts proved tricky to formalize.

The extension `E/F` can be filtered by intermediate fields indexed by a well-order:
simply put a well-order on a basis of `E/F`, and at each step, take the smallest basis element
that is not contained in the intermediate field generated by all previous elements, so that they
generate a strictly larger intermediate field together. This process can extend all the way
to the initial ordinal `ι` of the cardinal `Module.rank F E`, because the dimension of the
subalgebra generated by an infinite set cannot be greater than the cardinality of the set, and
in an algebraic extension, any subalgebra is a field. This is proven as `Algebra.rank_adjoin_le`
and used to show `leastExt` is a total function from `ι` to itself. It is probably
mathematically the most nontrivial part of the whole argument, but turned out easy to
formalize and was done the earliest.

Once we have the filtration `E⟮<i⟯` for `i : ι`, we may build an embedding `E →ₐ[F] Ē` step by
step. To extend an embedding `E⟮<i⟯ →ₐ[F] Ē` to the successor `E⟮<i⁺⟯`, the number of choices
is equal to the (finite) separable degree of `E⟮<i⁺⟯ / E⟮<i⟯`, which is equal to its rank if
`E/F` is separable. Since each extension is nontrivial, the degree is at least two (`two_le_deg`)
but always finite. Intuitively, these choices multiply together to give the cardinality of
`Field.Emb F E := (E →ₐ[F] Ē)`, and since the total times of choices to be made is the length of
the filtration `#ι`, we conclude that `2 ^ #ι ≤ #(Field.Emb F E) ≤ ℵ₀ ^ #ι`, but for infinite `#ι`
both sides are equal, so we get an equality `#(Field.Emb F E) = 2 ^ #ι = 2 ^ Module.rank F E`.

To rigorize the argument we formalize the choice at step `i` as a type `X i` of cardinality
equal to `Field.Emb E⟮<i⟯ E⟮<i⁺⟯` (the separable degree of `E⟮<i⁺⟯ / E⟮<i⟯`) together with a
bijection `F i⁺ ≃ F i × X i`, where `F i := (E⟮<i⟯ →ₐ[F] Ē)` (sorry for the confusing notation),
and we formalize the combination of choices as the Pi type `∀ i : ι, X i`. We use transfinite
recursion (`SuccOrder.limitRecOn`) to build a bijection `Field.Emb F E ≃ ∀ i, X i` with the
Pi type by successively extending (`piEquivSucc`) bijections `F i ≃ ∀ j : Iio i, X j` using
the bijections `F i⁺ ≃ F i × X i` with product types. More details are found in the
`InverseLimit` section below.
-/

open Cardinal Module.Free Set Order IntermediateField

universe u v

noncomputable section

local notation i"⁺" => succ i -- Note: conflicts with `PosPart` notation

section InverseLimit

/-!

In this section we compute the cardinality of each node in an inverse system `F i` indexed by a
well-order in which every map between successive nodes has constant fiber `X i`, and every limit
node is the `inverseLimit` of the inverse subsystem formed by all previous nodes.
This part might be considered mathematically trivial but took the longest to formalize.

The most tricky part of the whole argument happens at limit nodes: if `i : ι` is a limit,
what we have in hand is a family of bijections `F j ≃ ∀ l : Iio j, X l` for every `j < i`,
which we would like to "glue" up to a bijection `F i ≃ ∀ l : Iio i, X l`. We denote
`∀ l : Iio i, X l` by `PiLT X i`, and they form an inverse system just like the `F i`.
Observe that at a limit node `i`, `PiLT X i` is actually the inverse limit of `PiLT X j` over
all `j < i` (`piLTLim`). If the family of bijections `F j ≃ PiLT X j` is natural (`IsNatEquiv`),
we immediately obtain a bijection between the limits `inverseLimit F i ≃ PiLT X i` (`invLimEquiv`),
and we just need an additional bijection `F i ≃ inverseLimit F i` to obtain the desired
extension `F i ≃ PiLT X i` to the limit node `i`. We do have such a bijection for field
embeddings (`AlgHom`), because an embedding of a directed union of intermediate fields can
be equivalently specified by a compatible family of embeddings of the individual fields.

Now our task reduces to recursive construction of a *natural* family of bijections for each `i`.
We can prove by that a natural family over all `l ≤ i` (`Iic i`) extends to a natural family over
`Iic i⁺`, but at a limit node, recursion stops working: we have natural families over all `Iic j`
for each `j < i`, but we need to know that they glue together to form a natural family over all
`l < i` (`Iio i`). This intricacy did not occur to the author when he thought he had a proof and
set out to formalize it. Fortunately he was able to figure out an additional `compat` condition
(compatibility with the bijections `F i⁺ ≃ F i × X i` in the `X` component) that guarantees
uniqueness (`unique_pEquivOn`) and hence gluability (well-definedness): see `pEquivOnGlue`.
Instead of just a family of natural families, we actually construct a family of
the stronger `PEquivOn`s that bundles the `compat` condition, in order for the inductive argument
work.

It is possible to circumvent the introduction of the `compat` condition using Zorn's lemma;
if there is a chain of natural families (i.e. for any two families in the chain, one is an
extension of the other) over lowersets (which are all of the form `Iic`, `Iio`, or `univ`),
we can clearly take the union to get a natural family that extend them all. If a maximal
natural family has domain `Iic i` or `Iio i` (`i` a limit), we already know how to extend it
one step further to `Iic i⁺` or `Iic i` respectively, so it must be the case that the domain
is everything. However, the author chose the `compat` approach in the end because it constructs
the distinguished bijection that is compatible with the projections to all `X i`.

Note that the bottom element in `ι` is technically also a limit according to `IsSuccPrelimit`,
but the only place it requires special treatment is in `equivLim` (the bijection between
`E⟮<i⟯ →ₐ[F] Ē` and the inverse limit of `E⟮<j⟯ →ₐ[F] Ē` over `j < i`).

The final technical detail is that, since we construct `PEquivOn`s on `Iic` intervals and
since `ι` is a limit ordinal, we need to adjoin a top element to `ι` in order to obtain a
`PEquivOn` on all of `ι`. Its node is the top intermediate field, namely `E` itself, so
we finally obtain `Field.Emb F E ≃ (⊤ →ₐ[F] Ē) ≃ ∀ i < ⊤, X i ≃ ∀ i : ι, Field.Emb E⟮<i⟯ E⟮<i⁺⟯`. ∎

-/

section proj

variable {ι : Type*} [Preorder ι] {F X : ι → Type*} {i j : ι} (h : i ≤ j)
  (f : ∀ ⦃i j : ι⦄, i ≤ j → F j → F i)

class InverseSystem : Prop where
  map_self ⦃i⦄ (x : F i) : f le_rfl x = x
  map_map ⦃k j i⦄ (hkj : k ≤ j) (hji : j ≤ i) (x : F i) : f hkj (f hji x) = f (hkj.trans hji) x

private def inverseLimit (i : ι) : Set (∀ l : Iio i, F l) :=
  {F | ∀ ⦃j k⦄ (h : j.1 ≤ k.1), f h (F k) = F j}

abbrev piLT (X : ι → Type*) (i : ι) := ∀ l : Iio i, X l

/-- Projection from a Pi type to the Pi type over an initial segment of its indexing type. -/
abbrev piLTProj (f : piLT X j) : piLT X i := fun l ↦ f ⟨l, l.2.trans_le h⟩

theorem piLTProj_intro {l : Iio j} {f : piLT X j} (hl : l < i) :
    f l = piLTProj h f ⟨l, hl⟩ := rfl

/-- The predicate that says a family of equivalences between `F j` and `piLT X j`
  is a natural transformation. -/
private def IsNatEquiv {s : Set ι} (equiv : ∀ j : s, F j ≃ piLT X j) : Prop :=
  ∀ ⦃j k⦄ (hj : j ∈ s) (hk : k ∈ s) (h : k ≤ j) (x : F j),
    equiv ⟨k, hk⟩ (f h x) = piLTProj h (equiv ⟨j, hj⟩ x)

abbrev Order.IsSuccPrelimit.mid {ι} [Preorder ι] {i j : ι} (hi : IsSuccPrelimit i) (hj : j < i) :
    {k // j < k ∧ k < i} := Classical.indefiniteDescription _ ((not_covBy_iff hj).mp <| hi j)

variable {ι : Type*} [LinearOrder ι] {X : ι → Type*} {i : ι} (hi : IsSuccPrelimit i)

@[simps apply] def piLTLim : piLT X i ≃ inverseLimit (@piLTProj _ _ X) i where
  toFun f := ⟨fun j ↦ piLTProj j.2.le f, fun _ _ _ ↦ rfl⟩
  invFun f l := let k := hi.mid l.2; f.1 ⟨k, k.2.2⟩ ⟨l, k.2.1⟩
  left_inv f := rfl
  right_inv f := by
    ext j l
    set k := hi.mid (l.2.trans j.2)
    obtain le | le := le_total j ⟨k, k.2.2⟩
    exacts [congr_fun (f.2 le) l, (congr_fun (f.2 le) ⟨l, _⟩).symm]

theorem piLTLim_symm_apply {f} (k : Iio i) {l : Iio i} (hl : l.1 < k.1) :
    (piLTLim (X := X) hi).symm f l = f.1 k ⟨l, hl⟩ := by
  conv_rhs => rw [← (piLTLim hi).right_inv f]
  rfl

end proj

variable {ι : Type*} [LinearOrder ι] {F X : ι → Type*} {i : ι}

-- PartialOrder + DecidableEq is enough
private def piSplitLE : piLT X i × X i ≃ ∀ j : Iic i, X j where
  toFun f j := if h : j = i then h.symm ▸ f.2 else f.1 ⟨j, j.2.lt_of_ne h⟩
  invFun f := (fun j ↦ f ⟨j, j.2.le⟩, f ⟨i, le_rfl⟩)
  left_inv f := by ext j; exacts [dif_neg j.2.ne, dif_pos rfl]
  right_inv f := by
    ext j; dsimp only; split_ifs with h
    · cases (Subtype.ext h : j = ⟨i, le_rfl⟩); rfl
    · rfl

@[simp] theorem piSplitLE_eq {f : piLT X i × X i} :
    piSplitLE f ⟨i, le_rfl⟩ = f.2 := by simp [piSplitLE]

theorem piSplitLE_lt {f : piLT X i × X i} {j} (hj : j < i) :
    piSplitLE f ⟨j, hj.le⟩ = f.1 ⟨j, hj⟩ := dif_neg hj.ne

@[simps!] def Equiv.piCongrSet {β : ι → Type*} {s t : Set ι} (h : s = t) :
    (∀ i : s, β i) ≃ (∀ i : t, β i) where
  toFun f i := f ⟨i, h ▸ i.2⟩
  invFun f i := f ⟨i, h.symm ▸ i.2⟩
  left_inv f := rfl
  right_inv f := rfl

variable {f : ∀ ⦃i j : ι⦄, i ≤ j → F j → F i}

section Succ

variable [SuccOrder ι]
  (equiv : ∀ j : Iic i, F j ≃ piLT X j) (e : F (i⁺) ≃ F i × X i) (hi : ¬ IsMax i)

def piEquivSucc : ∀ j : Iic (i⁺), F j ≃ piLT X j :=
  piSplitLE (X := fun i ↦ F i ≃ piLT X i)
  (fun j ↦ equiv ⟨j, (lt_succ_iff_of_not_isMax hi).mp j.2⟩,
    e.trans <| ((equiv ⟨i, le_rfl⟩).prodCongr <| Equiv.refl _).trans <| piSplitLE.trans <|
      Equiv.piCongrSet <| Set.ext fun _ ↦ (lt_succ_iff_of_not_isMax hi).symm)

theorem piEquivSucc_self {x} :
    piEquivSucc equiv e hi ⟨_, le_rfl⟩ x ⟨i, lt_succ_of_not_isMax hi⟩ = (e x).2 := by
  simp [piEquivSucc]

variable {equiv e}
theorem isNatEquiv_piEquivSucc [InverseSystem f] (H : ∀ x, (e x).1 = f (le_succ i) x)
    (nat : IsNatEquiv f equiv) : IsNatEquiv f (piEquivSucc equiv e hi) := fun j k hj hk h x ↦ by
  have lt_succ {j} := (lt_succ_iff_of_not_isMax (b := j) hi).mpr
  obtain rfl | hj := le_succ_iff_eq_or_le.mp hj
  · obtain rfl | hk := le_succ_iff_eq_or_le.mp hk
    · simp [InverseSystem.map_self]
    · funext l
      rw [piEquivSucc, piSplitLE_lt (lt_succ hk),
        ← InverseSystem.map_map (f := f) hk (le_succ i), ← H, piLTProj, nat le_rfl]
      simp [piSplitLE_lt (l.2.trans_le hk)]
  · rw [piEquivSucc, piSplitLE_lt (h.trans_lt <| lt_succ hj), nat hj, piSplitLE_lt (lt_succ hj)]

end Succ

section Lim

variable {equiv : ∀ j : Iio i, F j ≃ piLT X j} (nat : IsNatEquiv f equiv)

@[simps] def invLimEquiv : inverseLimit f i ≃ inverseLimit (@piLTProj _ _ X) i where
  toFun t := ⟨fun l ↦ equiv l (t.1 l), fun _ _ h ↦ Eq.symm <| by simp_rw [← t.2 h]; apply nat⟩
  invFun t := ⟨fun l ↦ (equiv l).symm (t.1 l),
    fun _ _ h ↦ (Equiv.eq_symm_apply _).mpr <| by rw [nat, ← t.2 h]; simp⟩
  left_inv t := by ext; apply Equiv.left_inv
  right_inv t := by ext1; ext1; apply Equiv.right_inv

variable (equivLim : F i ≃ inverseLimit f i) (hi : IsSuccPrelimit i)

def piEquivLim : ∀ j : Iic i, F j ≃ piLT X j :=
  piSplitLE (X := fun j ↦ F j ≃ piLT X j)
    (equiv, equivLim.trans <| (invLimEquiv nat).trans (piLTLim hi).symm)

variable {equivLim}
theorem isNatEquiv_piEquivLim [InverseSystem f] (H : ∀ x l, (equivLim x).1 l = f l.2.le x) :
    IsNatEquiv f (piEquivLim nat equivLim hi) := fun j k hj hk h t ↦ by
  obtain rfl | hj := hj.eq_or_lt
  · obtain rfl | hk := hk.eq_or_lt
    · simp [InverseSystem.map_self]
    · funext l
      simp_rw [piEquivLim, piSplitLE_lt hk, piSplitLE_eq, Equiv.trans_apply]
      rw [piLTProj, piLTLim_symm_apply hi ⟨k, hk⟩ (by exact l.2), invLimEquiv_apply_coe, H]
  · rw [piEquivLim, piSplitLE_lt (h.trans_lt hj), piSplitLE_lt hj]; apply nat

end Lim

section Unique

variable [SuccOrder ι] (f) (equivSucc : ∀ ⦃i⦄, ¬IsMax i → F (i⁺) ≃ F i × X i)

@[ext] structure PEquivOn (s : Set ι) where
  /-- A partial family of equivalences between `F` and `piLT X` defined on some set in `ι`. -/
  equiv : ∀ i : s, F i ≃ piLT X i
  /-- It is a natural family of equivalences. -/
  nat : IsNatEquiv f equiv
  /-- It is compatible with a family of equivalences relating `F i⁺` to `F i`. -/
  compat : ∀ {i} (hsi : (i⁺ : ι) ∈ s) (hi : ¬IsMax i) (x),
    equiv ⟨i⁺, hsi⟩ x ⟨i, lt_succ_of_not_isMax hi⟩ = (equivSucc hi x).2

variable {s t : Set ι} {f equivSucc} [WellFoundedLT ι]

@[simps] def PEquivOn.restrict (e : PEquivOn f equivSucc t) (h : s ⊆ t) :
    PEquivOn f equivSucc s where
  equiv i := e.equiv ⟨i, h i.2⟩
  nat _ _ _ _ := e.nat _ _
  compat _ := e.compat _

theorem unique_pEquivOn (hs : IsLowerSet s) {e₁ e₂ : PEquivOn f equivSucc s} : e₁ = e₂ := by
  obtain ⟨e₁, nat₁, compat₁⟩ := e₁
  obtain ⟨e₂, nat₂, compat₂⟩ := e₂
  ext1; ext1 i; dsimp only
  refine SuccOrder.prelimitRecOn i.1 (C := fun i ↦ ∀ h : i ∈ s, e₁ ⟨i, h⟩ = e₂ ⟨i, h⟩)
    (fun i nmax ih hi ↦ ?_) (fun i lim ih hi ↦ ?_) i.2
  · ext x ⟨j, hj⟩
    obtain rfl | hj := ((lt_succ_iff_of_not_isMax nmax).mp hj).eq_or_lt
    · exact (compat₁ _ nmax x).trans (compat₂ _ nmax x).symm
    have hi : i ∈ s := hs (le_succ i) hi
    rw [piLTProj_intro (f := e₁ _ x) (le_succ i) (by exact hj),
        ← nat₁ _ hi (by exact le_succ i), ih, nat₂ _ hi (by exact le_succ i)]
  · ext x j
    have ⟨k, hjk, hki⟩ := lim.mid j.2
    have hk : k ∈ s := hs hki.le hi
    rw [piLTProj_intro (f := e₁ _ x) hki.le hjk, piLTProj_intro (f := e₂ _ x) hki.le hjk,
      ← nat₁ _ hk, ← nat₂ _ hk, ih _ hki]

theorem pEquivOn_apply_eq (h : IsLowerSet (s ∩ t))
    {e₁ : PEquivOn f equivSucc s} {e₂ : PEquivOn f equivSucc t} {i} {his : i ∈ s} {hit : i ∈ t} :
    e₁.equiv ⟨i, his⟩ = e₂.equiv ⟨i, hit⟩ :=
  show (e₁.restrict <| inter_subset_left).equiv ⟨i, his, hit⟩ =
       (e₂.restrict <| inter_subset_right).equiv ⟨i, his, hit⟩ from
  congr_fun (congr_arg _ <| unique_pEquivOn h) _

def pEquivOnSucc [InverseSystem f] (hi : ¬IsMax i) (e : PEquivOn f equivSucc (Iic i))
    (H : ∀ ⦃i⦄ (hi : ¬ IsMax i) x, (equivSucc hi x).1 = f (le_succ i) x) :
    PEquivOn f equivSucc (Iic (i⁺)) where
  equiv := piEquivSucc e.equiv (equivSucc hi) hi
  nat := isNatEquiv_piEquivSucc hi (H hi) e.nat
  compat hsj hj x := by
    obtain eq | lt := hsj.eq_or_lt
    · cases (succ_eq_succ_iff_of_not_isMax hj hi).mp eq; simp [piEquivSucc]
    · rwa [piEquivSucc, piSplitLE_lt, e.compat]

variable (hi : IsSuccPrelimit i) (e : ∀ j : Iio i, PEquivOn f equivSucc (Iic j))

def pEquivOnGlue : PEquivOn f equivSucc (Iio i) where
  equiv := (piLTLim (X := fun j ↦ F j ≃ piLT X j) hi).symm
    ⟨fun j ↦ ((e j).restrict fun _ h ↦ h.le).equiv, fun _ _ h ↦ funext fun _ ↦
      pEquivOn_apply_eq ((isLowerSet_Iio _).inter <| isLowerSet_Iio _)⟩
  nat j k hj hk h := by rw [piLTLim_symm_apply]; apply (e _).nat; exact h.trans_lt (hi.mid _).2.1
  compat hj := have k := hi.mid hj
    by rw [piLTLim_symm_apply hi ⟨_, k.2.2⟩ (by exact k.2.1)]; apply (e _).compat

def pEquivOnLim [InverseSystem f]
    (equivLim : F i ≃ inverseLimit f i) (H : ∀ x l, (equivLim x).1 l = f l.2.le x) :
    PEquivOn f equivSucc (Iic i) where
  equiv := piEquivLim (pEquivOnGlue hi e).nat equivLim hi
  nat := isNatEquiv_piEquivLim (pEquivOnGlue hi e).nat hi H
  compat hsj hj x := by
    rw [piEquivLim, piSplitLE_lt (hi.succ_lt <| (succ_le_iff_of_not_isMax hj).mp hsj)]
    apply (pEquivOnGlue hi e).compat

end Unique

def globalEquiv [WellFoundedLT ι] [SuccOrder ι] [InverseSystem f]
    (equivSucc : ∀ i, ¬IsMax i → {e : F (i⁺) ≃ F i × X i // ∀ x, (e x).1 = f (le_succ i) x})
    (equivLim : ∀ i, IsSuccPrelimit i →
      {e : F i ≃ inverseLimit f i // ∀ x l, (e x).1 l = f l.2.le x})
    (i : ι) : F i ≃ piLT X i :=
  let e := SuccOrder.prelimitRecOn
    (C := (PEquivOn f (fun i hi ↦ (equivSucc i hi).1) <| Iic ·)) i
    (fun _ hi e ↦ pEquivOnSucc hi e fun i hi ↦ (equivSucc i hi).2)
    fun i hi e ↦ pEquivOnLim hi (fun j ↦ e j j.2) (equivLim i hi).1 (equivLim i hi).2
  e.equiv ⟨i, le_rfl⟩

end InverseLimit

variable (F : Type u) (E : Type v) [Field F] [Field E] [Algebra F E]

namespace Field.Emb.Cardinal

set_option quotPrecheck false

/-- Index a basis of E/F using the initial ordinal of the cardinal `Module.rank F E`. -/
local notation "ι" => (Module.rank F E).ord.toType

local instance : SuccOrder ι := SuccOrder.ofLinearWellFoundedLT ι

private lemma card_ι : #ι = Module.rank F E := (mk_toType _).trans (card_ord _)

/-- A basis of E/F indexed by the initial ordinal. -/
private def wellOrderedBasis : Basis ι F E :=
  (chooseBasis F E).reindex
    (Cardinal.eq.mp <| (card_ι F E).trans <| rank_eq_card_chooseBasisIndex F E).some.symm

local notation "b" => wellOrderedBasis F E
local notation "Ē" => AlgebraicClosure E

variable {F E}

private theorem adjoin_basis_eq_top : adjoin F (range b) = ⊤ :=
  toSubalgebra_injective <| Subalgebra.toSubmodule_injective <| top_unique <|
    (Basis.span_eq b).ge.trans <| (Algebra.span_le_adjoin F _).trans <| algebra_adjoin_le_adjoin _ _

section Algebraic

open _root_.Algebra (IsAlgebraic)
variable [rank_inf : Fact (ℵ₀ ≤ Module.rank F E)] [IsAlgebraic F E]

private local instance : NoMaxOrder ι := Cardinal.noMaxOrder Fact.out

variable (F E) in
/-- `leastExt i` is defined to be the smallest `k : ι` that generates a nontrival extension over
(i.e. does not lie in) the subalgebra (= intermediate field) generated by all previous
`leastExt j`, `j < i`. For cardinality reasons, such `k` always exist if `ι` is infinite. -/
private def leastExt : ι → ι :=
  wellFounded_lt.fix fun i ih ↦
  let s := range fun j : Iio i ↦ b (ih j j.2)
  wellFounded_lt.min {k | b k ∉ adjoin F s} <| by
    rw [← compl_setOf, nonempty_compl]; by_contra!
    simp_rw [eq_univ_iff_forall, mem_setOf] at this
    have := adjoin_le_iff.mpr (range_subset_iff.mpr this)
    rw [adjoin_basis_eq_top, ← eq_top_iff] at this
    apply_fun Module.rank F at this
    refine ne_of_lt ?_ this
    conv_rhs => rw [topEquiv (E := E) |>.toLinearEquiv.rank_eq]
    have := mk_Iio_ord_toType i
    obtain eq | lt := rank_inf.out.eq_or_lt
    · replace this := mk_lt_aleph0_iff.mp (this.trans_eq eq.symm)
      have : FiniteDimensional F (adjoin F s) :=
        finiteDimensional_adjoin fun x _ ↦ (IsAlgebraic.isAlgebraic x).isIntegral
      exact (Module.rank_lt_aleph0 _ _).trans_eq eq
    · exact (Subalgebra.equivOfEq _ _ <| adjoin_algebraic_toSubalgebra (S := s)
        fun x _ ↦ IsAlgebraic.isAlgebraic x)|>.toLinearEquiv.rank_eq.trans_lt <|
        (Algebra.rank_adjoin_le _).trans_lt (max_lt (mk_range_le.trans_lt this) lt)

local notation "φ" => leastExt F E

section
local notation "E⟮<"i"⟯" => adjoin F (b ∘ φ '' Iio i)

private theorem isLeast_φ' (i : ι) :
    IsLeast {k | b k ∉ adjoin F (range fun j : Iio i ↦ b (φ j))} (φ i) := by
  rw [leastExt, wellFounded_lt.fix_eq]
  exact ⟨wellFounded_lt.min_mem _ _, fun _ ↦ (wellFounded_lt.min_le ·)⟩

private theorem isLeast_φ (i : ι) : IsLeast {k | b k ∉ E⟮<i⟯} (φ i) := by
  rw [image_eq_range]; exact isLeast_φ' i

private theorem strictMono_φ : StrictMono φ := fun i j h ↦ by
  have least := isLeast_φ (F := F) (E := E)
  by_contra!
  obtain eq | lt := this.eq_or_lt
  · exact (least j).1 (subset_adjoin _ _ ⟨i, h, congr_arg b eq.symm⟩)
  · refine ((least i).2 <| mt (adjoin.mono _ _ _ (image_mono ?_) ·) (least j).1).not_lt lt
    exact fun k (hk : k < i) ↦ hk.trans h

private theorem adjoin_image_φ (i : ι) : E⟮<i⟯ = adjoin F (b '' Iio (φ i)) := by
  refine le_antisymm (adjoin.mono _ _ _ ?_) (adjoin_le_iff.mpr ?_)
  · rw [image_comp]; apply image_mono; rintro _ ⟨j, hj, rfl⟩; exact strictMono_φ hj
  · rintro _ ⟨j, hj, rfl⟩; contrapose! hj; exact ((isLeast_φ i).2 hj).not_lt

private theorem iSup_adjoin_eq_top : ⨆ i : ι, E⟮<i⟯ = ⊤ := by
  simp_rw [adjoin_image_φ, eq_top_iff, ← adjoin_basis_eq_top, adjoin_le_iff]
  rintro _ ⟨i, rfl⟩
  refine le_iSup (α := IntermediateField F E) _ (i⁺) (subset_adjoin _ _ ⟨i, ?_, rfl⟩)
  exact (lt_succ i).trans_le strictMono_φ.le_apply

theorem strictMono_filtration : StrictMono (E⟮<·⟯) :=
  fun i _ h ↦ ⟨adjoin.mono _ _ _ (image_mono <| Iio_subset_Iio h.le),
    fun incl ↦ (isLeast_φ i).1 (incl <| subset_adjoin _ _ ⟨i, h, rfl⟩)⟩

theorem filtration_succ (i : ι) : E⟮<i⁺⟯ = E⟮<i⟯⟮b (φ i)⟯.restrictScalars F := by
  rw [Iio_succ, ← Iio_insert, image_insert_eq, ← union_singleton, adjoin_adjoin_left]; rfl

local notation "X" i => Field.Emb (E⟮<i⟯) <| E⟮<i⟯⟮b (φ i)⟯

def succEquiv (i : ι) : (E⟮<i⁺⟯ →ₐ[F] Ē) ≃ (E⟮<i⟯ →ₐ[F] Ē) × X i :=
  (((show _ ≃ₐ[F] E⟮<i⟯⟮b (φ i)⟯ from equivOfEq (filtration_succ i))).arrowCongr .refl).trans <|
    algHomEquivSigma (B := E⟮<i⟯).trans <| .sigmaEquivProdOfEquiv fun _ ↦
      (@Field.embEquivOfIsAlgClosed _ _ _ _ _ _ _ (_) <|
        (Algebra.IsAlgebraic.tower_top (K := F) _).of_injective (val _) Subtype.val_injective).symm

open FiniteDimensional

theorem succEquiv_coherence (i : ι) (f) : (succEquiv i f).1 =
    f.comp (Subalgebra.inclusion <| strictMono_filtration.monotone <| le_succ i) := by
  ext; simp [succEquiv]; rfl -- slow rfl (type checking took 11.9s)

instance (i : ι) : FiniteDimensional (E⟮<i⟯) (E⟮<i⟯⟮b (φ i)⟯) :=
  adjoin.finiteDimensional ((Algebra.IsAlgebraic.tower_top (K := F) _).isAlgebraic _).isIntegral

theorem deg_lt_aleph0 (i : ι) : #(X i) < ℵ₀ :=
  (toNat_ne_zero.mp (Field.instNeZeroFinSepDegree (E⟮<i⟯) <| E⟮<i⟯⟮b (φ i)⟯).out).2

open WithTop in
@[simps!] def filtration : WithTop ι ↪o IntermediateField F E :=
  .ofStrictMono (fun i ↦ i.recTopCoe ⊤ (E⟮<·⟯)) fun i j h ↦ by
    cases j
    · obtain ⟨i, rfl⟩ := ne_top_iff_exists.mp h.ne
      exact ⟨le_top, fun incl ↦ (isLeast_φ i).1 (incl trivial)⟩
    · obtain ⟨i, rfl⟩ := ne_top_iff_exists.mp (h.trans <| coe_lt_top _).ne
      exact strictMono_filtration (coe_lt_coe.mp h)

def factor (i : WithTop ι) : Type _ := i.recTopCoe PUnit (X ·)

variable [Algebra.IsSeparable F E]

-- slow (typeclass inference reasonable, type checking takes ~4s)
instance (i : ι) : Algebra.IsSeparable (E⟮<i⟯) (E⟮<i⟯⟮b (φ i)⟯) :=
  have := Algebra.isSeparable_tower_top_of_isSeparable F (E⟮<i⟯) E
  have : IsScalarTower (E⟮<i⟯) (E⟮<i⟯⟮b (φ i)⟯) E := .of_algebraMap_eq' rfl
  Algebra.isSeparable_tower_bot_of_isSeparable _ _ E

open Field in
theorem two_le_deg (i : ι) : 2 ≤ #(X i) := by
  rw [← Nat.cast_eq_ofNat, ← toNat_le_iff_le_of_lt_aleph0 (nat_lt_aleph0 _) (deg_lt_aleph0 i),
    toNat_natCast, ← Nat.card, ← finSepDegree, finSepDegree_eq_finrank_of_isSeparable, Nat.succ_le]
  by_contra!
  obtain ⟨x, hx⟩ := finrank_adjoin_simple_eq_one_iff.mp (this.antisymm Module.finrank_pos)
  refine (isLeast_φ i).1 (hx ▸ ?_)
  exact x.2

end

local notation "E⟮<"i"⟯" => filtration i

variable (F E) in
def embFunctor ⦃i j : WithTop ι⦄ (h : i ≤ j) (f : E⟮<j⟯ →ₐ[F] Ē) : E⟮<i⟯ →ₐ[F] Ē :=
  f.comp (Subalgebra.inclusion <| filtration.monotone h)

instance : InverseSystem (embFunctor F E) where
  map_self _ _ := rfl
  map_map _ _ _ _ _ _ := rfl

local instance (i : ι) : Decidable (succ i = i) := .isFalse (lt_succ i).ne'

def equivSucc (i : WithTop ι) : (E⟮<i⁺⟯ →ₐ[F] Ē) ≃ (E⟮<i⟯ →ₐ[F] Ē) × factor i :=
  i.recTopCoe (((equivOfEq <| by rw [succ_top]).arrowCongr .refl).trans <| .symm <| .prodPUnit _)
    (succEquiv ·)

theorem equivSucc_coherence (i f) : (equivSucc i f).1 = embFunctor F E (le_succ i) f := by
  cases i; exacts [rfl, succEquiv_coherence _ f]

section Lim

variable {i : WithTop (Module.rank F E).ord.toType} -- WithTop ι doesn't work

theorem directed_filtration : Directed (· ≤ ·) fun j : Iio i ↦ filtration j.1 :=
    (filtration.monotone.comp <| Subtype.mono_coe _).directed_le

variable (hi : IsSuccPrelimit i)
include hi

open WithTop in
theorem iSup_filtration : ⨆ j : Iio i, filtration j = filtration i := by
  cases i
  · rw [← range_coe, iSup_range']; exact iSup_adjoin_eq_top
  refine (iSup_le fun j ↦ filtration.monotone (mem_Iio.1 j.2).le).antisymm (adjoin_le_iff.2 ?_)
  rintro _ ⟨j, hj, rfl⟩
  refine le_iSup (α := IntermediateField F E) _ ⟨j⁺, ?_⟩ (subset_adjoin F _ ?_)
  exacts [⟨j, lt_succ j, rfl⟩, hi.succ_lt (coe_lt_coe.mpr hj)]

open WithTop

lemma eq_bot_of_not_nonempty (hi : ¬ Nonempty (Iio i)) : filtration i = ⊥ := by
  cases i
  · have := mk_ne_zero_iff.mp (rank_pos.trans_eq (card_ι F E).symm).ne'
    rw [← range_coe] at hi; exact (hi inferInstance).elim
  · exact bot_unique <| adjoin_le_iff.mpr fun _ ⟨j, hj, _⟩ ↦ (hi ⟨j, coe_lt_coe.mpr hj⟩).elim

open Classical in
def equivLim : (E⟮<i⟯ →ₐ[F] Ē) ≃ inverseLimit (embFunctor F E) i where
  toFun f := ⟨fun j ↦ embFunctor _ _ (id j.2 : j < i).le f, fun _ _ _ ↦ rfl⟩
  invFun f := if h : Nonempty (Iio i) then
    Subalgebra.iSupLift _ directed_filtration f.1
      (fun _ _ h ↦ (f.2 <| filtration.map_rel_iff.mp h).symm) _ <| by
        rw [← iSup_filtration hi, toSubalgebra_iSup_of_directed directed_filtration]
    else (Algebra.ofId F Ē).comp ((equivOfEq (eq_bot_of_not_nonempty hi h)).trans <| botEquiv F E)
  left_inv f := by
    split_ifs with h
    · ext ⟨x, hx⟩
      rw [← iSup_filtration hi, mem_toSubalgebra, ← SetLike.mem_coe,
          coe_iSup_of_directed directed_filtration, mem_iUnion] at hx
      rw [Subalgebra.iSupLift_of_mem _ _ (by exact hx.choose_spec)]; rfl
    · apply AlgHom.ext
      rw [((equivOfEq (eq_bot_of_not_nonempty hi h)).trans <| botEquiv F E).forall_congr_left]
      simp
  right_inv f := Subtype.ext <| funext fun j ↦ by
    have : Nonempty _ := ⟨j⟩
    simp_rw [dif_pos this]
    apply Subalgebra.iSupLift_comp_inclusion

theorem equivLim_coherence (x l) : (equivLim hi x).1 l = embFunctor F E (mem_Iio.mp l.2).le x :=
  rfl

end Lim

def embEquivPi : Field.Emb F E ≃ ∀ i : ι, factor (F := F) (E := E) i :=
  let e := globalEquiv
    (fun i _ ↦ ⟨_, equivSucc_coherence i⟩) (fun _ hi ↦ ⟨equivLim hi, fun _ _ ↦ rfl⟩) ⊤
  (topEquiv.arrowCongr .refl).symm.trans <| e.trans <| .trans (.piCongrSet WithTop.range_coe.symm)
    <| .symm <| .piCongr (.ofInjective _ WithTop.coe_injective) fun _ ↦ .refl _

end Algebraic

end Field.Emb.Cardinal

variable {F E}

theorem Field.cardinal_emb_of_aleph0_le_rank_of_isSeparable [Algebra.IsSeparable F E]
    (rank_inf : ℵ₀ ≤ Module.rank F E) : #(Field.Emb F E) = 2 ^ Module.rank F E := by
  haveI := Fact.mk rank_inf
  rw [Emb.Cardinal.embEquivPi.cardinal_eq, mk_pi]
  apply le_antisymm
  · rw [← power_eq_two_power rank_inf (nat_lt_aleph0 2).le rank_inf]
    conv_rhs => rw [← Emb.Cardinal.card_ι, ← prod_const']
    exact prod_le_prod _ _ fun i ↦ (Emb.Cardinal.deg_lt_aleph0 _).le
  · conv_lhs => rw [← Emb.Cardinal.card_ι, ← prod_const']
    exact prod_le_prod _ _ Emb.Cardinal.two_le_deg

theorem Field.cardinal_emb_of_isSeparable [Algebra.IsSeparable F E] :
    #(Field.Emb F E) = (fun c ↦ if ℵ₀ ≤ c then 2 ^ c else c) (Module.rank F E) := by
  dsimp only; split_ifs with h
  · exact cardinal_emb_of_aleph0_le_rank_of_isSeparable h
  rw [not_le, ← IsNoetherian.iff_rank_lt_aleph0] at h
  rw [← Module.finrank_eq_rank, ← toNat_eq_iff Module.finrank_pos.ne',
    ← Nat.card, ← finSepDegree, finSepDegree_eq_finrank_of_isSeparable]

theorem Field.cardinal_emb_separableClosure [Algebra.IsAlgebraic F E] :
    #(Field.Emb F <| separableClosure F E) = #(Field.Emb F E) := by
  have := separableClosure.isPurelyInseparable F E
  rw [← (embProdEmbOfIsAlgebraic F (separableClosure F E) E).cardinal_eq,
    mk_prod, mk_eq_one (Emb _ E), lift_one, mul_one, lift_id]

theorem Field.cardinal_emb_of_aleph0_le_sepDegree [Algebra.IsAlgebraic F E]
    (rank_inf : ℵ₀ ≤ sepDegree F E) : #(Field.Emb F E) = 2 ^ sepDegree F E := by
  rw [← cardinal_emb_separableClosure, cardinal_emb_of_aleph0_le_rank_of_isSeparable rank_inf]
  rfl

theorem Field.cardinal_emb [Algebra.IsAlgebraic F E] :
    #(Field.Emb F E) = (fun c ↦ if ℵ₀ ≤ c then 2 ^ c else c) (sepDegree F E) := by
  rw [← cardinal_emb_separableClosure, cardinal_emb_of_isSeparable]; rfl

#lint
