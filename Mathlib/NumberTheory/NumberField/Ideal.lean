/-
Copyright (c) 2024 Xavier Roblot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Xavier Roblot
-/
import Mathlib.NumberTheory.NumberField.CanonicalEmbedding.NormLessThanOne
import Mathlib.NumberTheory.NumberField.Discriminant
import Mathlib.NumberTheory.NumberField.Units.Regulator

/-!
# Docstring

-/

variable (K : Type*) [Field K] [NumberField K]

namespace NumberField

open Filter Ideal Submodule Topology NumberField NumberField.InfinitePlace
  NumberField.mixedEmbedding NumberField.mixedEmbedding.fundamentalCone
  NumberField.mixedEmbedding.euclidean NumberField.Units

open scoped nonZeroDivisors Real

private noncomputable def ideal.tendsto_is_principal_norm_le_div_atop_aux (s : ‚Ñù) :
    ‚Üë({x | x ‚àà toMixed K ‚Åª¬π' fundamentalCone K ‚àß mixedEmbedding.norm ((toMixed K) x) ‚â§ s} ‚à©
        (euclidean.integerLattice K)) ‚âÉ {a : integralPoint K | ‚Üë(intNorm a) ‚â§ s} := by
  simp_rw [intNorm_coe, euclidean.integerLattice_eq_symm_image]
  refine (((toMixed K).toEquiv.image _).trans (Equiv.setCongr ?_)).trans
    (Equiv.subtypeSubtypeEquivSubtypeInter _ (mixedEmbedding.norm ¬∑ ‚â§ s)).symm
  ext x
  exact ‚ü®fun ‚ü®_, ‚ü®‚ü®h‚ÇÅ, h‚ÇÇ‚ü©, ‚ü®_, h‚ÇÉ, rfl‚ü©‚ü©, rfl‚ü© ‚Ü¶ ‚ü®‚ü®h‚ÇÅ, h‚ÇÉ‚ü©, h‚ÇÇ‚ü©,
    fun ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© ‚Ü¶ ‚ü®(toMixed K).symm x, ‚ü®‚ü®h‚ÇÅ.1, h‚ÇÇ‚ü©, ‚ü®x, h‚ÇÅ.2, rfl‚ü©‚ü©, rfl‚ü©‚ü©

open Classical in
theorem ideal.tendsto_is_principal_norm_le_div_atop :
    Tendsto (fun s : ‚Ñù ‚Ü¶
      (Nat.card {I : (Ideal (ùìû K))‚Å∞ | IsPrincipal (I : Ideal (ùìû K)) ‚àß
        absNorm (I : Ideal (ùìû K)) ‚â§ s} : ‚Ñù) / s) atTop
          (ùìù ((2 ^ NrRealPlaces K * (2 * œÄ) ^ NrComplexPlaces K * regulator K) /
            (torsionOrder K *  Real.sqrt |discr K|))) := by
  have h : ‚àÄ s : ‚Ñù,
      {x | x ‚àà toMixed K ‚Åª¬π' fundamentalCone K ‚àß mixedEmbedding.norm (toMixed K x) ‚â§ s} =
        toMixed K ‚Åª¬π' {x | x ‚àà fundamentalCone K ‚àß mixedEmbedding.norm x ‚â§ s} := fun _ ‚Ü¶ rfl
  convert (ZLattice.covolume.tendsto_card_le_div' (euclidean.integerLattice K)
      (F := fun x ‚Ü¶ mixedEmbedding.norm (toMixed K x))
      (X := (toMixed K)‚Åª¬π' (fundamentalCone K)) (fun a b c h ‚Ü¶ ?_) (fun _ _ h ‚Ü¶ ?_)
      (isBounded_normLessThanOne K) ?_ ?_).mul (tendsto_const_nhds (x := (torsionOrder K : ‚Ñù)‚Åª¬π))
      using 2 with n
  ¬∑ rw [eq_comm, mul_inv_eq_iff_eq_mul‚ÇÄ (Nat.cast_ne_zero.mpr (torsionOrder K).ne_zero),
      div_mul_eq_mul_div‚ÇÄ, ‚Üê Nat.cast_mul,  card_isPrincipal_norm_le, Nat.card_congr
      (ideal.tendsto_is_principal_norm_le_div_atop_aux K _)]
  ¬∑ simp_rw [h, (volumePreserving_toMixed K).measure_preimage
      (measurableSet_normLessThanOne K).nullMeasurableSet, volume_normLessThanOne,
      euclidean.integerLattice, ZLattice.covolume_comap _ _ _ (volumePreserving_toMixed K),
      covolume_integerLattice, ENNReal.toReal_mul, ENNReal.toReal_pow, ENNReal.toReal_ofNat,
      ENNReal.coe_toReal, NNReal.coe_real_pi, Real.coe_toNNReal _ (regulator_pos K).le]
    ring_nf
  ¬∑ rwa [Set.mem_preimage, map_smul, smul_mem_iff_mem h.ne']
  ¬∑ simp_rw [map_smul, mixedEmbedding.norm_smul, euclidean.finrank, abs_of_nonneg h]
  ¬∑ exact (toMixed K).continuous.measurable (measurableSet_normLessThanOne K)
  ¬∑ rw [h, ‚Üê ContinuousLinearEquiv.coe_toHomeomorph, ‚Üê Homeomorph.preimage_frontier,
      ContinuousLinearEquiv.coe_toHomeomorph, (volumePreserving_toMixed K).measure_preimage
      measurableSet_frontier.nullMeasurableSet, volume_frontier_normLessThanOne]

end NumberField
