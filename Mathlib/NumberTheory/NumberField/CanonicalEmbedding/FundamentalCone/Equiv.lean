/-
Copyright (c) 2024 Xavier Roblot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Xavier Roblot
-/
import Mathlib.NumberTheory.NumberField.Units.DirichletTheorem

/-!
# Fundamental Cone

Let `K` be a number field of signature `(r‚ÇÅ, r‚ÇÇ)`. We define an action of the units `(ùìû K)À£` on the
space `‚Ñù^r‚ÇÅ √ó ‚ÑÇ^r‚ÇÇ` via the `mixedEmbedding`. The fundamental cone is a cone in `‚Ñù^r‚ÇÅ √ó ‚ÑÇ^r‚ÇÇ` that
is a fundamental domain for the action of `(ùìû K)À£` up to roots of unity.

## Main definitions and results

* `NumberField.mixedEmbedding.unitSMul`: the action of `(ùìû K)À£` on `‚Ñù^r‚ÇÅ √ó ‚ÑÇ^r‚ÇÇ` defined, for
`u : (ùìû K)À£`, by multiplication component by component with `mixedEmbedding K u`.

* `NumberField.mixedEmbedding.fundamentalCone`: a cone in `‚Ñù^r‚ÇÅ √ó ‚ÑÇ^r‚ÇÇ` --that is a subset stable
by multiplication by a real number, see `smul_mem_of_mem`--, that is also a fundamental domain for
the action of `(ùìû K)À£` up to roots of unity, see `exists_unitSMul_me` and
`torsion_unitSMul_mem_of_mem`.

## Tags
number field, canonical embedding, principal ideals
 -/

variable (K : Type*) [Field K]

namespace NumberField.mixedEmbedding

open NumberField NumberField.InfinitePlace

noncomputable section UnitSMul

/-- The action of `(ùìû K)À£` on the mixed space `‚Ñù^r‚ÇÅ √ó ‚ÑÇ^r‚ÇÇ` defined, for `u : (ùìû K)À£`, by
multiplication component by component with `mixedEmbedding K u`. -/
@[simps]
instance unitSMul : SMul (ùìû K)À£ (mixedSpace K) where
  smul := fun u x ‚Ü¶ (mixedEmbedding K u) * x

instance : MulAction (ùìû K)À£ (mixedSpace K) where
  one_smul := fun _ ‚Ü¶ by simp_rw [unitSMul_smul, Units.coe_one, map_one, one_mul]
  mul_smul := fun _ _ _ ‚Ü¶ by simp_rw [unitSMul_smul, Units.coe_mul, map_mul, mul_assoc]

instance : SMulZeroClass (ùìû K)À£ (mixedSpace K) where
  smul_zero := fun _ ‚Ü¶ by simp_rw [unitSMul_smul, mul_zero]

theorem unitSMul_eq_zero (u : (ùìû K)À£) (x : mixedSpace K) :
    u ‚Ä¢ x = 0 ‚Üî x = 0 := by
  refine ‚ü®fun h ‚Ü¶ ?_, fun h ‚Ü¶ ?_‚ü©
  ¬∑ ext w
    ¬∑ have := congr_fun (congr_arg Prod.fst h) w
      rw [unitSMul_smul, Prod.fst_mul, Pi.mul_apply, Prod.fst_zero, Pi.zero_apply, mul_eq_zero]
        at this
      refine this.resolve_left (by simp only [mixedEmbedding_apply_ofIsReal, map_eq_zero,
        RingOfIntegers.coe_eq_zero_iff, Units.ne_zero, not_false_eq_true])
    ¬∑ have := congr_fun (congr_arg Prod.snd h) w
      rw [unitSMul_smul, Prod.snd_mul, Pi.mul_apply, Prod.snd_zero, Pi.zero_apply, mul_eq_zero]
        at this
      refine this.resolve_left (by simp only [mixedEmbedding_apply_ofIsComplex, map_eq_zero,
        RingOfIntegers.coe_eq_zero_iff, Units.ne_zero, not_false_eq_true])
  ¬∑ rw [h, smul_zero]

variable [NumberField K]

theorem unitSMul_eq_iff_mul_eq {x y : (ùìû K)} {u : (ùìû K)À£} :
    u ‚Ä¢ mixedEmbedding K x = mixedEmbedding K y ‚Üî u * x = y := by
  rw [unitSMul_smul, ‚Üê map_mul, Function.Injective.eq_iff, ‚Üê RingOfIntegers.coe_eq_algebraMap,
    ‚Üê map_mul, ‚Üê RingOfIntegers.ext_iff]
  exact mixedEmbedding_injective K

theorem norm_unitSMul (u : (ùìû K)À£) (x : mixedSpace K) :
    mixedEmbedding.norm (u ‚Ä¢ x) = mixedEmbedding.norm x := by
  rw [unitSMul_smul, map_mul, norm_unit, one_mul]

end UnitSMul

noncomputable section logMap

open NumberField.Units NumberField.Units.dirichletUnitTheorem FiniteDimensional

variable [NumberField K] {K}

open Classical in
/-- The map from the mixed space to `{w : InfinitePlace K // w ‚â† w‚ÇÄ} ‚Üí ‚Ñù` (with `w‚ÇÄ` the fixed
place from the proof of Dirichlet's theorem: see `NumberField.Units.dirichletUnitTheorem.w‚ÇÄ`)
defined in such way that: 1) it factors the map `logEmbedding`, see `logMap_eq_logEmbedding`;
2) it is constant on the lines `{c ‚Ä¢ x | c ‚àà ‚Ñù}`, see `logMap_smul`. -/
def logMap (x : mixedSpace K) : {w : InfinitePlace K // w ‚â† w‚ÇÄ} ‚Üí ‚Ñù := fun w ‚Ü¶
  mult w.val * (Real.log (normAtPlace w.val x) -
    Real.log (mixedEmbedding.norm x) * (finrank ‚Ñö K : ‚Ñù)‚Åª¬π)

-- theorem logMap_apply (x : mixedSpace K) (w : {w : InfinitePlace K // w ‚â† w‚ÇÄ}) :
--     logMap x w = mult w.val * (Real.log (normAtPlace w.val x) -
--       Real.log (mixedEmbedding.norm x) * (finrank ‚Ñö K : ‚Ñù)‚Åª¬π) := rfl

-- @[simp]
-- theorem logMap_zero : logMap (0 : mixedSpace K) = 0 := by
--   ext
--   rw [logMap, map_zero, map_zero, Real.log_zero, zero_mul, sub_self, mul_zero, Pi.zero_apply]

-- @[simp]
-- theorem logMap_one : logMap (1 : mixedSpace K) = 0 := by
--   ext
--   rw [logMap, map_one, show 1 = mixedEmbedding K (1 : (ùìû K)À£) by
--       rw [Units.val_one, map_one, map_one], norm_unit, Real.log_one, zero_mul, sub_self,
--     mul_zero, Pi.zero_apply]

theorem logMap_mul {x y : mixedSpace K} (hx : mixedEmbedding.norm x ‚â† 0)
    (hy : mixedEmbedding.norm y ‚â† 0) :
    logMap (x * y) = logMap x + logMap y := by
  ext w
  simp_rw [Pi.add_apply, logMap]
  rw [map_mul, map_mul, Real.log_mul, Real.log_mul hx hy, add_mul]
  ¬∑ ring
  ¬∑ exact mixedEmbedding.norm_ne_zero_iff.mp hx w
  ¬∑ exact mixedEmbedding.norm_ne_zero_iff.mp hy w

-- theorem logMap_prod {Œπ : Type*} (s : Finset Œπ) {x : Œπ ‚Üí (mixedSpace K)}
--     (hx : ‚àÄ i ‚àà s, mixedEmbedding.norm (x i) ‚â† 0) :
--     logMap (‚àè i ‚àà s, x i) = ‚àë i ‚àà s, logMap (x i) := by
--   induction s using Finset.cons_induction with
--   | empty => simp
--   | cons i s hi h_ind =>
--       rw [Finset.prod_cons, Finset.sum_cons, logMap_mul, h_ind]
--       ¬∑ exact fun _ h ‚Ü¶ hx _ (Finset.mem_cons_of_mem h)
--       ¬∑ exact hx i (Finset.mem_cons_self i s)
--       ¬∑ rw [map_prod, Finset.prod_ne_zero_iff]
--         exact fun _ h ‚Ü¶ hx _ (Finset.mem_cons_of_mem h)

-- theorem logMap_eq_logEmbedding (u : (ùìû K)À£) :
--     logMap (mixedEmbedding K u) = logEmbedding K u := by
--   ext
--   simp_rw [logMap, mixedEmbedding.norm_unit, Real.log_one, zero_mul, sub_zero, normAtPlace_apply,
--     logEmbedding_component]

-- theorem logMap_unitSMul (u : (ùìû K)À£) {x : mixedSpace K} (hx : mixedEmbedding.norm x ‚â† 0) :
--     logMap (u ‚Ä¢ x) = logEmbedding K u + logMap x := by
--   rw [unitSMul_smul, logMap_mul (by rw [norm_unit]; norm_num) hx, logMap_eq_logEmbedding]

-- theorem logMap_torsion_unitSMul (x : mixedSpace K) {Œ∂ : (ùìû K)À£} (hŒ∂ : Œ∂ ‚àà torsion K) :
--     logMap (Œ∂ ‚Ä¢ x) = logMap x := by
--   ext
--   simp_rw [logMap, unitSMul_smul, map_mul, norm_eq_norm, Units.norm, Rat.cast_one, one_mul,
--     normAtPlace_apply, (mem_torsion K).mp hŒ∂, one_mul]

theorem logMap_smul {x : mixedSpace K} (hx : mixedEmbedding.norm x ‚â† 0) {c : ‚Ñù} (hc : c ‚â† 0) :
    logMap (c ‚Ä¢ x) = logMap x := by
  rw [show c ‚Ä¢ x = ((fun _ ‚Ü¶ c, fun _ ‚Ü¶ c) : (mixedSpace K)) * x by rfl, logMap_mul _ hx,
    add_left_eq_self]
  ¬∑ ext
    have hr : (finrank ‚Ñö K : ‚Ñù) ‚â† 0 :=  Nat.cast_ne_zero.mpr (ne_of_gt finrank_pos)
    simp_rw [logMap, normAtPlace_real, norm_real, Real.log_pow, mul_comm, inv_mul_cancel_left‚ÇÄ hr,
      sub_self, zero_mul, Pi.zero_apply]
  ¬∑ rw [norm_real]
    exact pow_ne_zero _ (abs_ne_zero.mpr hc)

-- theorem measurable_logMap :
--     Measurable (logMap : (mixedSpace K) ‚Üí _) :=
--   measurable_pi_iff.mpr fun _ ‚Ü¶
--     measurable_const.mul <| (continuous_normAtPlace _).measurable.log.sub
--       <| (mixedEmbedding.continuous_norm K).measurable.log.mul measurable_const

-- theorem continuousOn_logMap :
--     ContinuousOn (logMap : (mixedSpace K) ‚Üí _) {x | mixedEmbedding.norm x ‚â† 0} := by
--   refine continuousOn_pi.mpr fun w ‚Ü¶ continuousOn_const.mul (ContinuousOn.sub ?_ ?_)
--   ¬∑ exact Real.continuousOn_log.comp''  (continuous_normAtPlace _).continuousOn
--       fun _ hx ‚Ü¶ mixedEmbedding.norm_ne_zero_iff.mp hx _
--   ¬∑ exact ContinuousOn.mul
--       (Real.continuousOn_log.comp''  (mixedEmbedding.continuous_norm K).continuousOn
--         fun _ hx ‚Ü¶ hx) continuousOn_const

-- theorem logMap_apply_of_norm_one {x : mixedSpace K} (hx : mixedEmbedding.norm x = 1)
--     {w : InfinitePlace K} (hw : w ‚â† w‚ÇÄ) :
--     logMap x ‚ü®w, hw‚ü© = mult w * Real.log (normAtPlace w x) := by
--   rw [logMap, hx, Real.log_one, zero_mul, sub_zero]

end logMap

open NumberField.Units NumberField.Units.dirichletUnitTheorem nonZeroDivisors BigOperators

variable [NumberField K]

open Classical in
/-- The fundamental cone is a cone in the mixed space --ie. a subset fixed by multiplication by
a scalar, see `smul_mem_of_mem`--, that is also a fundamental domain for the action of `(ùìû K)À£` up
to roots of unity, see `exists_unitSMul_mem` and `torsion_unitSMul_mem_of_mem`. -/
def fundamentalCone : Set (mixedSpace K) :=
  logMap‚Åª¬π' (ZSpan.fundamentalDomain ((basisUnitLattice K).ofZLatticeBasis ‚Ñù)) \
    {x | mixedEmbedding.norm x = 0}

namespace fundamentalCone

variable {K}

open Classical in
theorem mem_fundamentalCone {x : mixedSpace K} :
    x ‚àà fundamentalCone K ‚Üî
      logMap x ‚àà ZSpan.fundamentalDomain ((basisUnitLattice K).ofZLatticeBasis ‚Ñù _) ‚àß
      mixedEmbedding.norm x ‚â† 0 := Set.mem_def

theorem smul_mem_of_mem {x : mixedSpace K} (hx : x ‚àà fundamentalCone K) {c : ‚Ñù} (hc : c ‚â† 0) :
    c ‚Ä¢ x ‚àà fundamentalCone K := by
  refine ‚ü®?_, ?_‚ü©
  ¬∑ rw [Set.mem_preimage, logMap_smul hx.2 hc]
    exact hx.1
  ¬∑ rw [Set.mem_setOf_eq, mixedEmbedding.norm_smul, mul_eq_zero, not_or]
    exact ‚ü®pow_ne_zero _ (abs_ne_zero.mpr hc), hx.2‚ü©

theorem smul_mem_iff_mem {x : mixedSpace K} {c : ‚Ñù} (hc : c ‚â† 0) :
    c ‚Ä¢ x ‚àà fundamentalCone K ‚Üî x ‚àà fundamentalCone K := by
  refine ‚ü®fun h ‚Ü¶ ?_, fun h ‚Ü¶ smul_mem_of_mem h hc‚ü©
  convert smul_mem_of_mem h (inv_ne_zero hc)
  rw [eq_inv_smul_iff‚ÇÄ hc]

noncomputable section integralPoint

variable (K)

/-- The set of images by `mixedEmbedding` of algebraic integers of `K` contained in the
fundamental cone. -/
def integralPoint : Set (mixedSpace K) :=
  fundamentalCone K ‚à© mixedEmbedding.integerLattice K

variable {K}

/-- For `a : fundamentalCone K`, the unique non-zero algebraic integer which image by
`mixedEmbedding` is equal to `a`. -/
def preimageOfIntegralPoint (a : integralPoint K) : (ùìû K)‚Å∞ :=
  -- ‚ü®a.prop.2.choose_spec.1.choose, by
  --   simp_rw [mem_nonZeroDivisors_iff_ne_zero, ne_eq, RingOfIntegers.ext_iff,
  --     a.prop.2.choose_spec.1.choose_spec, ‚Üê (mixedEmbedding_injective K).eq_iff, map_zero,
  --     a.prop.2.choose_spec.2, integralPoint_ne_zero a, not_false_eq_true]‚ü©
  sorry

/-- The `mixedEmbedding.norm` of `a : integralPoint K` as a natural integer, see `intNorm_coe` . -/
def intNorm (a : integralPoint K) : ‚Ñï := (Algebra.norm ‚Ñ§ (preimageOfIntegralPoint a : ùìû K)).natAbs

@[simp]
theorem intNorm_coe (a : integralPoint K) :
    (intNorm a : ‚Ñù) = mixedEmbedding.norm (a : mixedSpace K) := by
  sorry
--  rw [intNorm, Int.cast_natAbs, ‚Üê Rat.cast_intCast, Int.cast_abs, Algebra.coe_norm_int,
--    ‚Üê norm_eq_norm, mixedEmbedding_preimageOfIntegralPoint]

variable (K)

open Submodule Ideal

/-- For `n` positive, the number of `fundamentalCone.integralPoint K` of
norm `n` is equal to the number of principal ideals in `ùìû K` of norm `n` multiplied by the number
of roots of unity in `K`. -/
theorem card_isPrincipal_norm_eq (n : ‚Ñï) :
    Nat.card {I : (Ideal (ùìû K))‚Å∞ | IsPrincipal (I : Ideal (ùìû K)) ‚àß
      absNorm (I : Ideal (ùìû K)) = n} * torsionOrder K =
        Nat.card {a : integralPoint K | intNorm a = n} := by
  -- rw [torsionOrder, PNat.mk_coe, ‚Üê Nat.card_eq_fintype_card, ‚Üê Nat.card_prod]
  -- exact Nat.card_congr (integralPointEquivNorm K n).symm
  sorry

theorem card_isPrincipal_norm_le (n : ‚Ñù) :
    Nat.card {I : (Ideal (ùìû K))‚Å∞ | IsPrincipal (I : Ideal (ùìû K)) ‚àß
      absNorm (I : Ideal (ùìû K)) ‚â§ n} * torsionOrder K =
        Nat.card {a : integralPoint K | intNorm a ‚â§ n} := by
  obtain hn | hn := le_or_gt 0 n
  ¬∑ simp_rw [‚Üê Nat.le_floor_iff hn]
    sorry
  -- rw [torsionOrder, PNat.mk_coe, ‚Üê Nat.card_eq_fintype_card, ‚Üê Nat.card_prod]
  -- refine Nat.card_congr <| @Equiv.ofFiberEquiv _ (Œ≥ := Finset.Iic n) _
  --     (fun I ‚Ü¶ ‚ü®absNorm (I.1 : Ideal (ùìû K)), Finset.mem_Iic.mpr I.1.2.2‚ü©)
  --     (fun a ‚Ü¶ ‚ü®intNorm a.1, Finset.mem_Iic.mpr a.2‚ü©) fun ‚ü®i, hi‚ü© ‚Ü¶ ?_
  -- simp_rw [Subtype.mk.injEq]
  -- calc
  --   _ ‚âÉ {I : {I : (Ideal (ùìû K))‚Å∞ // IsPrincipal I.1 ‚àß absNorm I.1 ‚â§ n} // absNorm I.1.1 = i}
  --         √ó torsion K := Equiv.prodSubtypeFstEquivSubtypeProd
  --   _ ‚âÉ {I : (Ideal (ùìû K))‚Å∞ // (IsPrincipal I.1 ‚àß absNorm I.1 ‚â§ n) ‚àß absNorm I.1 = i}
  --         √ó torsion K := Equiv.prodCongrLeft fun _ ‚Ü¶ (Equiv.subtypeSubtypeEquivSubtypeInter
  --     (p := fun I : (Ideal (ùìû K))‚Å∞ ‚Ü¶ IsPrincipal I.1 ‚àß absNorm I.1 ‚â§ n)
  --     (q := fun I ‚Ü¶ absNorm I.1 = i))
  --   _ ‚âÉ {I : (Ideal (ùìû K))‚Å∞ // IsPrincipal I.1 ‚àß absNorm I.1 = i ‚àß absNorm I.1 ‚â§ n}
  --         √ó torsion K := Equiv.prodCongrLeft fun _ ‚Ü¶ (Equiv.subtypeEquivRight fun _ ‚Ü¶ by aesop)
  --   _ ‚âÉ {I : (Ideal (ùìû K))‚Å∞ // IsPrincipal I.1 ‚àß absNorm I.1 = i} √ó torsion K :=
  --     Equiv.prodCongrLeft fun _ ‚Ü¶ (Equiv.subtypeEquivRight fun _ ‚Ü¶ by
  --     rw [and_iff_left_of_imp (a := absNorm _ = _) fun h ‚Ü¶ Finset.mem_Iic.mp (h ‚ñ∏ hi)])
  --   _ ‚âÉ {a : integralPoint K // intNorm a = i} := (integralPointEquivNorm K i).symm
  --   _ ‚âÉ {a : {a : integralPoint K // intNorm a ‚â§ n} // intNorm a.1 = i} :=
  --     (Equiv.subtypeSubtypeEquivSubtype fun h ‚Ü¶ Finset.mem_Iic.mp (h ‚ñ∏ hi)).symm
  ¬∑ simp_rw [lt_iff_not_le.mp (lt_of_lt_of_le hn (Nat.cast_nonneg _)), and_false, Set.setOf_false,
      Nat.card_eq_fintype_card, Fintype.card_ofIsEmpty, zero_mul]

end integralPoint

end fundamentalCone

end NumberField.mixedEmbedding
