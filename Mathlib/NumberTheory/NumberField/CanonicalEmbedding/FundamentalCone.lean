/-
Copyright (c) 2024 Xavier Roblot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Xavier Roblot
-/
import Mathlib.Analysis.Calculus.FDeriv.Pi
import Mathlib.MeasureTheory.Integral.Marginal
import Mathlib.NumberTheory.NumberField.Units.Regulator

import Mathlib.Sandbox

/-!
# Fundamental Cone

Let `K` be a number field of signature `(r‚ÇÅ, r‚ÇÇ)`. We define an action of the units `(ùìû K)À£` on
the space `‚Ñù^r‚ÇÅ √ó ‚ÑÇ^r‚ÇÇ` via the `mixedEmbedding`. The fundamental cone is a cone in `‚Ñù^r‚ÇÅ √ó ‚ÑÇ^r‚ÇÇ`
that is a fundamental domain for the action of `(ùìû K)À£` up to roots of unity.

## Main definitions and results

* `NumberField.mixedEmbedding.unitSMul`: the action of `(ùìû K)À£` on `‚Ñù^r‚ÇÅ √ó ‚ÑÇ^r‚ÇÇ` defined, for
`u : (ùìû K)À£`, by multiplication component by component with `mixedEmbedding K u`.

* `NumberField.mixedEmbedding.fundamentalCone`: a cone in `‚Ñù^r‚ÇÅ √ó ‚ÑÇ^r‚ÇÇ` --that is a subset stable
by multiplication by a real number, see `smul_mem_of_mem`--, that is also a fundamental domain
for the action of `(ùìû K)À£` up to roots of unity, see `exists_unitSMul_me` and
`torsion_unitSMul_mem_of_mem`.

* `NumberField.mixedEmbedding.fundamentalCone.integralPoint`: the subset of elements of the
fundamental cone that are images of algebraic integers of `K`.

* `NumberField.mixedEmbedding.fundamentalCone.integralPointEquiv`: the equivalence between
`fundamentalCone.integralPoint K` and the principal non-zero ideals of `ùìû K` times the
torsion of `K`.

* `NumberField.mixedEmbedding.fundamentalCone.card_isPrincipal_norm_eq`: the number of principal
non-zero ideals in `ùìû K` of norm `n` multiplied by the number of roots of unity is
equal to the number of `fundamentalCone.integralPoint K` of norm `n`.

## Tags

number field, canonical embedding, principal ideals
-/

variable (K : Type*) [Field K]

namespace NumberField.mixedEmbedding

open NumberField NumberField.InfinitePlace

/-- The space `‚Ñù^r‚ÇÅ √ó ‚ÑÇ^r‚ÇÇ` with `(r‚ÇÅ, r‚ÇÇ)` the signature of `K`. -/
local notation "E" K =>
  ({w : InfinitePlace K // IsReal w} ‚Üí ‚Ñù) √ó ({w : InfinitePlace K // IsComplex w} ‚Üí ‚ÑÇ)

noncomputable section UnitSMul

/-- The action of `(ùìû K)À£` on `‚Ñù^r‚ÇÅ √ó ‚ÑÇ^r‚ÇÇ` defined, for `u : (ùìû K)À£`, by multiplication component
by component with `mixedEmbedding K u`. -/
@[simps]
instance unitSMul : SMul (ùìû K)À£ (E K) where
  smul := fun u x ‚Ü¶ (mixedEmbedding K u) * x

instance : MulAction (ùìû K)À£ (E K) where
  one_smul := fun _ ‚Ü¶ by simp_rw [unitSMul_smul, Units.coe_one, map_one, one_mul]
  mul_smul := fun _ _ _ ‚Ü¶ by simp_rw [unitSMul_smul, Units.coe_mul, map_mul, mul_assoc]

instance : SMulZeroClass (ùìû K)À£ (E K) where
  smul_zero := fun _ ‚Ü¶ by simp_rw [unitSMul_smul, mul_zero]

variable [NumberField K]

theorem unitSMul_eq_iff_mul_eq {x y : (ùìû K)} {u : (ùìû K)À£} :
    u ‚Ä¢ mixedEmbedding K x = mixedEmbedding K y ‚Üî u * x = y := by
  rw [unitSMul_smul, ‚Üê map_mul, Function.Injective.eq_iff, ‚Üê RingOfIntegers.coe_eq_algebraMap,
    ‚Üê map_mul, ‚Üê RingOfIntegers.ext_iff]
  exact mixedEmbedding_injective K

theorem norm_unitSMul (u : (ùìû K)À£) (x : E K) :
    mixedEmbedding.norm (u ‚Ä¢ x) = mixedEmbedding.norm x := by
  rw [unitSMul_smul, map_mul, norm_unit, one_mul]

theorem unitSMul_eq_zero (u : (ùìû K)À£) (x : E K) :
    u ‚Ä¢ x = 0 ‚Üî x = 0 := by
  refine ‚ü®fun h ‚Ü¶ ?_, fun h ‚Ü¶ ?_‚ü©
  ¬∑ ext w
    ¬∑ have := congr_fun (congr_arg Prod.fst h) w
      rw [unitSMul_smul, Prod.fst_mul, Pi.mul_apply, Prod.fst_zero, Pi.zero_apply, mul_eq_zero]
        at this
      refine this.resolve_left (by simp)
    ¬∑ have := congr_fun (congr_arg Prod.snd h) w
      rw [unitSMul_smul, Prod.snd_mul, Pi.mul_apply, Prod.snd_zero, Pi.zero_apply, mul_eq_zero]
        at this
      refine this.resolve_left (by simp)
  ¬∑ rw [h, smul_zero]

end UnitSMul

noncomputable section logMap

open NumberField.Units NumberField.Units.dirichletUnitTheorem FiniteDimensional

variable [NumberField K] {K}

open Classical in
/-- The map from `‚Ñù^r‚ÇÅ √ó ‚ÑÇ^r‚ÇÇ` to `{w : InfinitePlace K // w ‚â† w‚ÇÄ} ‚Üí ‚Ñù` (with `w‚ÇÄ` a fixed place)
defined in such way that: 1) it factors the map `logEmbedding`, see `logMap_eq_logEmbedding`;
2) it is constant on the lines `{c ‚Ä¢ x | c ‚àà ‚Ñù}`, see `logMap_smul`. -/
def logMap (x : E K) : {w : InfinitePlace K // w ‚â† w‚ÇÄ} ‚Üí ‚Ñù := fun w ‚Ü¶
  mult w.val * (Real.log (normAtPlace w.val x) -
    Real.log (mixedEmbedding.norm x) * (finrank ‚Ñö K : ‚Ñù)‚Åª¬π)

@[simp]
theorem logMap_zero : logMap (0 : E K) = 0 := by
  ext
  rw [logMap, map_zero, map_zero, Real.log_zero, zero_mul, sub_self, mul_zero, Pi.zero_apply]

theorem logMap_mul {x y : E K} (hx : mixedEmbedding.norm x ‚â† 0) (hy : mixedEmbedding.norm y ‚â† 0) :
    logMap (x * y) = logMap x + logMap y := by
  ext w
  simp_rw [Pi.add_apply, logMap]
  rw [map_mul, map_mul, Real.log_mul, Real.log_mul hx hy, add_mul]
  ¬∑ ring
  ¬∑ exact mixedEmbedding.norm_ne_zero_iff.mp hx w
  ¬∑ exact mixedEmbedding.norm_ne_zero_iff.mp hy w

theorem logMap_eq_logEmbedding (u : (ùìû K)À£) :
    logMap (mixedEmbedding K u) = logEmbedding K u := by
  ext
  simp_rw [logMap, mixedEmbedding.norm_unit, Real.log_one, zero_mul, sub_zero, normAtPlace_apply,
    logEmbedding_component]

theorem logMap_unitSMul (u : (ùìû K)À£) {x : E K} (hx : mixedEmbedding.norm x ‚â† 0) :
    logMap (u ‚Ä¢ x) = logEmbedding K u + logMap x := by
  rw [unitSMul_smul, logMap_mul (by rw [norm_unit]; norm_num) hx, logMap_eq_logEmbedding]

theorem logMap_torsion_unitSMul (x : E K) {Œ∂ : (ùìû K)À£} (hŒ∂ : Œ∂ ‚àà torsion K) :
    logMap (Œ∂ ‚Ä¢ x) = logMap x := by
  ext
  simp_rw [logMap, unitSMul_smul, map_mul, norm_eq_norm, Units.norm, Rat.cast_one, one_mul,
    normAtPlace_apply, (mem_torsion K).mp hŒ∂, one_mul]

theorem logMap_smul {x : E K} (hx : mixedEmbedding.norm x ‚â† 0) {c : ‚Ñù} (hc : c ‚â† 0) :
    logMap (c ‚Ä¢ x) = logMap x := by
  rw [show c ‚Ä¢ x = ((fun _ ‚Ü¶ c, fun _ ‚Ü¶ c) : (E K)) * x by rfl, logMap_mul _ hx, add_left_eq_self]
  ¬∑ ext
    have hr : (finrank ‚Ñö K : ‚Ñù) ‚â† 0 :=  Nat.cast_ne_zero.mpr (ne_of_gt finrank_pos)
    simp_rw [logMap, normAtPlace_real, norm_real, Real.log_pow, mul_comm, inv_mul_cancel_left‚ÇÄ hr,
      sub_self, zero_mul, Pi.zero_apply]
  ¬∑ rw [norm_real]
    exact pow_ne_zero _ (abs_ne_zero.mpr hc)

@[simp]
theorem logMap_apply_of_norm_one {x : E K} (hx : mixedEmbedding.norm x = 1) {w : InfinitePlace K}
    (hw : w ‚â† w‚ÇÄ) :
    logMap x ‚ü®w, hw‚ü© = mult w * Real.log (normAtPlace w x) := by
  rw [logMap, hx, Real.log_one, zero_mul, sub_zero]

end logMap

noncomputable section

open NumberField.Units NumberField.Units.dirichletUnitTheorem nonZeroDivisors BigOperators

variable [NumberField K]

open Classical in
/-- The fundamental cone is a cone in `‚Ñù^r‚ÇÅ √ó ‚ÑÇ^r‚ÇÇ` --that is a subset fixed by multiplication by
a scalar, see `smul_mem_of_mem`--, that is also a fundamental domain for the action of `(ùìû K)À£` up
to roots of unity, see `exists_unitSMul_mem` and `torsion_unitSMul_mem_of_mem`. -/
def fundamentalCone : Set (E K) :=
  logMap‚Åª¬π' (Zspan.fundamentalDomain ((basisUnitLattice K).ofZlatticeBasis ‚Ñù _)) \
    {x | mixedEmbedding.norm x = 0}

namespace fundamentalCone

variable {K}

-- Use this to golf some proofs? (or remove it)
open Classical in
theorem mem_fundamentalCone {x : E K} :
    x ‚àà fundamentalCone K ‚Üî
      logMap x ‚àà Zspan.fundamentalDomain ((basisUnitLattice K).ofZlatticeBasis ‚Ñù _) ‚àß
      mixedEmbedding.norm x ‚â† 0 := by
  rw [fundamentalCone, Set.mem_diff, Set.mem_preimage, Set.mem_setOf_eq]

theorem norm_pos_of_mem {x : E K} (hx : x ‚àà fundamentalCone K) :
    0 < mixedEmbedding.norm x :=
  lt_iff_le_and_ne.mpr ‚ü®mixedEmbedding.norm_nonneg _, Ne.symm hx.2‚ü©

theorem normAtPlace_pos_of_mem {x : E K} (hx : x ‚àà fundamentalCone K) (w : InfinitePlace K) :
    0 < normAtPlace w x :=
  lt_iff_le_and_ne.mpr ‚ü®normAtPlace_nonneg _ _,
    (mixedEmbedding.norm_ne_zero_iff.mp (ne_of_gt (norm_pos_of_mem hx)) w).symm‚ü©

theorem mem_of_normAtPlace_eq {x y : E K} (hx : x ‚àà fundamentalCone K)
    (hy : ‚àÄ w, normAtPlace w y = normAtPlace w x) :
    y ‚àà fundamentalCone K := by
  have h‚ÇÅ : mixedEmbedding.norm y = mixedEmbedding.norm x := by
    simp_rw [mixedEmbedding.norm_apply, hy]
  have h‚ÇÇ : logMap y = logMap x := by
    ext
    simp_rw [logMap, hy, h‚ÇÅ]
  refine ‚ü®?_, ?_‚ü©
  ¬∑ rw [Set.mem_preimage, h‚ÇÇ]
    exact hx.1
  ¬∑ rw [Set.mem_setOf_eq, h‚ÇÅ]
    exact hx.2

theorem smul_mem_of_mem {x : E K} (hx : x ‚àà fundamentalCone K) {c : ‚Ñù} (hc : c ‚â† 0) :
    c ‚Ä¢ x ‚àà fundamentalCone K := by
  refine ‚ü®?_, ?_‚ü©
  ¬∑ rw [Set.mem_preimage, logMap_smul hx.2 hc]
    exact hx.1
  ¬∑ rw [Set.mem_setOf_eq, mixedEmbedding.norm_smul, mul_eq_zero, not_or]
    exact ‚ü®pow_ne_zero _ (abs_ne_zero.mpr hc), hx.2‚ü©

theorem smul_mem_iff_mem {x : E K} {c : ‚Ñù} (hc : c ‚â† 0) :
    c ‚Ä¢ x ‚àà fundamentalCone K ‚Üî x ‚àà fundamentalCone K := by
  refine ‚ü®fun h ‚Ü¶ ?_, fun h ‚Ü¶ smul_mem_of_mem h hc‚ü©
  convert smul_mem_of_mem h (inv_ne_zero hc)
  rw [eq_inv_smul_iff‚ÇÄ hc]

theorem exists_unitSMul_mem {x : E K} (hx : mixedEmbedding.norm x ‚â† 0) :
    ‚àÉ u : (ùìû K)À£, u ‚Ä¢ x ‚àà fundamentalCone K := by
  classical
  let B := (basisUnitLattice K).ofZlatticeBasis ‚Ñù
  rsuffices ‚ü®‚ü®_, ‚ü®u, _, rfl‚ü©‚ü©, hu‚ü© : ‚àÉ e : unitLattice K, e + logMap x ‚àà Zspan.fundamentalDomain B
  ¬∑ exact ‚ü®u, by rwa [Set.mem_preimage, logMap_unitSMul u hx], by simp [hx]‚ü©
  ¬∑ obtain ‚ü®‚ü®e, h‚ÇÅ‚ü©, h‚ÇÇ, -‚ü© := Zspan.exist_unique_vadd_mem_fundamentalDomain B (logMap x)
    exact ‚ü®‚ü®e, by rwa [‚Üê Basis.ofZlatticeBasis_span ‚Ñù (unitLattice K)]‚ü©, h‚ÇÇ‚ü©

theorem torsion_unitSMul_mem_of_mem {x : E K} (hx : x ‚àà fundamentalCone K) {Œ∂ : (ùìû K)À£}
    (hŒ∂ : Œ∂ ‚àà torsion K) :
    Œ∂ ‚Ä¢ x ‚àà fundamentalCone K := by
  refine ‚ü®?_, ?_‚ü©
  ¬∑ rw [Set.mem_preimage, logMap_torsion_unitSMul _ hŒ∂]
    exact hx.1
  ¬∑ simpa only [unitSMul_smul, Set.mem_setOf_eq, map_mul, norm_eq_norm, Rat.cast_abs, mul_eq_zero,
    abs_eq_zero, Rat.cast_eq_zero, Algebra.norm_eq_zero_iff, RingOfIntegers.coe_eq_zero_iff,
    Units.ne_zero, false_or] using hx.2

theorem unitSMul_mem_iff_mem_torsion {x : E K} (hx : x ‚àà fundamentalCone K) (u : (ùìû K)À£) :
    u ‚Ä¢ x ‚àà fundamentalCone K ‚Üî u ‚àà torsion K := by
  classical
  refine ‚ü®fun h ‚Ü¶ ?_, fun h ‚Ü¶ ?_‚ü©
  ¬∑ rw [‚Üê logEmbedding_eq_zero_iff]
    let B := (basisUnitLattice K).ofZlatticeBasis ‚Ñù
    refine (Subtype.mk_eq_mk (h := ?_) (h' := ?_)).mp <|
      ExistsUnique.unique (Zspan.exist_unique_vadd_mem_fundamentalDomain B (logMap x)) ?_ ?_
    ¬∑ change logEmbedding K u ‚àà (Submodule.span ‚Ñ§ (Set.range B)).toAddSubgroup
      rw [Basis.ofZlatticeBasis_span ‚Ñù (unitLattice K)]
      exact ‚ü®u, trivial, rfl‚ü©
    ¬∑ exact Submodule.zero_mem _
    ¬∑ rw [AddSubmonoid.mk_vadd, vadd_eq_add, ‚Üê logMap_unitSMul _ hx.2]
      exact h.1
    ¬∑ rw [AddSubmonoid.mk_vadd, vadd_eq_add, zero_add]
      exact hx.1
  ¬∑ exact torsion_unitSMul_mem_of_mem hx h

variable (K) in
theorem measurableSet :
    MeasurableSet (fundamentalCone K) := by
  classical
  refine MeasurableSet.diff ?_ ?_
  ¬∑ unfold logMap
    refine MeasurableSet.preimage (Zspan.fundamentalDomain_measurableSet _) <|
      measurable_pi_iff.mpr fun w ‚Ü¶ measurable_const.mul ?_
    exact (continuous_normAtPlace _).measurable.log.sub <|
      (mixedEmbedding.continuous_norm _).measurable.log.mul measurable_const
  ¬∑ exact measurableSet_eq_fun (mixedEmbedding.continuous_norm K).measurable measurable_const

section normLessOne

variable (K)

abbrev normLessThanOne : Set (E K) := {x | x ‚àà fundamentalCone K ‚àß mixedEmbedding.norm x ‚â§ 1}

abbrev normEqOne : Set (E K) := {x | x ‚àà fundamentalCone K ‚àß mixedEmbedding.norm x = 1}

variable {K} in
theorem mem_normLessThanOne_of_normAtPlace_eq {x y : E K} (hx : x ‚àà normLessThanOne K)
    (hy : ‚àÄ w, normAtPlace w y = normAtPlace w x) :
    y ‚àà normLessThanOne K := by
  have h‚ÇÅ : mixedEmbedding.norm y = mixedEmbedding.norm x := by
    simp_rw [mixedEmbedding.norm_apply, hy]
  exact ‚ü®mem_of_normAtPlace_eq hx.1 hy, h‚ÇÅ ‚ñ∏ hx.2‚ü©

theorem mem_normEqOne_of_normAtPlace_eq {x y : E K} (hx : x ‚àà normEqOne K)
    (hy : ‚àÄ w, normAtPlace w y = normAtPlace w x) :
    y ‚àà normEqOne K := by
  have h‚ÇÅ : mixedEmbedding.norm y = mixedEmbedding.norm x := by
    simp_rw [mixedEmbedding.norm_apply, hy]
  exact ‚ü®mem_of_normAtPlace_eq hx.1 hy, h‚ÇÅ ‚ñ∏ hx.2‚ü©

open Pointwise FiniteDimensional Bornology MeasureTheory Filter

theorem smul_normEqOne {c : ‚Ñù} (hc : 0 < c) :
    c ‚Ä¢ normEqOne K = {x | x ‚àà fundamentalCone K ‚àß mixedEmbedding.norm x = c ^ finrank ‚Ñö K} := by
  ext
  rw [‚Üê Set.preimage_smul_inv‚ÇÄ (ne_of_gt hc), Set.preimage_setOf_eq, Set.mem_setOf_eq,
    mixedEmbedding.norm_smul, abs_inv, abs_eq_self.mpr hc.le, inv_pow, mul_comm, mul_inv_eq_one‚ÇÄ
    (pow_ne_zero _ (ne_of_gt hc)), Set.mem_setOf_eq, and_congr_left_iff]
  exact fun _ ‚Ü¶ smul_mem_iff_mem (inv_ne_zero (ne_of_gt hc))

-- Use this to golf some proof before?
variable {K} in
theorem exists_mem_smul_normEqOne {x : E K} (hx : x ‚àà normLessThanOne K) :
    ‚àÉ c : ‚Ñù, 0 < c ‚àß c ‚â§ 1 ‚àß x ‚àà c ‚Ä¢ normEqOne K := by
  have h‚ÇÅ : (finrank ‚Ñö K : ‚Ñù) ‚â† 0 := Nat.cast_ne_zero.mpr (ne_of_gt finrank_pos)
  have h‚ÇÇ : 0 < mixedEmbedding.norm x ^ (finrank ‚Ñö K : ‚Ñù)‚Åª¬π :=
    Real.rpow_pos_of_pos (norm_pos_of_mem hx.1) _
  refine ‚ü®(mixedEmbedding.norm x) ^ (finrank ‚Ñö K : ‚Ñù)‚Åª¬π, h‚ÇÇ, ?_, ?_‚ü©
  ¬∑ exact Real.rpow_le_one (mixedEmbedding.norm_nonneg _) hx.2 (inv_nonneg.mpr (Nat.cast_nonneg _))
  ¬∑ rw [smul_normEqOne K h‚ÇÇ]
    refine ‚ü®hx.1, ?_‚ü©
    rw [‚Üê Real.rpow_natCast, ‚Üê Real.rpow_mul (mixedEmbedding.norm_nonneg _), inv_mul_cancel h‚ÇÅ,
      Real.rpow_one]

-- Replace with Set.Ioc?
-- This is useless after the next result
theorem smul_normEqOne_subset {c : ‚Ñù} (hc‚ÇÅ : 0 < c) (hc‚ÇÇ : c ‚â§ 1) :
    c ‚Ä¢ normEqOne K ‚äÜ normLessThanOne K := by
  rw [smul_normEqOne K hc‚ÇÅ]
  refine fun x hx ‚Ü¶ ‚ü®hx.1, ?_‚ü©
  rw [hx.2]
  exact pow_le_one _ hc‚ÇÅ.le hc‚ÇÇ

theorem smul_normLessThanOne_subset {c : ‚Ñù} (hc‚ÇÅ : c ‚â† 0) (hc‚ÇÇ : |c| ‚â§ 1) :
    c ‚Ä¢ normLessThanOne K ‚äÜ normLessThanOne K := by
  rintro _ ‚ü®x, hx, rfl‚ü©
  refine ‚ü®?_, ?_‚ü©
  ¬∑ refine smul_mem_of_mem hx.1 hc‚ÇÅ
  ¬∑ rw [norm_smul]
    refine mul_le_one ?_ (mixedEmbedding.norm_nonneg x) hx.2
    exact pow_le_one _ (abs_nonneg c) hc‚ÇÇ

theorem isBounded_normEqOne :
    IsBounded (normEqOne K) := by
  classical
  let B := (basisUnitLattice K).ofZlatticeBasis ‚Ñù
  obtain ‚ü®r, hr‚ÇÅ, hr‚ÇÇ‚ü© := (Zspan.fundamentalDomain_isBounded B).subset_closedBall_lt 0 0
  have h‚ÇÅ : ‚àÄ ‚¶Éx w‚¶Ñ, x ‚àà normEqOne K ‚Üí w ‚â† w‚ÇÄ ‚Üí |mult w * Real.log (normAtPlace w x)| ‚â§ r := by
    intro x w hx hw
    rw [‚Üê logMap_apply_of_norm_one hx.2]
    suffices ‚ÄñlogMap x‚Äñ ‚â§ r by exact (pi_norm_le_iff_of_nonneg hr‚ÇÅ.le).mp this ‚ü®w, hw‚ü©
    exact mem_closedBall_zero_iff.mp (hr‚ÇÇ hx.1.1)
  have h‚ÇÇ : ‚àÄ ‚¶Éx‚¶Ñ, x ‚àà normEqOne K ‚Üí mult (w‚ÇÄ : InfinitePlace K) * Real.log (normAtPlace w‚ÇÄ x) ‚â§
      (Finset.univ.erase (w‚ÇÄ : InfinitePlace K)).card ‚Ä¢ r := by
    intro x hx
    suffices mult (w‚ÇÄ : InfinitePlace K) * Real.log (normAtPlace w‚ÇÄ x) =
        - ‚àë w ‚àà Finset.univ.erase w‚ÇÄ, mult w * Real.log (normAtPlace w x) by
      rw [this, ‚Üê Finset.sum_neg_distrib, ‚Üê Finset.sum_const]
      exact Finset.sum_le_sum fun w hw ‚Ü¶
        neg_le_of_neg_le (abs_le.mp (h‚ÇÅ hx (Finset.mem_erase.mp hw).1)).1
    simp_rw [‚Üê Real.log_pow]
    rw [‚Üê add_eq_zero_iff_eq_neg, Finset.univ.add_sum_erase (fun w ‚Ü¶
      ((normAtPlace w x) ^ mult w).log) (Finset.mem_univ w‚ÇÄ), ‚Üê Real.log_prod,
      ‚Üê mixedEmbedding.norm_apply, hx.2, Real.log_one]
    exact fun w _ ‚Ü¶  pow_ne_zero _ <| ne_of_gt (normAtPlace_pos_of_mem hx.1 w)
  have h‚ÇÉ : ‚àÄ ‚¶Éx w c‚¶Ñ, 0 ‚â§ c ‚Üí x ‚àà fundamentalCone K ‚Üí
      mult w * Real.log (normAtPlace w x) ‚â§ c ‚Üí normAtPlace w x ‚â§ Real.exp c := by
    intro x w c hc hx
    rw [‚Üê le_div_iff' (Nat.cast_pos.mpr mult_pos),
      Real.log_le_iff_le_exp (normAtPlace_pos_of_mem hx w)]
    exact fun h ‚Ü¶ le_trans h <| Real.exp_le_exp.mpr (div_le_self hc one_le_mult)
  refine (Metric.isBounded_iff_subset_closedBall 0).mpr
    ‚ü®max (Real.exp r) (Real.exp ((Finset.univ.erase (w‚ÇÄ : InfinitePlace K)).card ‚Ä¢ r)),
      fun x hx ‚Ü¶ mem_closedBall_zero_iff.mpr ?_‚ü©
  rw [norm_eq_sup'_normAtPlace]
  refine Finset.sup'_le _ _ fun w _ ‚Ü¶ ?_
  by_cases hw : w = w‚ÇÄ
  ¬∑ rw [hw]
    exact (h‚ÇÉ (nsmul_nonneg (hr‚ÇÅ.le) _) hx.1 (h‚ÇÇ hx)).trans (le_max_right _ _)
  ¬∑ exact le_trans (h‚ÇÉ hr‚ÇÅ.le hx.1 (abs_le.mp (h‚ÇÅ hx hw)).2) (le_max_left _ _)

theorem isBounded_normLessThanOne :
    IsBounded (normLessThanOne K) := by
  classical
  obtain ‚ü®r, hr‚ÇÅ, hr‚ÇÇ‚ü© := (isBounded_normEqOne K).subset_ball_lt 0 0
  refine (Metric.isBounded_iff_subset_ball 0).mpr ‚ü®r, fun x hx ‚Ü¶ ?_‚ü©
  obtain ‚ü®c, hc‚ÇÅ, _, hc‚ÇÇ‚ü© := exists_mem_smul_normEqOne hx
  suffices x ‚àà c ‚Ä¢ Metric.ball (0 : (E K)) r by
    rw [smul_ball (ne_of_gt hc‚ÇÅ), smul_zero] at this
    refine Set.mem_of_subset_of_mem (Metric.ball_subset_ball ?_) this
    rwa [mul_le_iff_le_one_left hr‚ÇÅ, Real.norm_eq_abs, abs_eq_self.mpr hc‚ÇÅ.le]
  exact (Set.image_subset _ hr‚ÇÇ) hc‚ÇÇ

theorem frontier_normLessThanOne :
    frontier (normLessThanOne K) ‚äÜ frontier (fundamentalCone K) ‚à™ normEqOne K := by
  rw [show normLessThanOne K = fundamentalCone K ‚à© {x | mixedEmbedding.norm x ‚â§ 1} by ext; simp]
  refine le_trans (frontier_inter_subset _ _) ?_
  intro x hx
  cases hx with
  | inl h =>
      left
      exact Set.mem_of_mem_inter_left h
  | inr h =>
      rw [show frontier {x | mixedEmbedding.norm x ‚â§ 1} = {x | mixedEmbedding.norm x = 1} by sorry]
        at h
      by_cases hx : x ‚àà fundamentalCone K
      ¬∑ right
        refine ‚ü®hx, h.2‚ü©
      ¬∑ left
        have : x ‚àâ interior (fundamentalCone K) := by
          by_contra h
          exact hx <| interior_subset h
        refine ‚ü®h.1, this‚ü©

theorem measurableSet_normEqOne :
    MeasurableSet (normEqOne K) :=
  MeasurableSet.inter (measurableSet K) <|
    measurableSet_eq_fun (mixedEmbedding.continuous_norm K).measurable measurable_const

theorem measurableSet_normLessThanOne :
    MeasurableSet (normLessThanOne K) :=
  MeasurableSet.inter (measurableSet K) <|
    measurableSet_le (mixedEmbedding.continuous_norm K).measurable measurable_const

-- To prove that the frontier of `X` is of measure zero?
-- MeasureTheory.addHaar_image_eq_zero_of_differentiableOn_of_addHaar_eq_zero

abbrev normLessThanOne‚ÇÄ : Set (E K) :=
    {x | x ‚àà normLessThanOne K ‚àß ‚àÄ w, (hw : IsReal w) ‚Üí 0 < x.1 ‚ü®w, hw‚ü©}

theorem measurableSet_normLessThanOne‚ÇÄ_aux (s : Finset {w : InfinitePlace K // IsReal w}) :
    MeasurableSet ({x | x ‚àà normLessThanOne K ‚àß ‚àÄ w ‚àà s, 0 < x.1 w}) := by
  refine MeasurableSet.inter (measurableSet_normLessThanOne K) ?_
  refine MeasurableSet.congr (s := ‚ãÇ z ‚àà s, {x | x.1 z > 0}) ?_ ?_
  ¬∑ refine  MeasurableSet.biInter ?_ fun z _ ‚Ü¶ ?_
    ¬∑ exact Set.to_countable _
    ¬∑ exact measurableSet_lt (f := fun _ ‚Ü¶ (0 : ‚Ñù)) measurable_const <|
        (measurable_pi_apply _).comp measurable_fst
  ¬∑ ext
    simp_rw [Set.mem_iInter, Subtype.forall, Set.mem_setOf_eq, gt_iff_lt, Set.mem_def]

open Classical

theorem measurableSet_normLessThanOne‚ÇÄ :
    MeasurableSet (normLessThanOne‚ÇÄ K) := by
  convert measurableSet_normLessThanOne‚ÇÄ_aux K Finset.univ
  simp

-- Use mem_normLessThanOne_of_normAtPlace_eq
theorem volume_normLessThanOne_aux (s : Finset {w : InfinitePlace K // IsReal w}) :
    volume (normLessThanOne K) = 2 ^ Finset.card s *
      volume {x | x ‚àà normLessThanOne K ‚àß ‚àÄ w ‚àà s, 0 < x.1 w} := by
  induction s using Finset.induction with
  | empty => simp
  | @insert w s hs h_ind =>
      have f‚ÇÅ : ‚àÄ ‚¶Éx‚¶Ñ, x ‚àà fundamentalCone K ‚Üí x.1 w ‚â† 0 := by
        intro x hx
        contrapose! hx
        have : mixedEmbedding.norm x = 0 := by
          rw [mixedEmbedding.norm_eq_zero_iff]
          refine ‚ü®w, ?_‚ü©
          rw [normAtPlace_apply_isReal w.prop]
          rw [hx, norm_zero]
        exact Set.not_mem_diff_of_mem this
      have f‚ÇÇ : MeasurableSet {x | x ‚àà normLessThanOne K ‚àß (‚àÄ z ‚àà s, 0 < x.1 z) ‚àß x.1 w < 0} := by
        simp_rw [‚Üê and_assoc]
        refine MeasurableSet.inter ?_ ?_
        ¬∑ exact measurableSet_normLessThanOne‚ÇÄ_aux K _
        ¬∑ refine measurableSet_lt (g := fun _ ‚Ü¶ (0 : ‚Ñù)) ?_ measurable_const
          exact (measurable_pi_apply w).comp measurable_fst
      have h‚ÇÅ : {x | x ‚àà normLessThanOne K ‚àß ‚àÄ z ‚àà s, x.1 z > 0} =
          {x | x ‚àà normLessThanOne K ‚àß (‚àÄ z ‚àà s, 0 < x.1 z) ‚àß 0 < x.1 w} ‚à™
          {x | x ‚àà normLessThanOne K ‚àß (‚àÄ z ‚àà s, 0 < x.1 z) ‚àß x.1 w < 0} := by
        ext x
        simp_rw [Set.mem_setOf_eq, gt_iff_lt, Subtype.forall, Set.mem_union]
        simp_rw [Set.mem_setOf_eq]
        simp_rw [‚Üê and_or_left, and_congr_right_iff, iff_self_and, and_imp]
        simp only [lt_or_lt_iff_ne]
        intro hx _ _
        exact (f‚ÇÅ hx).symm
      have h‚ÇÇ : Disjoint {x | x ‚àà normLessThanOne K ‚àß (‚àÄ z ‚àà s, x.1 z > 0) ‚àß 0 < x.1 w}
          {x | x ‚àà normLessThanOne K ‚àß (‚àÄ z ‚àà s, x.1 z > 0) ‚àß x.1 w < 0} := by
        refine Set.disjoint_iff_forall_ne.mpr ?_
        rintro _ ‚ü®_, ‚ü®_, hx‚ü©‚ü© _ ‚ü®_, ‚ü®_, hy‚ü©‚ü©
        contrapose! hx
        rw [hx]
        exact hy.le
      have h‚ÇÉ : volume {x | x ‚àà normLessThanOne K ‚àß (‚àÄ z ‚àà s, x.1 z > 0) ‚àß x.1 w < 0} =
          volume {x | x ‚àà normLessThanOne K ‚àß (‚àÄ z ‚àà s, x.1 z > 0) ‚àß 0 < x.1 w} := by
        let T : ({w : InfinitePlace K // IsReal w} ‚Üí ‚Ñù) ‚âÉL[‚Ñù]
            {w : InfinitePlace K // IsReal w} ‚Üí ‚Ñù := by
          refine ContinuousLinearEquiv.piCongrRight fun z ‚Ü¶ ?_
          exact if z = w then ContinuousLinearEquiv.neg _ else ContinuousLinearEquiv.refl _ _
        have hT : MeasurePreserving T volume volume := by
          convert (T.toHomeomorph.toMeasurableEquiv.measurable.measurePreserving volume)
          rw [Homeomorph.toMeasurableEquiv_coe, ContinuousLinearEquiv.coe_toHomeomorph]
          rw [show Measure.map (‚áëT) volume =
            ((Pi.basisFun ‚Ñù {w : InfinitePlace K // w.IsReal}).map T.toLinearEquiv).addHaar by
              rw [‚Üê addHaarMeasure_eq_volume_pi, ‚Üê Basis.parallelepiped_basisFun,
                ‚Üê Basis.addHaar_def, Basis.map_addHaar]]
          rw [eq_comm, Basis.addHaar_eq_iff]
          rw [volume_pi]
          rw [Basis.coe_parallelepiped]
          rw [parallelepiped_basis_eq]
          rw [Basis.map_repr]
          simp_rw [LinearEquiv.trans_apply, Pi.basisFun_repr]
          have : {x | ‚àÄ (i : { w // w.IsReal }), T.symm x i ‚àà Set.Icc 0 1} =
              Set.univ.pi fun z ‚Ü¶ if z = w then Set.Icc (-1) 0 else Set.Icc 0 1 := by
            ext
            simp_rw [Set.mem_setOf_eq, Set.mem_pi, Set.mem_univ, true_implies]
            refine forall_congr' fun z ‚Ü¶ ?_
            dsimp [T]
            by_cases hz : z = w
            ¬∑ simp_rw [if_pos hz, ContinuousLinearEquiv.symm_neg, ContinuousLinearEquiv.coe_neg]
              simp only [ContinuousLinearEquiv.symm_neg, ContinuousLinearEquiv.coe_neg,
                Pi.neg_apply, id_eq, Set.mem_Icc, Left.nonneg_neg_iff]
              rw [neg_le, and_comm]
            ¬∑ simp_rw [if_neg hz, ContinuousLinearEquiv.refl_symm, ContinuousLinearEquiv.coe_refl',
                id_eq]
          erw [this, Measure.pi_pi]
          simp [apply_ite]
        simp_rw [Measure.volume_eq_prod, ‚Üê (hT.prod (MeasurePreserving.id _)).measure_preimage f‚ÇÇ,
          Set.preimage_setOf_eq, Prod.map]
        congr! 4 with x
        ¬∑ simp_rw [id_eq, Set.mem_setOf_eq]
          have hx‚ÇÅ : ‚àÄ x, ‚àÄ z, normAtPlace z (T x.1, x.2) = normAtPlace z x := by
            intro x z
            dsimp [T]
            by_cases hz : IsReal z
            ¬∑ simp_rw [normAtPlace_apply_isReal hz, ContinuousLinearEquiv.piCongrRight_apply]
              by_cases hz' : ‚ü®z, hz‚ü© = w
              ¬∑ rw [if_pos hz', ContinuousLinearEquiv.coe_neg, Pi.neg_apply, id_eq, norm_neg]
              ¬∑ rw [if_neg hz', ContinuousLinearEquiv.coe_refl', id_eq]
            ¬∑ simp_rw [normAtPlace_apply_isComplex (not_isReal_iff_isComplex.mp hz)]
          have hx‚ÇÇ : ‚àÄ x, mixedEmbedding.norm (T x.1, x.2) = mixedEmbedding.norm x := by
            intro x
            simp_rw [mixedEmbedding.norm_apply, hx‚ÇÅ]
          rw [hx‚ÇÇ]
          have : ‚àÄ x, (T x.1, x.2) ‚àà fundamentalCone K ‚Üî x ‚àà fundamentalCone K := by
            intro x
            simp_rw [fundamentalCone, Set.mem_diff, Set.mem_preimage]
            have : logMap (T x.1, x.2) = logMap x := by
              unfold logMap
              ext
              simp [hx‚ÇÅ, hx‚ÇÇ]
            simp_rw [this, Set.mem_setOf_eq, hx‚ÇÇ]
          rw [this]
        ¬∑ simp [T]
          intro _
          refine ‚ü®?_, ?_‚ü©
          ¬∑ intro h z hz hz'
            specialize h z hz hz'
            rwa [if_neg, ContinuousLinearEquiv.coe_refl', id_eq] at h
            exact ne_of_mem_of_not_mem hz' hs
          ¬∑ intro h z hz hz'
            specialize h z hz hz'
            rwa [if_neg, ContinuousLinearEquiv.coe_refl', id_eq]
            exact ne_of_mem_of_not_mem hz' hs
      rw [h_ind, h‚ÇÅ, measure_union h‚ÇÇ, h‚ÇÉ, ‚Üê two_mul, ‚Üê mul_assoc, ‚Üê pow_succ]
      congr
      ¬∑ exact (Finset.card_insert_of_not_mem hs).symm
      ¬∑ ext x
        refine ‚ü®fun hx ‚Ü¶ ‚ü®hx.1, ?_‚ü©, fun hx ‚Ü¶ ‚ü®hx.1, ‚ü®fun z hz ‚Ü¶ ?_, ?_‚ü©‚ü©‚ü©
        ¬∑ intro z hz
          cases (Finset.mem_insert.mp hz) with
          | inr h => exact hx.2.1 z h
          | inl h => exact h ‚ñ∏ hx.2.2
        ¬∑ exact hx.2 z (Finset.mem_insert_of_mem hz)
        ¬∑ exact hx.2 w (Finset.mem_insert_self _ _)
      exact f‚ÇÇ

theorem volume_normLessThanOne :
    volume (normLessThanOne K) = 2 ^ (NrRealPlaces K) * volume (normLessThanOne‚ÇÄ K) := by
  convert volume_normLessThanOne_aux K Finset.univ
  simp [normLessThanOne‚ÇÄ]

def normLessThanOne‚ÇÅ :
    Set (({w : InfinitePlace K // IsReal w} ‚Üí ‚Ñù) √ó ({w : InfinitePlace K // IsComplex w} ‚Üí ‚Ñù)) :=
    {x | (‚àÄ w, 0 < x.1 w) ‚àß (‚àÄ w, 0 < x.2 w) ‚àß
      (fun w : {w : InfinitePlace K // IsReal w} ‚Ü¶ x.1 w,
        fun w : {w : InfinitePlace K // IsComplex w} ‚Ü¶ (x.2 w : ‚ÑÇ)) ‚àà normLessThanOne K}

theorem measurableSet_normLessThanOne‚ÇÅ :
    MeasurableSet (normLessThanOne‚ÇÅ K) := by
  let f : ({w // IsReal w} ‚Üí ‚Ñù) √ó ({w // IsComplex w} ‚Üí ‚Ñù) ‚Üí (E K) :=
    fun (x, y) ‚Ü¶ (x, fun w ‚Ü¶ y w)
  have hf : Measurable f := by
    refine Measurable.prod_mk ?_ ?_
    ¬∑ exact measurable_fst
    ¬∑ refine measurable_pi_iff.mpr fun _ ‚Ü¶ ?_
      have : Measurable (Complex.ofReal) := by
        refine Continuous.measurable ?_
        exact Complex.continuous_ofReal
      refine Measurable.comp this ?_
      exact Measurable.comp (measurable_pi_apply _) measurable_snd
  let A := f ‚Åª¬π' (normLessThanOne K)
  have mesA : MeasurableSet A := hf (measurableSet_normLessThanOne K)
  have : normLessThanOne‚ÇÅ K = {x | (‚àÄ w, 0 < x.1 w)}  ‚à© {x | (‚àÄ w, 0 < x.2 w)} ‚à© A := by
    ext
    simp [normLessThanOne‚ÇÅ]
    aesop
  rw [this]
  refine MeasurableSet.inter (MeasurableSet.inter ?_ ?_) mesA
  ¬∑ refine MeasurableSet.congr (s := ‚ãÇ z, {x | 0 < x.1 z}) ?_ ?_
    ¬∑ refine  MeasurableSet.iInter fun _ ‚Ü¶ ?_
      ¬∑ exact measurableSet_lt (f := fun _ ‚Ü¶ (0 : ‚Ñù)) measurable_const <|
        (measurable_pi_apply _).comp measurable_fst
    ¬∑ ext
      simp_rw [Set.mem_iInter, Subtype.forall, Set.mem_setOf_eq]
  ¬∑ refine MeasurableSet.congr (s := ‚ãÇ z, {x | 0 < x.2 z}) ?_ ?_
    ¬∑ refine  MeasurableSet.iInter fun _ ‚Ü¶ ?_
      ¬∑ exact measurableSet_lt (f := fun _ ‚Ü¶ (0 : ‚Ñù)) measurable_const <|
        (measurable_pi_apply _).comp measurable_snd
    ¬∑ ext
      simp_rw [Set.mem_iInter, Subtype.forall, Set.mem_setOf_eq]

variable {K}

theorem indicator_eq_indicator (x : {w : InfinitePlace K // IsReal w} ‚Üí ‚Ñù)
    (y : {w : InfinitePlace K // IsComplex w} ‚Üí ‚ÑÇ) :
    (normLessThanOne‚ÇÄ K).indicator (fun _ ‚Ü¶ (1 : ENNReal)) (x, y) =
      (normLessThanOne‚ÇÅ K).indicator (fun _ ‚Ü¶ (1 : ENNReal)) (x, fun w ‚Ü¶ (fun i ‚Ü¶ ‚Äñy i‚Äñ) w) := by
  have : ‚àÄ ‚¶Éx y‚¶Ñ, (x, y) ‚àà normLessThanOne‚ÇÄ K ‚Üî (x, (fun w ‚Ü¶ ‚Äñy w‚Äñ)) ‚àà (normLessThanOne‚ÇÅ K) := by
    intro x y
    refine ‚ü®fun h ‚Ü¶ ‚ü®?_, ?_, ?_‚ü©, fun h ‚Ü¶ ‚ü®?_, ?_‚ü©‚ü©
    ¬∑ exact fun w ‚Ü¶ h.2 w.val w.prop
    ¬∑ intro w
      have := mixedEmbedding.norm_ne_zero_iff.mp (norm_pos_of_mem h.1.1).ne.symm w.val
      rw [normAtPlace_apply_isComplex w.prop, norm_ne_zero_iff] at this
      simp [this]
    ¬∑ exact mem_normLessThanOne_of_normAtPlace_eq h.1 fun w ‚Ü¶ by simp [normAtPlace]
    ¬∑ exact mem_normLessThanOne_of_normAtPlace_eq h.2.2 fun w ‚Ü¶ by simp [normAtPlace]
    ¬∑ exact fun w hw ‚Ü¶ h.1 ‚ü®w, hw‚ü©
  by_cases h : (x, y) ‚àà normLessThanOne‚ÇÄ K
  ¬∑ rw [Set.indicator_of_mem h, Set.indicator_of_mem (this.mp h)]
  ¬∑ rw [Set.indicator_of_not_mem h, Set.indicator_of_not_mem (this.not.mp h)]

theorem volume_normLessOne‚ÇÄ :
    volume (normLessThanOne‚ÇÄ K) =
      (2 * NNReal.pi) ^ NrComplexPlaces K *
        ‚à´‚Åª z in (normLessThanOne‚ÇÅ K), (‚àè w : { w // IsComplex w}, ‚Äñz.2 w‚Äñ‚Çä) := by
  have h‚ÇÄ : Measurable ((normLessThanOne‚ÇÄ K).indicator (fun _ ‚Ü¶ (1 : ENNReal))) :=
    (measurable_indicator_const_iff 1).mpr <| measurableSet_normLessThanOne‚ÇÄ K
  rw [‚Üê set_lintegral_one, Measure.volume_eq_prod, ‚Üê lintegral_indicator _
    (measurableSet_normLessThanOne‚ÇÄ K), lintegral_prod _ h‚ÇÄ.aemeasurable]
  simp_rw [indicator_eq_indicator, volume_pi,
    lintegral_eq_lmarginal_univ (0 : {w // IsComplex w} ‚Üí ‚ÑÇ)]
  have := fun x ‚Ü¶ multiple_step (fun y ‚Ü¶ (normLessThanOne‚ÇÅ K).indicator (fun _ ‚Ü¶ 1)
      (x, fun w ‚Ü¶ y w)) ?_ ?_ Finset.univ 0
  dsimp only at this
  conv_lhs =>
    enter [2, x]
    rw [this x]
  simp only [Finset.card_univ, ENNReal.coe_finset_prod, Pi.zero_apply, norm_zero, lmarginal_univ]
  rw [lintegral_const_mul, NrComplexPlaces]
  rw [lintegral_lintegral]
  rw [‚Üê lintegral_indicator]
  ¬∑ congr
    ext z
    rw [‚Üê ENNReal.coe_finset_prod]
    simp_rw [Set.indicator_apply]
    simp only [ENNReal.coe_finset_prod, Prod.mk.eta, mul_ite, mul_one, mul_zero]
  ¬∑ exact measurableSet_normLessThanOne‚ÇÅ K
  ¬∑ refine Measurable.aemeasurable ?_
    rw [Function.uncurry_def]
    refine Measurable.mul ?_ ?_
    ¬∑ refine Finset.measurable_prod _ fun _ _ ‚Ü¶ ?_
      simp only [measurable_coe_nnreal_ennreal_iff]
      refine measurable_nnnorm.comp ?_
      exact Measurable.eval measurable_snd
    ¬∑ refine Measurable.indicator ?_ ?_
      exact measurable_const
      exact measurableSet_normLessThanOne‚ÇÅ K
  ¬∑ refine Measurable.lintegral_prod_right ?_
    rw [Function.uncurry_def]
    -- Duplicate of the above code
    refine Measurable.mul ?_ ?_
    ¬∑ refine Finset.measurable_prod _ fun _ _ ‚Ü¶ ?_
      simp only [measurable_coe_nnreal_ennreal_iff]
      refine measurable_nnnorm.comp ?_
      exact Measurable.eval measurable_snd
    ¬∑ refine Measurable.indicator ?_ ?_
      exact measurable_const
      exact measurableSet_normLessThanOne‚ÇÅ K
  ¬∑ refine Measurable.indicator ?_ ?_
    ¬∑ exact measurable_const
    ¬∑ let f : ({w : InfinitePlace K // IsComplex w} ‚Üí ‚Ñù) ‚Üí
        ({w : InfinitePlace K // IsReal w} ‚Üí ‚Ñù) √ó ({w : InfinitePlace K // IsComplex w} ‚Üí ‚Ñù) := fun y ‚Ü¶ (x, fun w ‚Ü¶ y w)
      let s := f ‚Åª¬π' (normLessThanOne‚ÇÅ K)
      refine MeasurableSet.congr (s := s) ?_ ?_
      ¬∑ dsimp only [s]
        refine MeasurableSet.preimage (measurableSet_normLessThanOne‚ÇÅ K) ?_
        dsimp only [f]
        rw [measurable_prod]
        refine ‚ü®?_, ?_‚ü©
        ¬∑ simp
        ¬∑ exact fun ‚¶Ét‚¶Ñ a ‚Ü¶ a -- ??
      ¬∑ ext
        simp [s, normLessThanOne‚ÇÅ, Set.mem_def]
        rfl
  ¬∑ intro x _ w h
    rw [Set.indicator_apply_eq_zero]
    simp only [one_ne_zero, imp_false]
    intro hx
    have := hx.2.1 w
    simp at this
    linarith

variable (K)

def fusionEquiv‚ÇÄ :
  ({w : InfinitePlace K // IsReal w} ‚Üí ‚Ñù) √ó ({w : InfinitePlace K // ¬¨IsReal w} ‚Üí ‚Ñù) ‚âÉ·µê
    ({w : InfinitePlace K // IsReal w} ‚Üí ‚Ñù) √ó ({w : InfinitePlace K // IsComplex w} ‚Üí ‚Ñù) :=
  (MeasurableEquiv.refl _).prodCongr <|
    ‚ü®(Equiv.subtypeEquivRight fun _ ‚Ü¶ not_isReal_iff_isComplex).piCongrLeft (fun _ ‚Ü¶ ‚Ñù),
      by measurability, by measurability‚ü©

theorem fusionEquiv‚ÇÄ_measure_preserving :
    MeasurePreserving (fusionEquiv‚ÇÄ K) :=
  (MeasurePreserving.id volume).prod (volume_measurePreserving_piCongrLeft _ _)

def fusionEquiv :
    (InfinitePlace K ‚Üí ‚Ñù) ‚âÉ·µê
    ({w : InfinitePlace K // IsReal w} ‚Üí ‚Ñù) √ó ({w : InfinitePlace K // IsComplex w} ‚Üí ‚Ñù)
       :=
  MeasurableEquiv.trans
    (MeasurableEquiv.piEquivPiSubtypeProd (fun _ : InfinitePlace K ‚Ü¶ ‚Ñù) (fun w ‚Ü¶ IsReal w))
      (fusionEquiv‚ÇÄ K)

theorem fusionEquiv_measure_preserving :
    MeasurePreserving (fusionEquiv K) := by
  unfold fusionEquiv
  refine MeasurePreserving.trans ?_ (fusionEquiv‚ÇÄ_measure_preserving K)
  exact volume_preserving_piEquivPiSubtypeProd _ _

theorem fusionEquiv_apply (x : InfinitePlace K ‚Üí ‚Ñù) :
    fusionEquiv K x = (fun w ‚Ü¶ x w.val, fun w ‚Ü¶ x w.val) := rfl

theorem fusionEquiv_symm_apply
    (x : ({w : InfinitePlace K // IsReal w} ‚Üí ‚Ñù) √ó ({w : InfinitePlace K // IsComplex w} ‚Üí ‚Ñù)) :
    (fusionEquiv K).symm x = fun w ‚Ü¶
      if hw : IsReal w then x.1 ‚ü®w, hw‚ü© else x.2 ‚ü®w, not_isReal_iff_isComplex.mp hw‚ü© := rfl

def normLessThanOne‚ÇÇ : Set (InfinitePlace K ‚Üí ‚Ñù) := (fusionEquiv K)‚Åª¬π' (normLessThanOne‚ÇÅ K)

def equivFinRank : {w : InfinitePlace K // w ‚â† w‚ÇÄ} ‚âÉ Fin (rank K) := by
  refine Fintype.equivOfCardEq ?_
  rw [Fintype.card_subtype_compl, Fintype.card_ofSubsingleton, Fintype.card_fin, rank]

-- That's a terrible name
def normUnits : {w : InfinitePlace K // w ‚â† w‚ÇÄ} ‚Üí ((InfinitePlace K) ‚Üí ‚Ñù) :=
  fun i w ‚Ü¶ w (fundSystem K (equivFinRank K i))

theorem normUnits_eq (i : {w : InfinitePlace K // w ‚â† w‚ÇÄ}) (w : InfinitePlace K) :
    normUnits K i w = w (fundSystem K (equivFinRank K i)) := rfl

theorem normUnits_pos (i : {w : InfinitePlace K // w ‚â† w‚ÇÄ}) (w : InfinitePlace K) :
    0 < normUnits K i w := by
  simp_rw [normUnits_eq, pos_iff, ne_eq, RingOfIntegers.coe_eq_zero_iff, Units.ne_zero,
    not_false_eq_true]

def normUnitsEvalProd (c : {w : InfinitePlace K // w ‚â† w‚ÇÄ} ‚Üí ‚Ñù) : InfinitePlace K ‚Üí ‚Ñù :=
  fun w ‚Ü¶ ‚àè i, (normUnits K i w) ^ (c i)

theorem normUnitsEvalProd_def (c : {w : InfinitePlace K // w ‚â† w‚ÇÄ} ‚Üí ‚Ñù) (w : InfinitePlace K) :
    normUnitsEvalProd K c w = ‚àè i, (normUnits K i w) ^ (c i) := rfl

theorem normUnitsEvalProd_pos (c : {w : InfinitePlace K // w ‚â† w‚ÇÄ} ‚Üí ‚Ñù) (w : InfinitePlace K) :
    0 < normUnitsEvalProd K c w :=
  Finset.prod_pos fun _ _ ‚Ü¶ Real.rpow_pos_of_pos (normUnits_pos K _ _) _

theorem prod_normUnitsEvalProd_pow_mult (c : {w : InfinitePlace K // w ‚â† w‚ÇÄ} ‚Üí ‚Ñù) :
    ‚àè w : InfinitePlace K, normUnitsEvalProd K c w ^ w.mult = 1 := by
  simp_rw [normUnitsEvalProd_def, ‚Üê Finset.prod_pow, ‚Üê Real.rpow_mul_natCast
    (normUnits_pos _ _ _).le, fun i ‚Ü¶ mul_comm (c i), Real.rpow_natCast_mul
    (normUnits_pos _ _ _).le]
  rw [Finset.prod_comm]
  have : ‚àÄ i w, 0 ‚â§ normUnits K i w ^ w.mult := by
        intro _ _
        refine pow_nonneg ?_ _
        exact (normUnits_pos _ _ _).le
  simp_rw [Real.finset_prod_rpow _ _ (fun _ _ ‚Ü¶ this _ _), normUnits, prod_eq_abs_norm, Units.norm,
    Rat.cast_one, Real.one_rpow, Finset.prod_const_one]

theorem prod_normUnitsEvalProd (c : {w : InfinitePlace K // w ‚â† w‚ÇÄ} ‚Üí ‚Ñù) :
    ‚àè w : InfinitePlace K, normUnitsEvalProd K c w =
      (‚àè w : {w : InfinitePlace K // IsComplex w}, normUnitsEvalProd K c w)‚Åª¬π := by
  rw [‚Üê mul_eq_one_iff_eq_inv‚ÇÄ, ‚Üê Fintype.prod_subtype_mul_prod_subtype (fun w ‚Ü¶ IsReal w)]
  rw [‚Üê (Equiv.subtypeEquivRight (fun _ ‚Ü¶ not_isReal_iff_isComplex)).prod_comp]
  simp_rw [Equiv.subtypeEquivRight_apply_coe]
  ¬∑ rw [mul_assoc, ‚Üê sq, ‚Üê Finset.prod_pow]
    convert_to ‚àè w, ((normUnitsEvalProd K c w) ^ w.mult) = 1
    ¬∑ rw [‚Üê Fintype.prod_subtype_mul_prod_subtype (fun w ‚Ü¶ IsReal w)]
      congr
      ¬∑ ext w
        rw [mult, if_pos w.prop, pow_one]
      ¬∑ ext w
        rw [mult, if_neg w.prop]
    ¬∑ exact prod_normUnitsEvalProd_pow_mult K c
  ¬∑ rw [Finset.prod_ne_zero_iff]
    intro _ _
    rw [normUnitsEvalProd_def]
    rw [Finset.prod_ne_zero_iff]
    intro _ _
    refine Real.rpow_ne_zero_of_pos ?_ _
    exact normUnits_pos K _ _

theorem normAtPlace_eq (x : InfinitePlace K ‚Üí ‚Ñù) (w : InfinitePlace K) :
    normAtPlace w ‚ü®fun w ‚Ü¶ x w.val, fun w ‚Ü¶ x w.val‚ü© = |x w| := by
  obtain hw | hw := isReal_or_isComplex w
  ¬∑ rw [normAtPlace_apply_isReal hw, Real.norm_eq_abs]
  ¬∑ rw [normAtPlace_apply_isComplex hw, Complex.norm_eq_abs, Complex.abs_ofReal]

theorem normReal_eq (x : InfinitePlace K ‚Üí ‚Ñù) (hx : ‚àÄ w, 0 ‚â§ x w) :
    mixedEmbedding.norm ‚ü®fun w ‚Ü¶ x w.val, fun w ‚Ü¶ x w.val‚ü© = ‚àè w, (x w) ^ mult w :=
  Finset.prod_congr rfl fun w _ ‚Ü¶ by rw [normAtPlace_eq, abs_eq_self.mpr (hx _)]

theorem normReal_normUnitsEvalProd (c : {w : InfinitePlace K // w ‚â† w‚ÇÄ} ‚Üí ‚Ñù) :
    mixedEmbedding.norm ‚ü®fun w ‚Ü¶ normUnitsEvalProd K c w.val,
      fun w ‚Ü¶ normUnitsEvalProd K c w.val‚ü© = 1 := by
  rw [normReal_eq]
  exact prod_normUnitsEvalProd_pow_mult K c
  intro _
  exact (normUnitsEvalProd_pos _ _ _).le

def logRepr (x : InfinitePlace K ‚Üí ‚Ñù) : {w : InfinitePlace K // w ‚â† w‚ÇÄ} ‚Üí ‚Ñù :=
  (((basisUnitLattice K).ofZlatticeBasis ‚Ñù).reindex (equivFinRank K).symm).equivFun
        (logMap ‚ü®fun w ‚Ü¶ x w.val, fun w ‚Ü¶ x w.val‚ü©)

theorem logRepr_apply (x : InfinitePlace K ‚Üí ‚Ñù) (i : {w : InfinitePlace K // w ‚â† w‚ÇÄ}):
    logRepr K x i =
      (((basisUnitLattice K).ofZlatticeBasis ‚Ñù (unitLattice K) ).repr
        (logMap (fun w ‚Ü¶ x w, fun w ‚Ü¶ x w))) (equivFinRank K i) := by
  simp [logRepr]

theorem normUnitsEvalProd_eq_iff {x : InfinitePlace K ‚Üí ‚Ñù} {c : {w : InfinitePlace K // w ‚â† w‚ÇÄ} ‚Üí ‚Ñù}
    (hx‚ÇÄ : mixedEmbedding.norm (‚ü®fun w ‚Ü¶ x w.val, fun w ‚Ü¶ x w.val‚ü©) = 1)
    (hx‚ÇÅ : ‚àÄ w, 0 < x w) :
    normUnitsEvalProd K c = x ‚Üî c = logRepr K x := by
  suffices (‚àÄ w : {w // w ‚â† w‚ÇÄ}, normUnitsEvalProd K c w = x w.val) ‚Üî c = logRepr K x by
    rw [‚Üê this, Function.funext_iff]
    refine ‚ü®fun h w ‚Ü¶ h w, fun h w ‚Ü¶ ?_‚ü©
    by_cases hw : w = w‚ÇÄ
    ¬∑ simp_rw [normUnitsEvalProd_def, hw] at h ‚ä¢
      have : ‚àè w, ‚àè i, (normUnits K i w ^ (c i)) ^ w.mult = ‚àè w, (x w) ^ w.mult := sorry
      rw [‚Üê Finset.univ.prod_erase_mul _ (Finset.mem_univ w‚ÇÄ),
        ‚Üê Finset.univ.prod_erase_mul _ (Finset.mem_univ w‚ÇÄ)] at this
      rw [show (‚àè w ‚àà Finset.univ.erase w‚ÇÄ, ‚àè i : { w // w ‚â† w‚ÇÄ }, (normUnits K i w ^ c i) ^ w.mult)
        = (‚àè w ‚àà Finset.univ.erase (w‚ÇÄ : InfinitePlace K), (x w) ^ w.mult) by sorry] at this
      rwa [mul_cancel_left_mem_nonZeroDivisors, Finset.prod_pow, pow_left_inj] at this
      sorry
      sorry
      sorry
      sorry
    ¬∑ exact h ‚ü®w, hw‚ü©
  simp_rw [logRepr, ‚Üê Basis.sum_eq_iff_eq_equivFun, Basis.coe_reindex, Equiv.symm_symm,
    Function.comp_apply, Basis.ofZlatticeBasis_apply, ‚Üê logEmbedding_fundSystem,
    Function.funext_iff, logMap_apply_of_norm_one hx‚ÇÄ, Finset.sum_apply, Pi.smul_apply,
    logEmbedding_component, smul_eq_mul, ‚Üê mul_assoc, fun i ‚Ü¶ mul_comm (c i), mul_assoc,
    ‚Üê Finset.mul_sum, mul_cancel_left_mem_nonZeroDivisors sorry, ‚Üê Real.log_rpow sorry,
    ‚Üê Real.log_prod _ _ sorry, normAtPlace_eq, abs_eq_self.mpr sorry,  ‚Üê normUnits_eq,
    normUnitsEvalProd_def]
  refine ‚ü®fun h w ‚Ü¶ congr_arg Real.log (h w), fun h w ‚Ü¶ ?_‚ü©
  refine Real.log_injOn_pos ?_ ?_ (h w)
  sorry
  sorry

theorem logRepr_normUnitsEvalProd_eq {c : {w : InfinitePlace K // w ‚â† w‚ÇÄ} ‚Üí ‚Ñù} :
    logRepr K (normUnitsEvalProd K c) = c := by
  rw [eq_comm, ‚Üê normUnitsEvalProd_eq_iff]
  exact normReal_normUnitsEvalProd K c
  exact fun w ‚Ü¶ normUnitsEvalProd_pos K c w

theorem normEqOne‚ÇÇ_eq_image : {x | x ‚àà normLessThanOne‚ÇÇ K ‚àß
    mixedEmbedding.norm (‚ü®fun w ‚Ü¶ x w.val, fun w ‚Ü¶ x w.val‚ü©) = 1} =
    (normUnitsEvalProd K) '' (Set.univ.pi fun _ ‚Ü¶ Set.Ico 0 1) := by
  ext x
  simp_rw [Set.mem_setOf_eq, normLessThanOne‚ÇÇ, Set.mem_image, Set.mem_preimage, fusionEquiv_apply,
    normLessThanOne‚ÇÅ, Set.mem_setOf_eq, fundamentalCone, Set.mem_diff, Set.mem_preimage,
    Set.mem_setOf_eq, ‚Üê ne_eq, Zspan.mem_fundamentalDomain, Set.mem_pi, Set.mem_univ, true_implies,
    Equiv.forall_congr_left' (equivFinRank K).symm, Equiv.symm_symm, ‚Üê logRepr_apply]
  refine ‚ü®?_, ?_‚ü©
  ¬∑ rintro ‚ü®‚ü®hx‚ÇÅ, hx‚ÇÇ, ‚ü®hx‚ÇÉ, _‚ü©, _‚ü©, hx‚ÇÑ‚ü©
    refine ‚ü®logRepr K x, hx‚ÇÉ, (normUnitsEvalProd_eq_iff K hx‚ÇÑ fun w ‚Ü¶ ?_).mpr rfl‚ü©
    obtain hw | hw :=  isReal_or_isComplex w
    ¬∑ exact hx‚ÇÅ ‚ü®w, hw‚ü©
    ¬∑ exact hx‚ÇÇ ‚ü®w, hw‚ü©
  ¬∑ rintro ‚ü®c, hc‚ÇÅ, rfl‚ü©
    refine ‚ü®‚ü®fun w ‚Ü¶ normUnitsEvalProd_pos K c w, fun w ‚Ü¶ normUnitsEvalProd_pos K c w,
      ‚ü®?_, by simp [normReal_normUnitsEvalProd]‚ü©, by simp [normReal_normUnitsEvalProd]‚ü©, by
      simp [normReal_normUnitsEvalProd]‚ü©
    convert hc‚ÇÅ
    rw [eq_comm, ‚Üê normUnitsEvalProd_eq_iff]
    ¬∑ simp [normReal_normUnitsEvalProd]
    ¬∑ exact fun w ‚Ü¶ normUnitsEvalProd_pos K c w

def normUnitsEval (c : InfinitePlace K ‚Üí ‚Ñù) : InfinitePlace K ‚Üí ‚Ñù :=
  (c w‚ÇÄ) ‚Ä¢ normUnitsEvalProd K (fun w ‚Ü¶ c w)

def S : Set (InfinitePlace K ‚Üí ‚Ñù) :=
  Set.univ.pi fun w ‚Ü¶ if w = w‚ÇÄ then Set.Ioc 0 1 else Set.Ico 0 1

theorem measurable_S :
    MeasurableSet (S K) := by
  refine MeasurableSet.univ_pi fun w ‚Ü¶ ?_
  refine MeasurableSet.ite' ?_ ?_
  exact fun _ ‚Ü¶ measurableSet_Ioc
  exact fun _ ‚Ü¶ measurableSet_Ico

theorem normUnitsEval_injOn :
    Set.InjOn (normUnitsEval K) (S K) := by
  intro c hc c' hc' h
  suffices c w‚ÇÄ = c' w‚ÇÄ by
    rw [normUnitsEval, normUnitsEval, this] at h
    rw [IsUnit.smul_left_cancel sorry] at h
    rw [normUnitsEvalProd_eq_iff] at h
    rw [logRepr_normUnitsEvalProd_eq] at h
    ext w
    by_cases hw : w = w‚ÇÄ
    ¬∑ rw [hw, this]
    ¬∑ rw [Function.funext_iff] at h
      exact h ‚ü®w, hw‚ü©
    exact normReal_normUnitsEvalProd K fun w ‚Ü¶ c' w
    sorry
  have := congr_arg (fun x ‚Ü¶ mixedEmbedding.norm (‚ü®fun w ‚Ü¶ x w.val, fun w ‚Ü¶ x w.val‚ü©)) h
  simp_rw [normUnitsEval, Pi.smul_apply, smul_eq_mul, Complex.ofReal_mul, ‚Üê Complex.real_smul,
    ‚Üê smul_eq_mul, ‚Üê Pi.smul_def, ‚Üê Prod.smul_mk, mixedEmbedding.norm_smul,
    normReal_normUnitsEvalProd, mul_one] at this
  rwa [pow_left_inj, abs_eq_self.mpr, abs_eq_self.mpr] at this
  all_goals sorry

theorem smul_mem_normLessThanOne‚ÇÇ {x : InfinitePlace K ‚Üí ‚Ñù} (hx : x ‚àà normLessThanOne‚ÇÇ K) {c : ‚Ñù}
    (hc : c ‚àà Set.Ioc 0 1) :
    c ‚Ä¢ x ‚àà normLessThanOne‚ÇÇ K := by
  refine ‚ü®?_, ?_, ?_‚ü©
  ¬∑ intro w
    simp only [fusionEquiv_apply, Pi.smul_apply, smul_eq_mul]
    exact mul_pos hc.1 (hx.1 w)
  ¬∑ intro w
    simp only [fusionEquiv_apply, Pi.smul_apply, smul_eq_mul]
    exact mul_pos hc.1 (hx.2.1 w)
  ¬∑ have := hx.2.2
    simp_rw [fusionEquiv_apply, Pi.smul_apply]
    have : ((fun w ‚Ü¶ c ‚Ä¢ x w.val, fun w ‚Ü¶ (c ‚Ä¢ x w.val : ‚Ñù)) : E K) =
        c ‚Ä¢ ((fun w ‚Ü¶ x w.val, fun w ‚Ü¶ x w.val) : E K) := by
      simp_rw [Prod.smul_mk, Pi.smul_def, smul_eq_mul, Complex.ofReal_mul, Complex.real_smul]
    rw [this]
    refine smul_normLessThanOne_subset K (c := c) ?_ ?_ ?_
    ¬∑ exact ne_of_gt hc.1
    ¬∑ rw [abs_eq_self.mpr hc.1.le]
      exact hc.2
    ¬∑ rwa [Set.smul_mem_smul_set_iff‚ÇÄ (ne_of_gt hc.1)]

theorem normLessThanOne‚ÇÇ_eq_image : normLessThanOne‚ÇÇ K = (normUnitsEval K) '' (S K) := by
  ext x
  refine ‚ü®?_, ?_‚ü©
  ¬∑ rintro ‚ü®hx‚ÇÅ, hx‚ÇÇ, hx‚ÇÉ‚ü©
    obtain ‚ü®d, hd‚ÇÄ, hd‚ÇÅ, hx‚ÇÑ‚ü© := exists_mem_smul_normEqOne hx‚ÇÉ
    have : d‚Åª¬π ‚Ä¢ x ‚àà {x | x ‚àà normLessThanOne‚ÇÇ K ‚àß
        mixedEmbedding.norm (‚ü®fun w ‚Ü¶ x w.val, fun w ‚Ü¶ x w.val‚ü©) = 1} := by
      rw [Set.mem_smul_set_iff_inv_smul_mem‚ÇÄ (ne_of_gt hd‚ÇÄ), Set.mem_setOf_eq] at hx‚ÇÑ
      simp_rw [fusionEquiv_apply, Prod.smul_mk, Pi.smul_def, smul_eq_mul, Complex.real_smul] at hx‚ÇÑ
      refine ‚ü®‚ü®?_, ?_, ‚ü®?_, ?_‚ü©‚ü©, ?_‚ü©
      ¬∑ exact fun w ‚Ü¶ mul_pos (inv_pos.mpr hd‚ÇÄ) (hx‚ÇÅ w)
      ¬∑ exact fun w ‚Ü¶ mul_pos (inv_pos.mpr hd‚ÇÄ) (hx‚ÇÇ w)
      ¬∑ simp only [fusionEquiv_apply, Pi.smul_apply, smul_eq_mul, Complex.ofReal_mul]
        exact hx‚ÇÑ.1
      ¬∑ simp only [fusionEquiv_apply, Pi.smul_apply, smul_eq_mul, Complex.ofReal_mul]
        rw [hx‚ÇÑ.2]
      ¬∑ simp only [Pi.smul_apply, smul_eq_mul, Complex.ofReal_mul]
        exact hx‚ÇÑ.2
    rw [normEqOne‚ÇÇ_eq_image] at this
    obtain ‚ü®c, hc‚ÇÄ, hc‚ÇÅ‚ü© := this
    refine ‚ü®?_, ?_, ?_‚ü©
    ¬∑ exact fun w ‚Ü¶ if hw : w = w‚ÇÄ then d else c ‚ü®w, hw‚ü©
    ¬∑ rw [S, Set.mem_univ_pi]
      intro w
      by_cases hw : w = w‚ÇÄ
      ¬∑ rw [dif_pos hw, if_pos hw]
        exact ‚ü®hd‚ÇÄ, hd‚ÇÅ‚ü©
      ¬∑ rw [dif_neg hw, if_neg hw]
        exact hc‚ÇÄ ‚ü®w, hw‚ü© (Set.mem_univ _)
    ¬∑ rw [normUnitsEval]
      simp only [‚ÜìreduceDite, ne_eq, Subtype.coe_eta, dite_eq_ite]
      conv_lhs =>
        enter [2, _w, 2, w]
        rw [if_neg w.prop]
      rw [hc‚ÇÅ, smul_inv_smul‚ÇÄ]
      exact ne_of_gt hd‚ÇÄ
  ¬∑ rintro ‚ü®c, hc, rfl‚ü©
    rw [normUnitsEval]
    refine smul_mem_normLessThanOne‚ÇÇ K ?_ ?_
    ¬∑ have : normUnitsEvalProd K (fun w ‚Ü¶ c w) ‚àà
          (normUnitsEvalProd K) '' (Set.univ.pi fun _ ‚Ü¶ Set.Ico 0 1) := by
        refine ‚ü®fun w ‚Ü¶ c w, ?_, rfl‚ü©
        rw [Set.mem_univ_pi]
        intro w
        specialize hc w (Set.mem_univ _)
        simp_rw [if_neg w.prop] at hc
        exact hc
      rw [‚Üê normEqOne‚ÇÇ_eq_image] at this
      exact this.1
    ¬∑ rw [S, Set.mem_univ_pi] at hc
      specialize hc w‚ÇÄ
      rwa [if_pos rfl] at hc

def normUnitsEvalSingle (i : InfinitePlace K) (c : InfinitePlace K ‚Üí ‚Ñù) : InfinitePlace K ‚Üí ‚Ñù :=
  if hi : i = w‚ÇÄ then fun _ ‚Ü¶ c w‚ÇÄ else normUnits K ‚ü®i, hi‚ü© ^ c i

theorem prod_normUnitsEvalSingle_apply (c : InfinitePlace K ‚Üí ‚Ñù) (w : InfinitePlace K) :
    ‚àè i, normUnitsEvalSingle K i c w = normUnitsEval K c w := by
  simp_rw [normUnitsEvalSingle, normUnitsEval]
  unfold normUnitsEvalProd
  rw [‚Üê Finset.univ.mul_prod_erase _ (Finset.mem_univ w‚ÇÄ), dif_pos rfl]
  rw [Finset.prod_subtype (Finset.univ.erase w‚ÇÄ) (p := fun w ‚Ü¶ w ‚â† w‚ÇÄ), Pi.smul_apply, smul_eq_mul]
  congr 2 with i
  rw [dif_neg i.prop, Pi.pow_apply]
  intro _
  simp_rw [Finset.mem_erase, Finset.mem_univ, and_true]

def FDeriv_normUnitsEvalSingle (i w : InfinitePlace K) (c : InfinitePlace K ‚Üí ‚Ñù) :
    (InfinitePlace K ‚Üí ‚Ñù) ‚ÜíL[‚Ñù] ‚Ñù := by
  exact if hi : i = w‚ÇÄ then ContinuousLinearMap.proj w‚ÇÄ else
    (normUnits K ‚ü®i, hi‚ü© w ^ (c i) * (normUnits K ‚ü®i, hi‚ü© w).log) ‚Ä¢ ContinuousLinearMap.proj i

theorem hasFDeriv_normUnitsEvalSingle (i w : InfinitePlace K) (x : InfinitePlace K ‚Üí ‚Ñù) :
    HasFDerivAt (fun x ‚Ü¶ normUnitsEvalSingle K i x w) (FDeriv_normUnitsEvalSingle K i w x) x := by
  unfold normUnitsEvalSingle
  unfold FDeriv_normUnitsEvalSingle
  split_ifs
  ¬∑ exact hasFDerivAt_apply w‚ÇÄ x
  ¬∑ exact HasFDerivAt.const_rpow (hasFDerivAt_apply i x) (normUnits_pos K _ w)

def jacobianCoeff (w i : InfinitePlace K) : (InfinitePlace K ‚Üí ‚Ñù) ‚Üí ‚Ñù :=
    fun c ‚Ü¶ if hi : i = w‚ÇÄ then 1 else (c w‚ÇÄ) * (normUnits K ‚ü®i, hi‚ü© w).log

def jacobian : (InfinitePlace K ‚Üí ‚Ñù) ‚Üí (InfinitePlace K ‚Üí ‚Ñù) ‚ÜíL[‚Ñù] InfinitePlace K ‚Üí ‚Ñù := by
  intro c
  refine ContinuousLinearMap.pi ?_
  intro i
  exact (normUnitsEvalProd K (fun w ‚Ü¶ c w) i ‚Ä¢
    ‚àë w, (jacobianCoeff K i w c) ‚Ä¢ ContinuousLinearMap.proj w)

theorem jacobian_det (c : InfinitePlace K ‚Üí ‚Ñù) :
    |(jacobian K c).det| =
      (‚àè w : {w : InfinitePlace K // w.IsComplex }, normUnitsEvalProd K (fun w ‚Ü¶ c w) w)‚Åª¬π *
        2‚Åª¬π ^ NrComplexPlaces K * |c w‚ÇÄ| ^ (rank K) * (finrank ‚Ñö K) * regulator K := by
  have : LinearMap.toMatrix' (jacobian K c).toLinearMap =
      Matrix.of fun w i ‚Ü¶ normUnitsEvalProd K (fun w ‚Ü¶ c w) w * jacobianCoeff K w i c := by
    ext; simp [jacobian]
  rw [ContinuousLinearMap.det, ‚Üê LinearMap.det_toMatrix', this]
  rw [Matrix.det_mul_column, prod_normUnitsEvalProd, ‚Üê Matrix.det_transpose]
  simp_rw [jacobianCoeff]
  simp_rw [normUnits]
  rw [mul_assoc, regulator_eq_det' K (equivFinRank K)]
  have : |c w‚ÇÄ| ^ rank K = |‚àè w : InfinitePlace K, if w = w‚ÇÄ then 1 else c w‚ÇÄ| := by
    rw [Finset.prod_ite, Finset.prod_const_one, Finset.prod_const, one_mul, abs_pow]
    rw [Finset.filter_ne', Finset.card_erase_of_mem (Finset.mem_univ _), Finset.card_univ, rank]
  rw [this, mul_assoc, ‚Üê abs_mul, ‚Üê Matrix.det_mul_column]
  have : (2 : ‚Ñù)‚Åª¬π ^ NrComplexPlaces K = |‚àè w : InfinitePlace K, (mult w : ‚Ñù)‚Åª¬π| := by
    rw [Finset.abs_prod]
    simp_rw [mult, Nat.cast_ite, Nat.cast_one, Nat.cast_ofNat, apply_ite, abs_inv, abs_one, inv_one,
      Nat.abs_ofNat, Finset.prod_ite, Finset.prod_const_one, Finset.prod_const, one_mul]
    rw [Finset.filter_not, Finset.card_univ_diff, ‚Üê Fintype.card_subtype]
    rw [card_eq_nrRealPlaces_add_nrComplexPlaces, ‚Üê NrRealPlaces, add_tsub_cancel_left]
  rw [this, mul_assoc, ‚Üê abs_mul, ‚Üê Matrix.det_mul_row, abs_mul]
  congr
  ¬∑ rw [abs_eq_self.mpr]
    rw [inv_nonneg]
    exact Finset.prod_nonneg fun _ _ ‚Ü¶ (normUnitsEvalProd_pos K _ _).le
  ¬∑ ext
    simp only [Matrix.transpose_apply, Matrix.of_apply, ite_mul, one_mul, mul_ite]
    split_ifs
    ¬∑ rw [inv_mul_cancel]
      rw [Nat.cast_ne_zero]
      exact mult_ne_zero
    ¬∑ ring_nf
      simp

theorem hasFDeriv_normUnitsEval (c : InfinitePlace K ‚Üí ‚Ñù) :
    HasFDerivAt (normUnitsEval K) (jacobian K c) c := by
  rw [hasFDerivAt_pi']
  intro w
  simp_rw [normUnitsEval]
  have t‚ÇÄ := fun i ‚Ü¶ hasFDeriv_normUnitsEvalSingle K i w c
  have := HasFDerivAt.finset_prod (u := Finset.univ) (fun i _ ‚Ü¶ t‚ÇÄ i)
  simp at this
  convert this
  ¬∑ rw [‚Üê Finset.univ.mul_prod_erase _ (Finset.mem_univ w‚ÇÄ), Pi.smul_apply, smul_eq_mul]
    congr
    ¬∑ rw [normUnitsEvalSingle, dif_pos rfl]
    ¬∑ simp_rw [normUnitsEvalProd]
      rw [Finset.prod_subtype (Finset.univ.erase w‚ÇÄ) (p := fun w ‚Ü¶ w ‚â† w‚ÇÄ)]
      refine Finset.prod_congr rfl ?_
      intro i _
      rw [normUnitsEvalSingle, dif_neg i.prop, Subtype.coe_eta, Pi.pow_apply]
      intro _
      simp_rw [Finset.mem_erase, Finset.mem_univ, and_true]
  ¬∑ unfold jacobian
    rw [ContinuousLinearMap.proj_pi]
    unfold jacobianCoeff
    rw [Finset.smul_sum]
    refine Fintype.sum_congr _ _ ?_
    intro i
    by_cases hi : i = w‚ÇÄ
    ¬∑ unfold normUnitsEvalSingle
      unfold FDeriv_normUnitsEvalSingle
      simp_rw [hi, dif_pos, one_smul]
      rw [Finset.prod_subtype (Finset.univ.erase w‚ÇÄ) (p := fun w ‚Ü¶ w ‚â† w‚ÇÄ)]
      simp_rw [Subtype.coe_eta, dite_eq_ite, ite_apply]
      rw [Finset.univ.prod_ite_of_false]
      rfl
      intro i _
      exact i.prop
      intro _
      simp_rw [Finset.mem_erase, Finset.mem_univ, and_true]
    ¬∑ simp_rw [dif_neg hi]
      unfold FDeriv_normUnitsEvalSingle
      simp_rw [dif_neg hi]
      rw [show normUnits K ‚ü®i, hi‚ü© w ^ c i = normUnitsEvalSingle K i c w by
        rw [normUnitsEvalSingle, dif_neg hi, Pi.pow_apply]]
      simp_rw [smul_smul, ‚Üê mul_assoc]
      rw [Finset.univ.prod_erase_mul]
      rw [prod_normUnitsEvalSingle_apply, normUnitsEval]
      congr 2
      rw [Pi.smul_apply, smul_eq_mul, mul_comm]
      exact Finset.mem_univ _

open scoped Real

open ENNReal in
theorem volume_normLessOne :
    (volume (normLessThanOne K)).toReal =
      2 ^ NrRealPlaces K * œÄ ^ NrComplexPlaces K * regulator K := by

  classical

  have hg‚ÇÅ : 0 ‚â§ regulator K := le_of_lt (regulator_pos K)
  have hg‚ÇÉ : 0 ‚â§ (finrank ‚Ñö K : ‚Ñù) := Nat.cast_nonneg _
  have hg‚ÇÑ : 0 ‚â§ (2 : ‚Ñù)‚Åª¬π ^ NrComplexPlaces K := by
    refine pow_nonneg ?_ _
    exact inv_nonneg.mpr zero_le_two

  rw [volume_normLessThanOne, volume_normLessOne‚ÇÄ]
  rw [‚Üê (fusionEquiv_measure_preserving K).set_lintegral_comp_preimage]
  rw [show (fusionEquiv K) ‚Åª¬π' normLessThanOne‚ÇÅ K = normLessThanOne‚ÇÇ K by rfl]
  rw [normLessThanOne‚ÇÇ_eq_image]
  rw [lintegral_image_eq_lintegral_abs_det_fderiv_mul volume _
    (fun c _ ‚Ü¶ HasFDerivAt.hasFDerivWithinAt (hasFDeriv_normUnitsEval K c))]
  have h_rank : NrComplexPlaces K + rank K = finrank ‚Ñö K - 1 := by
    rw [rank, ‚Üê Nat.add_sub_assoc NeZero.one_le, card_eq_nrRealPlaces_add_nrComplexPlaces,
      ‚Üê card_add_two_mul_card_eq_rank]
    ring_nf
  have h_int : ‚à´‚Åª x in S K, .ofReal (|x w‚ÇÄ| ^ (finrank ‚Ñö K - 1)) = .ofReal (finrank ‚Ñö K : ‚Ñù)‚Åª¬π := by
    rw [volume_pi, ‚Üê lintegral_indicator _ (measurable_S K), lintegral_eq_lmarginal_univ 0,
      lmarginal_erase' _ ?_ (Finset.mem_univ w‚ÇÄ)]
    swap
    ¬∑ refine Measurable.indicator ?_ (measurable_S K)
      refine Measurable.ennreal_ofReal ?_
      refine Measurable.pow_const ?_ _
      exact Measurable.norm (measurable_pi_apply w‚ÇÄ)
    have : ‚àÄ x x·µ¢,
        (S K).indicator
          (fun x ‚Ü¶ ENNReal.ofReal (|x w‚ÇÄ| ^ (finrank ‚Ñö K - 1))) (Function.update x w‚ÇÄ x·µ¢) =
        (Set.Ioc 0 1).indicator (fun x ‚Ü¶ .ofReal  (x ^ (finrank ‚Ñö K - 1))) x·µ¢ *
          (Set.univ.pi fun _ : { x // x ‚àà Finset.univ.erase w‚ÇÄ } ‚Ü¶ Set.Ico 0 1).indicator 1
            (fun w ‚Ü¶ x w.val) := by
      intro x x·µ¢
      rw [Set.indicator_apply, Set.indicator_apply, Function.update_apply]
      split_ifs with h‚ÇÅ h‚ÇÇ h‚ÇÉ h‚ÇÑ h‚ÇÖ
      ¬∑ rw [Set.indicator_of_mem, Pi.one_apply, mul_one, abs_eq_self.mpr h‚ÇÉ.1.le]
        intro w _
        dsimp
        simp only [S, Set.mem_pi, Set.mem_univ, true_implies] at h‚ÇÅ
        specialize h‚ÇÅ w
        rwa [Function.update_apply, if_neg (Finset.mem_erase.mp w.prop).1,
          if_neg (Finset.mem_erase.mp w.prop).1] at h‚ÇÅ
      ¬∑ exfalso
        simp [S] at h‚ÇÅ
        specialize h‚ÇÅ w‚ÇÄ
        rw [Function.update_apply, if_pos rfl, if_pos rfl] at h‚ÇÅ
        exact h‚ÇÉ h‚ÇÅ
      ¬∑ simp [not_true_eq_false] at h‚ÇÇ
      ¬∑ simp [not_true_eq_false] at h‚ÇÇ
      ¬∑ simp [S, Set.mem_pi, Set.mem_univ, true_implies, Function.update_apply] at h‚ÇÅ
        obtain ‚ü®w, hw‚ü© := h‚ÇÅ
        by_cases hw' : w = w‚ÇÄ
        ¬∑ rw [if_pos hw', if_pos hw'] at hw
          exfalso
          exact hw h‚ÇÖ
        ¬∑ rw [if_neg hw', if_neg hw'] at hw
          rw [Set.indicator_of_not_mem, mul_zero]
          simp_rw [Set.mem_pi, Set.mem_univ, true_implies, Subtype.forall, Finset.mem_erase,
            Finset.mem_univ, and_true, not_forall]
          exact ‚ü®w, hw', hw‚ü©
      ¬∑ rw [zero_mul]
    simp_rw [this]
    have : ‚àÄ c : InfinitePlace K ‚Üí ‚Ñù,
        ((Set.univ.pi fun _ : {x // x ‚àà Finset.univ.erase w‚ÇÄ} ‚Ü¶ Set.Ico 0 1).indicator
          1 fun w ‚Ü¶ c w.val : ‚Ñù‚â•0‚àû) ‚â† ‚ä§ := by
      intro c
      rw [Set.indicator_apply]
      split_ifs <;> norm_num
    simp_rw [lintegral_mul_const' _ _ (this _), lintegral_indicator _ measurableSet_Ioc]
    have : ‚à´‚Åª (x : ‚Ñù) in Set.Ioc 0 1, ENNReal.ofReal (x ^ (finrank ‚Ñö K - 1)) =
        .ofReal (finrank ‚Ñö K : ‚Ñù)‚Åª¬π := by
      rw [‚Üê ofReal_integral_eq_lintegral_ofReal, ‚Üê intervalIntegral.integral_of_le
        zero_le_one, integral_pow, one_pow, zero_pow (Nat.add_one_ne_zero _), sub_zero,
        Nat.cast_sub, Nat.cast_one,
        sub_add_cancel, one_div]
      ¬∑ exact finrank_pos
      ¬∑ change IntegrableOn (fun x ‚Ü¶ x ^ (finrank ‚Ñö K - 1)) _ _
        rw [‚Üê intervalIntegrable_iff_integrableOn_Ioc_of_le zero_le_one]
        exact intervalIntegral.intervalIntegrable_pow _
      ¬∑ refine ae_le_of_ae_lt ?_
        rw [ae_restrict_iff_subtype measurableSet_Ioc]
        filter_upwards with ‚ü®a, ha‚ü©
        refine pow_pos  ha.1 _
    simp_rw [this, ‚Üê smul_eq_mul, ‚Üê Pi.smul_def]
    rw [lmarginal_const_smul]
    ¬∑ rw [lmarginal]
      simp_rw [Function.updateFinset_def]
      conv_lhs =>
        enter [2, 2, y, 3, w]
        rw [dif_pos w.prop]
      rw [lintegral_indicator_one, Measure.pi_pi]
      simp_rw [Real.volume_Ico, sub_zero, ofReal_one, Finset.prod_const_one, mul_one]
      exact MeasurableSet.univ_pi fun _ ‚Ü¶ measurableSet_Ico
    ¬∑ refine Measurable.indicator measurable_const ?_
      change MeasurableSet {i | _}
      refine MeasurableSet.congr (s := ‚ãÇ w : {w // w ‚àà Finset.univ.erase w‚ÇÄ},
        (Set.univ.pi fun z : InfinitePlace K ‚Ü¶ if z = w.val then Set.Ico 0 1 else Set.univ)) ?_ ?_
        -- {i | i w.val ‚àà Set.Ico 0 1}) ?_ ?_
      ¬∑ refine  MeasurableSet.iInter fun _ ‚Ü¶ ?_
        refine MeasurableSet.pi ?_ ?_
        exact Set.countable_univ
        intro _ _
        refine MeasurableSet.ite' ?_ ?_
        exact fun _ ‚Ü¶ measurableSet_Ico
        exact fun _ ‚Ü¶ MeasurableSet.univ
      ¬∑ ext
        simp only [Set.mem_iInter, Set.mem_pi, Set.mem_univ, Set.mem_ite_univ_right, Set.mem_Ico,
          true_implies, forall_eq, Subtype.forall, Finset.mem_erase, ne_eq, Finset.mem_univ,
          and_true, Set.mem_setOf_eq]
  calc
    _ = 2 ^ NrRealPlaces K * (2 * œÄ) ^ NrComplexPlaces K *
          (‚à´‚Åª x in S K, .ofReal |(jacobian K x).det| * .ofReal
            (‚àè w : { w : InfinitePlace K // w.IsComplex }, |normUnitsEval K x w|)).toReal := by
      simp only [toReal_mul, toReal_pow, toReal_ofNat, coe_toReal, NNReal.coe_real_pi,
        coe_finset_prod, mul_assoc, ‚Üê norm_toNNReal, Real.norm_eq_abs, fusionEquiv_apply,
        ofReal_prod_of_nonneg (fun _ _ ‚Ü¶ abs_nonneg _)]
      rfl
    _ = 2 ^ NrRealPlaces K * (2 * œÄ) ^ NrComplexPlaces K *
          (‚à´‚Åª x in S K,
            .ofReal (2‚Åª¬π ^ NrComplexPlaces K * regulator K * finrank ‚Ñö K) *
            (.ofReal ((‚àè w : { w : InfinitePlace K // w.IsComplex },
              normUnitsEvalProd K (fun w ‚Ü¶ x w) w)‚Åª¬π) *
            .ofReal (‚àè w : { w : InfinitePlace K // w.IsComplex },
              normUnitsEvalProd K (fun w ‚Ü¶ x w) w) *
            .ofReal (|x w‚ÇÄ| ^
              (Fintype.card {w : InfinitePlace K // w.IsComplex} + rank K)))).toReal := by
      have hl‚ÇÇ : ‚àÄ (c : InfinitePlace K ‚Üí ‚Ñù) (w : {w : InfinitePlace K // w.IsComplex}),
          0 ‚â§ normUnitsEvalProd K (fun z ‚Ü¶ c z) w.val := by
        intro _ _
        refine le_of_lt ?_
        exact normUnitsEvalProd_pos K _ _
      simp_rw [jacobian_det, normUnitsEval, Pi.smul_apply, smul_eq_mul, abs_mul,
        abs_eq_self.mpr (hl‚ÇÇ _ _), Finset.prod_mul_distrib, Finset.prod_const, Finset.card_univ,
        pow_add]
      have hl‚ÇÉ : ‚àÄ x : InfinitePlace K ‚Üí ‚Ñù,
          0 ‚â§ (‚àè w : {w : InfinitePlace K // w.IsComplex},
            normUnitsEvalProd K (fun w ‚Ü¶ x ‚Üëw) w.val)‚Åª¬π := by
        intro _
        rw [inv_nonneg]
        refine Finset.univ.prod_nonneg fun _ _ ‚Ü¶ ?_
        refine le_of_lt ?_
        exact normUnitsEvalProd_pos K _ _
      have hl‚ÇÑ : ‚àÄ c : InfinitePlace K ‚Üí ‚Ñù, 0 ‚â§ |c w‚ÇÄ| ^ rank K := by
        intro _
        refine pow_nonneg (abs_nonneg _) _
      have hl‚ÇÖ :  ‚àÄ c : InfinitePlace K ‚Üí ‚Ñù,
          0 ‚â§ |c w‚ÇÄ| ^ Fintype.card {w : InfinitePlace K // w.IsComplex} := by
        intro _
        refine pow_nonneg (abs_nonneg _) _
      simp_rw [mul_assoc, ofReal_mul (hl‚ÇÉ _), ofReal_mul hg‚ÇÑ, ofReal_mul (hl‚ÇÑ _), ofReal_mul hg‚ÇÉ,
        ofReal_mul hg‚ÇÅ, ofReal_mul (hl‚ÇÖ _)]
      congr; ext; ring
    _ =  2 ^ NrRealPlaces K *  œÄ ^ NrComplexPlaces K * regulator K * 2 ^ NrComplexPlaces K *
          (2 ^ NrComplexPlaces K)‚Åª¬π * finrank ‚Ñö K *
          (‚à´‚Åª x in S K, .ofReal (|x w‚ÇÄ| ^ (finrank ‚Ñö K - 1))).toReal := by
      rw [lintegral_const_mul' _ _ ofReal_ne_top, ofReal_mul (by positivity),
        ofReal_mul (by positivity)]
      have hl‚ÇÇ : ‚àÄ c : InfinitePlace K ‚Üí ‚Ñù, 0 <
          (‚àè w : { w : InfinitePlace K // w.IsComplex }, normUnitsEvalProd K (fun w ‚Ü¶ c w) w) := by
        intro _
        refine Finset.univ.prod_pos fun _ _ ‚Ü¶ normUnitsEvalProd_pos K _ _
      have hl‚ÇÉ : ‚àÄ c : InfinitePlace K ‚Üí ‚Ñù,
          ENNReal.ofReal (‚àè w : { w : InfinitePlace K // w.IsComplex },
            normUnitsEvalProd K (fun w ‚Ü¶ c w) w) ‚â† 0 := by
        intro _
        rw [ne_eq, ENNReal.ofReal_eq_zero, not_le]
        exact hl‚ÇÇ _
      have hl‚ÇÑ : ‚àÄ c : InfinitePlace K ‚Üí ‚Ñù,
          ENNReal.ofReal (‚àè w : { w : InfinitePlace K // w.IsComplex },
            normUnitsEvalProd K (fun w ‚Ü¶ c w) w) ‚â† ‚ä§ := by
        intro _
        exact ENNReal.ofReal_ne_top
      simp_rw [toReal_mul, toReal_ofReal hg‚ÇÅ, toReal_ofReal hg‚ÇÑ, toReal_ofReal hg‚ÇÉ,
        ofReal_inv_of_pos (hl‚ÇÇ _), ENNReal.inv_mul_cancel (hl‚ÇÉ _) (hl‚ÇÑ _), one_mul, mul_pow,
        inv_pow, ‚Üê mul_assoc, h_rank]
      congr 2
      ring
    _ = 2 ^ NrRealPlaces K * œÄ ^ NrComplexPlaces K * regulator K := by
      rw [h_int, toReal_ofReal, mul_assoc, mul_inv_cancel, mul_one, mul_assoc, mul_inv_cancel,
        mul_one]
      ¬∑ refine pow_ne_zero _ two_ne_zero
      ¬∑ rw [Nat.cast_ne_zero]
        refine ne_of_gt ?_
        exact finrank_pos
      ¬∑ rw [inv_nonneg]
        exact Nat.cast_nonneg _
  ¬∑ exact normUnitsEval_injOn K
  ¬∑ exact measurable_S K
  ¬∑ exact measurableSet_normLessThanOne‚ÇÅ K
  ¬∑ refine Finset.univ.measurable_prod fun i _ ‚Ü¶ ?_
    rw [measurable_coe_nnreal_ennreal_iff]
    refine Measurable.nnnorm ?_
    exact Measurable.comp (measurable_pi_apply _) measurable_snd

#exit

def normUnitsEval‚ÇÄ (i w : InfinitePlace K) : (InfinitePlace K ‚Üí ‚Ñù) ‚Üí ‚Ñù :=
  fun x ‚Ü¶ if hi : i = w‚ÇÄ then x w‚ÇÄ else normUnits K ‚ü®i, hi‚ü© w ^ (x i)

theorem prod_normUnitsEval‚ÇÄ {i : InfinitePlace K} (hi : i ‚â† w‚ÇÄ) {c : InfinitePlace K ‚Üí ‚Ñù} :
    ‚àè w : InfinitePlace K, normUnitsEval‚ÇÄ K i w c = 1 := by
  simp_rw [normUnitsEval‚ÇÄ, dif_neg hi, normUnits]
  rw [Real.finset_prod_rpow]
  rw [prod_eq_abs_norm]
  simp_rw [Units.norm, Rat.cast_one, Real.one_rpow]
  intro w _
  refine pow_nonneg ?_ _
  exact apply_nonneg _ _

def FDeriv_normUnitsEval‚ÇÄ (i w : InfinitePlace K) (x : InfinitePlace K ‚Üí ‚Ñù) :
    (InfinitePlace K ‚Üí ‚Ñù) ‚ÜíL[‚Ñù] ‚Ñù := by
  exact if hi : i = w‚ÇÄ then ContinuousLinearMap.proj w‚ÇÄ else
    (normUnitsEval‚ÇÄ K i w x * (normUnits K ‚ü®i, hi‚ü© w).log) ‚Ä¢ ContinuousLinearMap.proj i

theorem hasFDeriv_normUnitsEval‚ÇÄ (i w : InfinitePlace K) (x : InfinitePlace K ‚Üí ‚Ñù) :
    HasFDerivAt (normUnitsEval‚ÇÄ K i w) (FDeriv_normUnitsEval‚ÇÄ K i w x) x := by
  unfold normUnitsEval‚ÇÄ
  unfold FDeriv_normUnitsEval‚ÇÄ
  split_ifs
  ¬∑ exact hasFDerivAt_apply w‚ÇÄ x
  ¬∑ unfold normUnitsEval‚ÇÄ
    rw [dif_neg]
    exact HasFDerivAt.const_rpow (hasFDerivAt_apply i x) (normUnits_pos K _ _)

def normUnitsEval : (InfinitePlace K ‚Üí ‚Ñù) ‚Üí InfinitePlace K ‚Üí ‚Ñù :=
  fun x w ‚Ü¶ ‚àè i, normUnitsEval‚ÇÄ K i w x

def prodNormUnitsEval (w : InfinitePlace K) (c : InfinitePlace K ‚Üí ‚Ñù) : ‚Ñù :=
  ‚àè i ‚àà Finset.univ.erase w‚ÇÄ, normUnitsEval‚ÇÄ K i w c

theorem prod_prodNormUnitsEval {c : InfinitePlace K ‚Üí ‚Ñù} :
    ‚àè i, prodNormUnitsEval K i c = 1 := by
  simp_rw [prodNormUnitsEval]
  rw [Finset.prod_comm]
  rw [Finset.prod_congr rfl fun w hw ‚Ü¶ prod_normUnitsEval‚ÇÄ K (Finset.mem_erase.mp hw).1]
  rw [Finset.prod_const_one]

def jacobianCoeff (w i : InfinitePlace K) : (InfinitePlace K ‚Üí ‚Ñù) ‚Üí ‚Ñù :=
    fun c ‚Ü¶ if hi : i = w‚ÇÄ then 1 else (c w‚ÇÄ) * (normUnits K ‚ü®i, hi‚ü© w).log

def jacobian : (InfinitePlace K ‚Üí ‚Ñù) ‚Üí (InfinitePlace K ‚Üí ‚Ñù) ‚ÜíL[‚Ñù] InfinitePlace K ‚Üí ‚Ñù := by
  intro c
  refine ContinuousLinearMap.pi ?_
  intro i
  exact (prodNormUnitsEval K i c ‚Ä¢ ‚àë w, (jacobianCoeff K i w c) ‚Ä¢ ContinuousLinearMap.proj w)

theorem jacobian_det (c : InfinitePlace K ‚Üí ‚Ñù) :
    |(jacobian K c).det| = |c w‚ÇÄ| ^ (rank K) * regulator K := by
  have : LinearMap.toMatrix' (jacobian K c) =
      Matrix.of fun i w ‚Ü¶ prodNormUnitsEval K i c * jacobianCoeff K i w c := by
    ext; simp [jacobian]
  rw [ContinuousLinearMap.det, ‚Üê LinearMap.det_toMatrix', this]
  rw [Matrix.det_mul_column]
  rw [prod_prodNormUnitsEval, one_mul, ‚Üê Matrix.det_transpose]
  simp_rw [jacobianCoeff, normUnits, Real.log_pow]
  rw [regulator_eq_det' K (equivFinRank K)] -- FIXME
  have : |c w‚ÇÄ| ^ rank K = |‚àè w : InfinitePlace K, if w = w‚ÇÄ then 1 else c w‚ÇÄ| := by
    rw [Finset.prod_ite, Finset.prod_const_one, Finset.prod_const, one_mul, abs_pow,
      ‚Üê Units.finrank_eq_rank]
    congr
    rw [‚Üê Fintype.card_subtype]
    exact finrank_fintype_fun_eq_card ‚Ñù
  rw [this, ‚Üê abs_mul]
  rw [‚Üê Matrix.det_mul_column]
  simp_rw [Matrix.of_apply, ite_mul, one_mul]
  congr
  ext
  simp only [Matrix.transpose_apply, Matrix.of_apply]
  split_ifs
  ¬∑ ring
  ¬∑ rfl

def S : Set (InfinitePlace K ‚Üí ‚Ñù) :=
  Set.univ.pi fun w ‚Ü¶ if w = w‚ÇÄ then Set.Ioc 0 1 else Set.Ico 0 1

theorem normLessThanOne‚ÇÇ_eq :
    (normLessThanOne‚ÇÇ K) = normUnitsEval K '' (S K) := by
  ext x
  refine ‚ü®fun hx ‚Ü¶ ?_, fun hx ‚Ü¶ ?_‚ü©
  ¬∑ sorry
  ¬∑ rw [Set.mem_image] at hx
    obtain ‚ü®c, hc, rfl‚ü© := hx
    refine ‚ü®?_, ?_, ‚ü®?_, ?_‚ü©, ?_‚ü©
    ¬∑
      sorry
    ¬∑
      sorry
    ¬∑
      sorry
    ¬∑
      sorry
    ¬∑
      sorry

theorem hasFDeriv_normUnitsEval (c : InfinitePlace K ‚Üí ‚Ñù) :
    HasFDerivAt (ùïú := ‚Ñù) (normUnitsEval K) (jacobian K c) c := by
  rw [hasFDerivAt_pi']
  intro w
  simp_rw [normUnitsEval]
  have t‚ÇÄ := fun i ‚Ü¶ hasFDeriv_normUnitsEval‚ÇÄ K i w c
  have := HasFDerivAt.finset_prod (u := Finset.univ) (fun i _ ‚Ü¶ t‚ÇÄ i)
  simp at this
  -- unfold FDeriv_normUnitsEval‚ÇÄ at this
  -- simp at this
  convert this
  rw [‚Üê Finset.univ.sum_erase_add _ (Finset.mem_univ w‚ÇÄ)]
  rw [Finset.sum_subtype (p := fun x ‚Ü¶ x ‚â† w‚ÇÄ)]
  unfold FDeriv_normUnitsEval‚ÇÄ
  simp_rw [Subtype.coe_eta, dite_eq_ite, smul_ite, dif_pos]
  rw [Finset.univ.sum_ite_of_false]
  simp_rw [smul_smul, ‚Üê mul_assoc]
  simp_rw [Finset.univ.prod_erase_mul _ sorry]
  simp_rw [‚Üê smul_smul]
  rw [‚Üê Finset.smul_sum]
  rw [‚Üê Finset.univ.prod_erase_mul _ (Finset.mem_univ w‚ÇÄ)]
  rw [‚Üê smul_smul]
  rw [Finset.smul_sum]
  unfold jacobian
  rw [ContinuousLinearMap.proj_pi]
  unfold jacobianCoeff
  unfold prodNormUnitsEval
  rw [‚Üê Finset.univ.sum_erase_add _ (Finset.mem_univ w‚ÇÄ)]
  rw [dif_pos rfl]
  ext
  rw [one_smul]
  rw [smul_add]
  congr 3
  ¬∑ simp_rw [normUnitsEval‚ÇÄ, dif_pos, dite_smul]
    sorry
  ¬∑ sorry
  ¬∑ sorry

theorem volume_normLessOne‚ÇÅ :
    (volume (normLessThanOne K)).toReal = regulator K := by
  rw [volume_normLessThanOne, volume_normLessOne‚ÇÄ]
  rw [‚Üê (fusionEquiv_measure_preserving K).set_lintegral_comp_preimage]
  rw [show (fusionEquiv K) ‚Åª¬π' normLessThanOne‚ÇÅ K = normLessThanOne‚ÇÇ K by rfl]
  rw [normLessThanOne‚ÇÇ_eq]
  rw [lintegral_image_eq_lintegral_abs_det_fderiv_mul volume _
    (fun c _ ‚Ü¶ HasFDerivAt.hasFDerivWithinAt (hasFDeriv_normUnitsEval K c))]
  simp_rw [jacobian_det, fusionEquiv_apply, ENNReal.ofReal_mul sorry]
#exit

  ¬∑ exact fun c _ ‚Ü¶ HasFDerivAt.hasFDerivWithinAt (hasFDeriv_normUnitsEval K c)
  ¬∑ simp_rw[jacobian_det, fusionEquiv_apply, normUnitsEval]
    sorry
  ¬∑ sorry
    -- exact MeasurableSet.univ_pi fun w ‚Ü¶ if w = w‚ÇÄ then measurableSet_Ioc else
  ¬∑ intro x hx y hy hxy
    rw [Function.funext_iff] at hxy

    sorry
  ¬∑ exact measurableSet_normLessThanOne‚ÇÅ K
  ¬∑ sorry


#exit


  let s : Set (InfinitePlace K ‚Üí ‚Ñù) := Set.univ.pi fun _ ‚Ü¶ Set.Ico 0 1
  have hs : MeasurableSet s := sorry
  have hf‚ÇÅ : Set.InjOn (normUnitsEval K) s := sorry
  have hf‚ÇÇ : Measurable (normUnitsEval K) := sorry
  have hf‚ÇÉ := fun c ‚Ü¶ hasFDeriv_normUnitsEval K c
  have t‚ÇÄ := lintegral_image_eq_lintegral_abs_det_fderiv_mul volume hs (fun c _ ‚Ü¶
    HasFDerivAt.hasFDerivWithinAt (hf‚ÇÉ c)) hf‚ÇÅ (fun _ ‚Ü¶ 1)

  simp only [lintegral_const, MeasurableSet.univ, Measure.restrict_apply, Set.univ_inter, one_mul,
    mul_one] at t‚ÇÄ
  simp_rw [t‚ÇÄ, jacobian_det, ENNReal.ofReal_mul sorry]
  rw [lintegral_mul_const, ENNReal.toReal_mul, ENNReal.toReal_ofReal]
  simp_rw [@volume_pi, s]
  sorry



#exit

  rw [‚Üê MeasureTheory.integral_toReal]


  sorry

#exit
  have hf‚ÇÉ : ‚àÄ x ‚àà s, HasFDerivWithinAt (normUnitsEval K) (fDeriv_normUnitsEval K x) s x := sorry
  have t‚ÇÄ := lintegral_image_eq_lintegral_abs_det_fderiv_mul volume hs hf‚ÇÉ hf‚ÇÅ (fun _ ‚Ü¶ 1)
  simp only [lintegral_const, MeasurableSet.univ, Measure.restrict_apply, Set.univ_inter, one_mul,
    mul_one]


#exit

  rw [Finset.sum_subtype (p := fun x ‚Ü¶ x ‚â† w‚ÇÄ)] at this
  ¬∑ unfold FDeriv_normUnitsEval‚ÇÄ at this
    simp_rw [Subtype.coe_eta, dite_eq_ite, smul_ite] at this
    simp_rw [dif_pos] at this
    rw [Finset.univ.sum_ite_of_false] at this

    simp_rw [‚Üê mul_smul_comm] at this
--    simp only [ne_eq, smul_ite, ‚ÜìreduceDite] at this
--    simp only [ne_eq, Subtype.coe_eta, dite_eq_ite, smul_ite, ‚ÜìreduceDite] at this

    sorry
  ¬∑ refine fun x ‚Ü¶ ‚ü®fun hx ‚Ü¶ Finset.ne_of_mem_erase hx,
      fun hx ‚Ü¶ Finset.mem_erase.mpr ‚ü®hx, Finset.mem_univ x‚ü©‚ü©




#exit

  rw [show ‚àë x ‚àà Finset.univ.erase w‚ÇÄ, (‚àè j ‚àà Finset.univ.erase x, normUnitsEval‚ÇÄ K j w c) ‚Ä¢
    FDeriv_normUnitsEval‚ÇÄ K x w c = ‚àë x ‚àà Finset.univ.erase w‚ÇÄ, (‚àè j ‚àà Finset.univ.erase x,
    normUnitsEval‚ÇÄ K j w c) ‚Ä¢ ((normUnitsEval‚ÇÄ K x w c * (normUnits K ‚ü®x, ?_‚ü© w).log) ‚Ä¢
    ContinuousLinearMap.proj x) by sorry] at this

#exit


  rw [show (‚àë x ‚àà Finset.univ.erase (w‚ÇÄ : InfinitePlace K), if h : x = w‚ÇÄ then
    (‚àè j ‚àà Finset.univ.erase x, normUnitsEval‚ÇÄ K j w c) ‚Ä¢ ContinuousLinearMap.proj w‚ÇÄ else
    (‚àè j ‚àà Finset.univ.erase x, normUnitsEval‚ÇÄ K j w c) ‚Ä¢
        (normUnitsEval‚ÇÄ K x w c * (normUnits K ‚ü®x, h‚ü© w).log) ‚Ä¢ ContinuousLinearMap.proj x) = 0
    by sorry] at this


  rw [Finset.sum_dite_of_false (fun x hx ‚Ü¶ Finset.ne_of_mem_erase hx)] at this
  simp at this
  rw [Finset.sum_attach] at this


#exit

  rw [Finset.sum_congr rfl ?_] at this
  ¬∑ sorry
  ¬∑ sorry
  ¬∑ intro x hx
    rw [dif_neg (Finset.ne_of_mem_erase hx)]

#exit

  rw [Finset.sum_dite_of_false] at this
  ¬∑ simp at this
    sorry
  ¬∑ intro x hx
    exact Finset.ne_of_mem_erase hx
  ¬∑



#exit

  rw [fDeriv_normUnitsEval]
  rw [hasFDerivAt_pi']
  intro w
  simp only [normUnitsEval, Pi.smul_apply, smul_eq_mul]
  simp only [lin]
  rw [ContinuousLinearMap.proj_pi]
  rw [LinearMap.pi_apply_eq_sum_univ]
  rw [map_sum]
  simp only [dite_smul]
  rw [‚Üê Finset.univ.add_sum_erase _ (Finset.mem_univ w‚ÇÄ)]
  rw [dif_pos rfl]

--  rw [Finset.sum_apply_dite]
--  simp [Finset.filter_eq]

#exit

  let F := InfinitePlace K ‚Üí ‚Ñù
  have := @hasFDerivAt_single ‚Ñù (InfinitePlace K) _ _ _ (fun _ ‚Ü¶ ‚Ñù) _ _ w‚ÇÄ
  have : HasFDerivAt (fun x : F ‚Ü¶ x w‚ÇÄ)
    (ContinuousLinearMap.pi (Pi.single w (ContinuousLinearMap.id ‚Ñù _))) c := sorry

#exit


  refine hasFDerivAt_pi'' ?_
  intro w
  simp [fDeriv_normUnitsEval, ContinuousLinearMap.proj_pi]
  let F := InfinitePlace K ‚Üí ‚Ñù
  have : HasFDerivAt (fun x : F ‚Ü¶ x w‚ÇÄ) _ x := sorry

  simp [fDeriv_normUnitsEval, jacobian_normUnitsEval, Finset.prod_apply, Pi.pow_apply,
    Real.log_pow, Matrix.toLin'_apply', ContinuousLinearMap.proj_pi]
  simp [normUnitsEval]

  let F := InfinitePlace K ‚Üí ‚Ñù
  have : HasFDerivAt (fun x : F ‚Ü¶ x w‚ÇÄ)
    (ContinuousLinearMap.pi (Pi.single i (ContinuousLinearMap.id ùïú (E i)))) x := sorry





#exit
  split_ifs

theorem volume_normLessOne‚ÇÅ :
    (volume (normLessThanOne‚ÇÅ K)).toReal = regulator K := by
  let s : Set (InfinitePlace K ‚Üí ‚Ñù) := Set.univ.pi fun _ ‚Ü¶ Set.Ico 0 1
  have hs : MeasurableSet s := sorry
  have hf‚ÇÅ : Set.InjOn (normUnitsEval K) s := sorry
  have hf‚ÇÇ : Measurable (normUnitsEval K) := sorry
  have hf‚ÇÉ : ‚àÄ x ‚àà s, HasFDerivWithinAt (normUnitsEval K) (fDeriv_normUnitsEval K x) s x := sorry
  have t‚ÇÄ := lintegral_image_eq_lintegral_abs_det_fderiv_mul volume hs hf‚ÇÉ hf‚ÇÅ (fun _ ‚Ü¶ 1)
  simp only [lintegral_const, MeasurableSet.univ, Measure.restrict_apply, Set.univ_inter, one_mul,
    mul_one] at t‚ÇÄ
  rw [t‚ÇÄ]




#exit

  Set.range (fun v : (InfinitePlace K) ‚Üí Set.Ico 0 1 ‚Ü¶ Œ† i : Fin (rank K), (normUnits K i)
    )
theorem normLessThanOne‚ÇÇ
example {Œπ : Type*} [Fintype Œπ] (u : Œπ ‚Üí (Œπ ‚Üí ‚Ñù)) : sorry := by
  let s : Set (Œπ ‚Üí ‚Ñù) := Set.univ.pi fun _ ‚Ü¶ Set.Ico 0 1
  let f : (Œπ ‚Üí ‚Ñù) ‚Üí (Œπ ‚Üí ‚Ñù) := by
    intro a
    exact ‚àè i, (u i) ^ (a i)


#exit

example : 0 = 1 := by
  classical
  let E‚ÇÄ := Fin (rank K) ‚Üí ‚Ñù
  let u : Fin (rank K) ‚Üí E‚ÇÄ := sorry
  let s : Set (Fin (rank K) ‚Üí ‚Ñù) := Set.univ.pi fun _ ‚Ü¶ Set.Ico 0 1
  let f : E‚ÇÄ ‚Üí E‚ÇÄ := by
    intro x i
    exact ‚àè j, (u j) i ^ x i
  have hs : MeasurableSet s := sorry
  --  Real.hasStrictDerivAt_const_rpow
  let f' : E‚ÇÄ ‚Üí E‚ÇÄ ‚ÜíL[‚Ñù] E‚ÇÄ := by
    intro x
    refine ‚ü®‚ü®‚ü®?_, sorry‚ü©, sorry‚ü©, sorry‚ü©
    intro y i
    exact ((u i) ^ (x i) * Real.log (u i)) * y i
  have hf' : ‚àÄ x ‚àà s, HasFDerivWithinAt f (f' x) s x := sorry
  have hf : Set.InjOn f s := sorry
  have h'f : Measurable f := sorry
  let g : E‚ÇÄ ‚Üí ENNReal := fun _ ‚Ü¶ 1
  have t‚ÇÄ := lintegral_image_eq_lintegral_abs_det_fderiv_mul volume hs hf' hf g
  simp [g] at t‚ÇÄ
  let R : ‚Ñù := sorry
  have t‚ÇÅ : ‚àÄ x, (f' x).det = R := sorry
  simp_rw [t‚ÇÅ] at t‚ÇÄ
  simp at t‚ÇÄ



#exit

def gen : Fin (rank K) ‚Üí (E K) := by
  intro i
  let Œµ := mixedEmbedding K (fundSystem K i)
  refine ‚ü®?_, ?_‚ü©
  ¬∑ intro w
    exact normAtPlace w.val Œµ
  ¬∑ intro w
    exact (normAtPlace w.val Œµ : ‚ÑÇ)

theorem normAtPlace_gen (w : InfinitePlace K) (i : Fin (rank K)) :
    normAtPlace w (gen i) = w (fundSystem K i) := by
  obtain hw | hw := isReal_or_isComplex w
  ¬∑ simp_rw [normAtPlace_apply_isReal hw, gen, normAtPlace_apply, Real.norm_eq_abs,
      abs_eq_self.mpr (apply_nonneg _ _)]
  ¬∑ simp_rw [normAtPlace_apply_isComplex hw, gen, normAtPlace_apply, Complex.norm_eq_abs,
      Complex.abs_ofReal, abs_eq_self.mpr (apply_nonneg _ _)]

theorem norm_gen (i : Fin (rank K)) :
    mixedEmbedding.norm (gen i) = 1 := by
  simp_rw [mixedEmbedding.norm_apply, normAtPlace_gen, prod_eq_abs_norm, show
    |(Algebra.norm ‚Ñö) (fundSystem K i : K)| = 1 by exact isUnit_iff_norm.mp (fundSystem K i).isUnit,
    Rat.cast_one]

theorem logMap_gen (i : Fin (rank K)) :
    logMap (gen i) = logEmbedding K (fundSystem K i) := by
  ext
  rw [logMap_apply_of_norm_one (norm_gen i), normAtPlace_gen, logEmbedding_component]

variable (K) in
def Œû : Set (E K) := {x : E K | ‚àÄ w, normAtPlace w x = 1}

theorem normAtPlace_of_mem_Xi (w : InfinitePlace K) {x : E K} (hx : x ‚àà Œû K) :
    normAtPlace w x = 1 := hx w

theorem norm_one_of_mem_Xi {x : E K} (hx : x ‚àà Œû K) :
    mixedEmbedding.norm x = 1 := by
  simp_rw [mixedEmbedding.norm_apply, normAtPlace_of_mem_Xi _ hx, one_pow, Finset.prod_const_one]

theorem logMap_of_mem_Xi {x : E K} (hx : x ‚àà Œû K) :
    logMap x = 0 := by
  ext
  simp_rw [logMap_apply_of_norm_one (norm_one_of_mem_Xi hx), normAtPlace_of_mem_Xi _ hx,
    Real.log_one, mul_zero, Pi.zero_apply]

theorem logMap_eq_logMap_iff {x y : E K} (hx : mixedEmbedding.norm x = 1)
    (hy : mixedEmbedding.norm y = 1) :
    logMap x = logMap y ‚Üî ‚àÉ Œæ ‚àà Œû K, x = Œæ * y := by
  refine ‚ü®?_, ?_‚ü©
  ¬∑ intro h
    have : ‚àÄ w, w ‚â† w‚ÇÄ ‚Üí normAtPlace w x = normAtPlace w y := by
      intro w hw
      have := congr_fun h ‚ü®w, hw‚ü©
      rw [logMap_apply_of_norm_one hx, logMap_apply_of_norm_one hy] at this
      have := mul_left_cancel‚ÇÄ ?_ this
      ¬∑ refine Real.log_injOn_pos ?_ ?_ this
        all_goals
        ¬∑ exact lt_iff_le_and_ne.mpr ‚ü®normAtPlace_nonneg _ _,
            (mixedEmbedding.norm_ne_zero_iff.mp (by simp [hx, hy]) w).symm‚ü©
      ¬∑ refine ne_of_gt mult_pos
    refine ‚ü®x * y‚Åª¬π, ?_, ?_‚ü©
    ¬∑ sorry
    ¬∑ ext
      ¬∑ simp_rw [Prod.fst_mul, Prod.fst_inv, Pi.mul_apply, Pi.inv_apply]
        rw [inv_mul_cancel_right‚ÇÄ]
        sorry
      ¬∑ simp_rw [Prod.snd_mul, Prod.snd_inv, Pi.mul_apply, Pi.inv_apply]
        rw [inv_mul_cancel_right‚ÇÄ]
        sorry
  ¬∑ rintro ‚ü®Œæ, hŒæ, rfl‚ü©
    rw [logMap_mul, logMap_of_mem_Xi hŒæ, zero_add]
    ¬∑ simp [norm_one_of_mem_Xi hŒæ]
    ¬∑ simp [hy]

def gen_pow (e : Fin (rank K) ‚Üí ‚Ñù) : E K := by
  sorry

variable (K) in
theorem normEqOne_eq :
    normEqOne K = Set.range (fun Œæv : (Œû K) √ó ((Fin (rank K) ‚Üí Set.Ico (0 : ‚Ñù) 1)) ‚Ü¶
      (Œæv.1 : E K) * gen_pow (fun i ‚Ü¶ Œæv.2 i)) := by
  sorry


#exit


open Classical in
example : volume (frontier (normLessThanOne K)) = 0 := by
  set F := frontier (normLessThanOne K) with F_def
  let A : ‚Ñï ‚Üí (Set (E K)) := fun n ‚Ü¶ (1 - (n + 2 : ‚Ñù)‚Åª¬π) ‚Ä¢ F
  have hn‚ÇÄ : ‚àÄ n : ‚Ñï, 0 < 1 - (n + 2 : ‚Ñù)‚Åª¬π := by
    intro n
    rw [sub_pos, inv_lt_one_iff]
    exact Or.inr (by linarith)
  have hn‚ÇÅ : ‚àÄ n : ‚Ñï, 1 - (n + 2 : ‚Ñù)‚Åª¬π ‚â§ 1 := by
    intro n
    refine (sub_le_self_iff _).mpr (by positivity)
  have h : ‚àÄ x ‚àà F, mixedEmbedding.norm x = 1 := by
    rw [F_def]
    intro x hx
    unfold normLessThanOne at hx

    have := Continuous.frontier_preimage_subset (X := fundamentalCone K) (f := Subtype.val) sorry
      (t := {x | mixedEmbedding.norm x ‚â§ 1})
    dsimp at this
    have := Continuous.frontier_preimage_subset (X := {x : E K | mixedEmbedding.norm x ‚â§ 1})
      (f := Subtype.val) sorry (t := fundamentalCone K)
    dsimp at this
    have := Continuous.frontier_preimage_subset (X := {x : E K | mixedEmbedding.norm x ‚â§ 1})
      (f := Subtype.val) sorry (t := fundamentalCone K)
    dsimp at this
    have := Continuous.frontier_preimage_subset (X := E K)
      (f := fun x ‚Ü¶ mixedEmbedding.norm (x : E K)) sorry
      (t := Set.Icc 0 1)

    sorry
  sorry


-- DON'T DELETE THIS!
open Classical in
theorem volume_normEqOne :
    volume (normEqOne K) = 0 := by
  -- The sets `A n` are all subsets of `normLessThanOne` and their volume is some multiple
  -- of the volume of `normEqOne`. Since the corresponding series diverge if the volume
  -- of `normEqOne` is non-zero and `normLessThanOne` has finite volume since it is bounded,
  -- we get the result by contradiction.
  let A : ‚Ñï ‚Üí (Set (E K)) := fun n ‚Ü¶ (1 - (n + 2 : ‚Ñù)‚Åª¬π) ‚Ä¢ normEqOne K
  have hn‚ÇÄ : ‚àÄ n : ‚Ñï, 0 < 1 - (n + 2 : ‚Ñù)‚Åª¬π := by
    intro n
    rw [sub_pos, inv_lt_one_iff]
    exact Or.inr (by linarith)
  have hn‚ÇÅ : ‚àÄ n : ‚Ñï, 1 - (n + 2 : ‚Ñù)‚Åª¬π ‚â§ 1 := by
    intro n
    refine (sub_le_self_iff _).mpr (by positivity)
  have hA‚ÇÅ : ‚àÄ n : ‚Ñï, A n ‚äÜ normLessThanOne K := fun n ‚Ü¶ smul_normEqOne_subset _ (hn‚ÇÄ n) (hn‚ÇÅ n)
  have hA‚ÇÇ : ‚àÄ n : ‚Ñï, volume (A n) =
      ((1 - (n + 2 : ENNReal)‚Åª¬π) ^ finrank ‚Ñö K) * volume (normEqOne K) := fun n ‚Ü¶ by
    rw [Measure.addHaar_smul, mixedEmbedding.finrank, abs_pow, ENNReal.ofReal_pow (abs_nonneg _),
      abs_eq_self.mpr (hn‚ÇÄ n).le, ENNReal.ofReal_sub, ENNReal.ofReal_inv_of_pos,
      ENNReal.ofReal_add,
      ENNReal.ofReal_one, ENNReal.ofReal_natCast, ENNReal.ofReal_ofNat]
    any_goals positivity
  have hA‚ÇÉ : ‚àÄ n, NullMeasurableSet (A n) := fun n ‚Ü¶
    ((measurableSet_normEqOne K).const_smul‚ÇÄ  _).nullMeasurableSet
  have hA‚ÇÑ : Pairwise (AEDisjoint volume on A) := fun n m hnm ‚Ü¶ by
    suffices (1 - (n + 2 : ‚Ñù)‚Åª¬π) ^ finrank ‚Ñö K ‚â† (1 - (m + 2 : ‚Ñù)‚Åª¬π) ^ finrank ‚Ñö K by
      refine Disjoint.aedisjoint ?_
      dsimp [A]
      rw [smul_normEqOne _ (hn‚ÇÄ n), smul_normEqOne _ (hn‚ÇÄ m)]
      refine Set.disjoint_iff_forall_ne.mpr fun _ hx _ hy hxy ‚Ü¶ ?_
      rw [‚Üê hx.2, ‚Üê hy.2, ‚Üê hxy] at this
      exact this rfl
    rwa [ne_eq, ‚Üê Real.rpow_natCast, ‚Üê Real.rpow_natCast, Real.rpow_left_inj (hn‚ÇÄ n).le (hn‚ÇÄ m).le
      (Nat.cast_ne_zero.mpr (ne_of_gt finrank_pos)), sub_right_inj, inv_eq_iff_eq_inv, inv_inv,
      add_left_inj, Nat.cast_inj]
  have hA‚ÇÖ : volume (‚ãÉ i, A i) ‚â§ volume (normLessThanOne K) := measure_mono (Set.iUnion_subset hA‚ÇÅ)
  have h : volume (normLessThanOne K) < ‚ä§ := (isBounded_normLessThanOne K).measure_lt_top
  contrapose! h
  refine (le_trans ?_ (tsum_meas_le_meas_iUnion_of_disjoint‚ÇÄ volume hA‚ÇÉ hA‚ÇÑ)).trans hA‚ÇÖ
  simp_rw [hA‚ÇÇ, top_le_iff, ENNReal.tsum_mul_right]
  refine ENNReal.mul_eq_top.mpr (Or.inr ‚ü®?_, h‚ü©)
  suffices Tendsto (fun n : ‚Ñï ‚Ü¶ (1 - (n + 2 : ENNReal)‚Åª¬π) ^ finrank ‚Ñö K) atTop (nhds 1) by
    by_contra! h
    exact zero_ne_one <| tendsto_nhds_unique (ENNReal.tendsto_atTop_zero_of_tsum_ne_top h) this
  rw [show nhds (1 : ENNReal) = nhds ((1 - 0) ^ finrank ‚Ñö K) by norm_num]
  refine ENNReal.Tendsto.pow <|
    ENNReal.Tendsto.sub tendsto_const_nhds ?_ (Or.inr ENNReal.zero_ne_top)
  simp_rw [show ‚àÄ n : ‚Ñï, (n : ENNReal) + 2 = (n + 2 : ‚Ñï) by exact fun _ ‚Ü¶ by norm_cast]
  rw [Filter.tendsto_add_atTop_iff_nat (f := fun n ‚Ü¶ (n : ENNReal)‚Åª¬π)]
  exact ENNReal.tendsto_inv_nat_nhds_zero

theorem frontier_normLessThanOne' :
    frontier (normLessThanOne K) ‚äÜ frontier X ‚à™ normEqOne K := by

  have := Continuous.frontier_preimage_subset (X := fundamentalCone K) (f := Subtype.val) sorry
    (t := {x | mixedEmbedding.norm x ‚â§ 1})
  simp at this

  have t‚ÇÄ := frontier_le_subset_eq (Œ≤ := fundamentalCone K) (Œ± := ‚Ñù)
    (f := fun x ‚Ü¶ mixedEmbedding.norm (x : E K))
    (g := fun _ ‚Ü¶ 1) sorry sorry
  simp at t‚ÇÄ

  have t‚ÇÅ : frontier {x : fundamentalCone K | mixedEmbedding.norm (x : E K) ‚â§ 1} =
    {x : fundamentalCone K | mixedEmbedding.norm (x : E K) = 1} := sorry



  simp at this
  rw [t‚ÇÅ] at this






#exit

theorem frontier_normLessThanOne :
    frontier (normLessThanOne K) = normEqOne K := by
  have := frontier_le_eq_eq (Œ≤ := fundamentalCone K) (Œ± := ‚Ñù)
    (f := fun x ‚Ü¶ mixedEmbedding.norm (x : E K))
    (g := fun _ ‚Ü¶ 1) ?_ ?_ ?_
  ¬∑ rw [normLessThanOne, normEqOne]
    have := congr_arg (fun s ‚Ü¶ Subtype.val '' s) this
    simp at this
    convert this
    ¬∑ ext x
      simp only [Set.mem_image, Subtype.exists, exists_and_right, exists_eq_right]
      refine ‚ü®?_, ?_‚ü©
      ¬∑ intro hx
        refine ‚ü®?_, ?_‚ü©
        ¬∑
          sorry
        ¬∑
          sorry
      ¬∑
        sorry
    ¬∑ sorry
  ¬∑ refine Continuous.comp' ?_ ?_
    ¬∑ exact mixedEmbedding.continuous_norm K
    ¬∑ exact continuous_subtype_val
  ¬∑ exact continuous_const
  ¬∑ rintro ‚ü®x, hx‚ü© hx'
    simp at hx'
    simp
    refine frequently_iff_seq_forall.mpr ?_
    refine ‚ü®?_, ?_, ?_‚ü©
    ¬∑ intro n
      refine ‚ü®?_, ?_‚ü©
      exact (1 + 1 / (n + 1 : ‚Ñù)) ‚Ä¢ x
      refine smul_mem_of_mem hx ?_
      positivity
    ¬∑ rw [show nhds (‚ü®x, hx‚ü© : fundamentalCone K)= nhds ‚ü®(1 + 0 : ‚Ñù) ‚Ä¢ x, by simp [hx]‚ü© by norm_num]
      refine tendsto_subtype_rng.mpr ?_
      dsimp only
      refine Tendsto.smul_const ?_ _
      refine Tendsto.add ?_ ?_
      ¬∑ exact tendsto_const_nhds
      ¬∑ exact tendsto_one_div_add_atTop_nhds_zero_nat
    ¬∑ intro n
      rw [mixedEmbedding.norm_smul, ‚Üê hx', mul_one]
      refine one_lt_pow ?_ ?_
      ¬∑ rw [lt_abs]
        left
        rw [lt_add_iff_pos_right]
        positivity
      ¬∑ refine ne_of_gt ?_
        exact finrank_pos







end normLessOne

variable (K) in
/-- The set of images by `mixedEmbedding` of algebraic integers of `K` contained in the
fundamental cone. -/
def integralPoint : Set (E K) :=
  fundamentalCone K ‚à© mixedEmbedding K '' (Set.range (algebraMap (ùìû K) K))

theorem exists_unique_preimage_of_integralPoint {x : E K} (hx : x ‚àà integralPoint K) :
    ‚àÉ! a : (ùìû K), mixedEmbedding K a = x := by
  refine ‚ü®hx.2.choose_spec.1.choose, ?_, fun _ h ‚Ü¶ ?_‚ü©
  ¬∑ convert hx.2.choose_spec.2
    exact hx.2.choose_spec.1.choose_spec
  ¬∑ rw [RingOfIntegers.ext_iff, ‚Üê (mixedEmbedding_injective K).eq_iff, h]
    convert hx.2.choose_spec.2.symm
    exact hx.2.choose_spec.1.choose_spec

theorem integralPoint_ne_zero (a : integralPoint K) :
    (a : E K) ‚â† 0 := by
  by_contra!
  exact a.prop.1.2 (this.symm ‚ñ∏ mixedEmbedding.norm.map_zero')

/-- For `a : fundamentalCone K`, the unique non-zero algebraic integer which image by
`mixedEmbedding` is equal to `a`. -/
def preimageOfIntegralPoint (a : integralPoint K) : (ùìû K)‚Å∞ :=
  ‚ü®a.prop.2.choose_spec.1.choose, by
    simp_rw [mem_nonZeroDivisors_iff_ne_zero, ne_eq, RingOfIntegers.ext_iff,
      a.prop.2.choose_spec.1.choose_spec, ‚Üê (mixedEmbedding_injective K).eq_iff, map_zero,
      a.prop.2.choose_spec.2, integralPoint_ne_zero a, not_false_eq_true]‚ü©

@[simp]
theorem mixedEmbedding_preimageOfIntegralPoint (a : integralPoint K) :
    mixedEmbedding K (preimageOfIntegralPoint a : ùìû K) = (a : E K) := by
  rw [RingOfIntegers.coe_eq_algebraMap, ‚Üê a.prop.2.choose_spec.2, preimageOfIntegralPoint,
    a.prop.2.choose_spec.1.choose_spec]

theorem preimageOfIntegralPoint_mixedEmbedding {x : (ùìû K)‚Å∞}
    (hx : mixedEmbedding K (x : ùìû K) ‚àà integralPoint K) :
    preimageOfIntegralPoint (‚ü®mixedEmbedding K (x : ùìû K), hx‚ü©) = x := by
  simp_rw [Subtype.ext_iff, RingOfIntegers.ext_iff, ‚Üê (mixedEmbedding_injective K).eq_iff,
    mixedEmbedding_preimageOfIntegralPoint]

theorem exists_unitSMul_mem_integralPoint {x : E K} (hx : x ‚â† 0)
    (hx' : x ‚àà mixedEmbedding K '' (Set.range (algebraMap (ùìû K) K))) :
    ‚àÉ u : (ùìû K)À£, u ‚Ä¢ x ‚àà integralPoint K := by
  replace hx : mixedEmbedding.norm x ‚â† 0 :=
      (norm_eq_zero_iff' (Set.mem_range_of_mem_image (mixedEmbedding K) _ hx')).not.mpr hx
  obtain ‚ü®u, hu‚ü© := exists_unitSMul_mem hx
  obtain ‚ü®_, ‚ü®‚ü®x, rfl‚ü©, ‚ü®_, rfl‚ü©‚ü©‚ü© := hx'
  exact ‚ü®u, hu, (u * x : K), ‚ü®u * x, rfl‚ü©, by simp_rw [unitSMul_smul, ‚Üê map_mul]‚ü©

theorem torsion_unitSMul_mem_integralPoint {x : E K} {Œ∂ : (ùìû K)À£} (hŒ∂ : Œ∂ ‚àà torsion K)
    (hx : x ‚àà integralPoint K) :
    Œ∂ ‚Ä¢ x ‚àà integralPoint K := by
  obtain ‚ü®_, ‚ü®a, rfl‚ü©, rfl‚ü© := hx.2
  refine ‚ü®torsion_unitSMul_mem_of_mem hx.1 hŒ∂, ‚ü®Œ∂ * a, ?_, ?_‚ü©‚ü©
  ¬∑ exact ‚ü®Œ∂ * a, rfl‚ü©
  ¬∑ rw [unitSMul_smul, map_mul]

variable (K) in
/-- The map that sends an element of `a : fundamentalCone K` to the associates class
of its preimage in `(ùìû K)‚Å∞`. By quotienting by the kernel of the map, which is equal to the group
of roots of unity, we get the equivalence `integralPointQuotEquivAssociates`. -/
def integralPointToAssociates (a : integralPoint K) : Associates (ùìû K)‚Å∞ :=
  ‚ü¶preimageOfIntegralPoint a‚üß

@[simp]
theorem integralPointToAssociates_apply (a : integralPoint K) :
    (integralPointToAssociates K a) = ‚ü¶preimageOfIntegralPoint a‚üß := rfl

variable (K) in
theorem integralPointToAssociates_surjective :
    Function.Surjective (integralPointToAssociates K) := by
  rintro ‚ü®x‚ü©
  obtain ‚ü®u, hu‚ü© : ‚àÉ u : (ùìû K)À£, u ‚Ä¢ mixedEmbedding K (x : ùìû K) ‚àà integralPoint K := by
    refine exists_unitSMul_mem_integralPoint ?_  ‚ü®(x : ùìû K), Set.mem_range_self _, rfl‚ü©
    rw [map_ne_zero, RingOfIntegers.coe_ne_zero_iff]
    exact nonZeroDivisors.coe_ne_zero _
  refine ‚ü®‚ü®u ‚Ä¢ mixedEmbedding K (x : ùìû K), hu‚ü©,
    Quotient.sound ‚ü®unitsNonZeroDivisorsEquiv.symm u‚Åª¬π, ?_‚ü©‚ü©
  simp_rw [Subtype.ext_iff, RingOfIntegers.ext_iff, ‚Üê (mixedEmbedding_injective K).eq_iff,
    Submonoid.coe_mul, map_mul, mixedEmbedding_preimageOfIntegralPoint,
    unitSMul_smul, ‚Üê map_mul, mul_comm, map_inv, val_inv_unitsNonZeroDivisorsEquiv_symm_apply_coe,
    Units.mul_inv_cancel_right]

@[simps]
instance integralPoint_torsionSMul: SMul (torsion K) (integralPoint K) where
  smul := fun ‚ü®Œ∂, hŒ∂‚ü© ‚ü®x, hx‚ü© ‚Ü¶ ‚ü®Œ∂ ‚Ä¢ x, torsion_unitSMul_mem_integralPoint hŒ∂ hx‚ü©

instance : MulAction (torsion K) (integralPoint K) where
  one_smul := fun _ ‚Ü¶ by
    rw [Subtype.mk_eq_mk, integralPoint_torsionSMul_smul_coe, OneMemClass.coe_one, one_smul]
  mul_smul := fun _ _ _ ‚Ü¶ by
    rw [Subtype.mk_eq_mk]
    simp_rw [integralPoint_torsionSMul_smul_coe, Submonoid.coe_mul, mul_smul]

theorem integralPointToAssociates_eq_iff (a b : integralPoint K) :
    integralPointToAssociates K a = integralPointToAssociates K b ‚Üî
      ‚àÉ Œ∂ : torsion K, Œ∂ ‚Ä¢ a = b := by
  simp_rw [integralPointToAssociates_apply, Associates.quotient_mk_eq_mk,
    Associates.mk_eq_mk_iff_associated, Associated, mul_comm, Subtype.ext_iff,
    RingOfIntegers.ext_iff, ‚Üê (mixedEmbedding_injective K).eq_iff, Submonoid.coe_mul, map_mul,
    mixedEmbedding_preimageOfIntegralPoint, integralPoint_torsionSMul_smul_coe]
  refine ‚ü®fun ‚ü®u, hu‚ü© ‚Ü¶ ?_, fun ‚ü®‚ü®Œ∂, _‚ü©, h‚ü© ‚Ü¶ ?_‚ü©
  ¬∑ refine ‚ü®‚ü®unitsNonZeroDivisorsEquiv u, ?_‚ü©, by simp [hu]‚ü©
    exact (unitSMul_mem_iff_mem_torsion a.prop.1 _).mp (by simp [hu, b.prop.1])
  ¬∑ exact ‚ü®unitsNonZeroDivisorsEquiv.symm Œ∂, by simpa using h‚ü©

variable (K) in
/-- The equivalence between `fundamentalCone.integralPoint K / torsion K` and
`Associates (ùìû K)‚Å∞`. -/
def integralPointQuotEquivAssociates :
    Quotient (MulAction.orbitRel (torsion K) (integralPoint K)) ‚âÉ Associates (ùìû K)‚Å∞ := by
  refine Equiv.ofBijective
    (Quotient.lift (integralPointToAssociates K)
      fun _ _ h ‚Ü¶ ((integralPointToAssociates_eq_iff _ _).mpr h).symm)
    ‚ü®by
      convert Setoid.ker_lift_injective (integralPointToAssociates K)
      all_goals
      ¬∑ ext a b
        rw [Setoid.ker_def, eq_comm, integralPointToAssociates_eq_iff b a,
          MulAction.orbitRel_apply, MulAction.mem_orbit_iff],
      (Quot.surjective_lift _).mpr (integralPointToAssociates_surjective K)‚ü©

@[simp]
theorem integralPointQuotEquivAssociates_apply (a : integralPoint K) :
    integralPointQuotEquivAssociates K ‚ü¶a‚üß = ‚ü¶preimageOfIntegralPoint a‚üß := rfl

theorem integralPoint_torsionSMul_stabilizer {a : integralPoint K} :
    MulAction.stabilizer (torsion K) a = ‚ä• := by
  refine (Subgroup.eq_bot_iff_forall _).mpr fun Œ∂ hŒ∂ ‚Ü¶ ?_
  rwa [MulAction.mem_stabilizer_iff, Subtype.ext_iff, integralPoint_torsionSMul_smul_coe,
    unitSMul_smul, ‚Üê mixedEmbedding_preimageOfIntegralPoint, ‚Üê map_mul,
    (mixedEmbedding_injective K).eq_iff, ‚Üê map_mul, ‚Üê RingOfIntegers.ext_iff, mul_eq_right‚ÇÄ,
    Units.val_eq_one, OneMemClass.coe_eq_one] at hŒ∂
  exact nonZeroDivisors.coe_ne_zero _

open Submodule Ideal

variable (K) in
def integralPointEquiv :
    integralPoint K ‚âÉ {I : (Ideal (ùìû K))‚Å∞ // IsPrincipal I.val} √ó torsion K :=
  (MulAction.selfEquivSigmaOrbitsQuotientStabilizer (torsion K) (integralPoint K)).trans
    ((Equiv.sigmaEquivProdOfEquiv (by
        intro _
        simp_rw [integralPoint_torsionSMul_stabilizer]
        exact QuotientGroup.quotientBot.toEquiv)).trans
      (Equiv.prodCongrLeft (fun _ ‚Ü¶ (integralPointQuotEquivAssociates K).trans
        (associatesNonZeroDivisorsEquivIsPrincipal (ùìû K)))))

@[simp]
theorem integralPointEquiv_apply_fst (a : integralPoint K) :
    ((integralPointEquiv K a).1 : Ideal (ùìû K)) = span {(preimageOfIntegralPoint a : ùìû K)} := by
  simp_rw [‚Üê associatesNonZeroDivisorsEquivIsPrincipal_apply,
    ‚Üê integralPointQuotEquivAssociates_apply]
  rfl

/-- The `mixedEmbedding.norm` of `a : integralPoint K` as a natural integer, see `intNorm_coe` . -/
def intNorm (a : integralPoint K) : ‚Ñï := (Algebra.norm ‚Ñ§ (preimageOfIntegralPoint a : ùìû K)).natAbs

@[simp]
theorem intNorm_coe (a : integralPoint K) :
    (intNorm a : ‚Ñù) = mixedEmbedding.norm (a : E K) := by
  rw [intNorm, Int.cast_natAbs, ‚Üê Rat.cast_intCast, Int.cast_abs, Algebra.coe_norm_int,
    ‚Üê norm_eq_norm, mixedEmbedding_preimageOfIntegralPoint]

/-- The norm `intNorm` defined on `fundamentalCone.integralPoint K` lifts to a function
on the classes of `fundamentalCone.integralPoint K` modulo `torsion K`. -/
def quotIntNorm :
    Quotient (MulAction.orbitRel (torsion K) (integralPoint K)) ‚Üí ‚Ñï :=
  Quotient.lift (fun x ‚Ü¶ intNorm x) fun a b ‚ü®u, hu‚ü© ‚Ü¶ by
    rw [‚Üê Nat.cast_inj (R := ‚Ñù), intNorm_coe, intNorm_coe, ‚Üê hu, integralPoint_torsionSMul_smul_coe,
      norm_unitSMul]

@[simp]
theorem quotIntNorm_apply (a : integralPoint K) : quotIntNorm ‚ü¶a‚üß = intNorm a := rfl

variable (K) in
def integralPointEquivNorm (n : ‚Ñï) :
    {a : integralPoint K // intNorm a = n} ‚âÉ
      {I : (Ideal (ùìû K))‚Å∞ // IsPrincipal (I : Ideal (ùìû K)) ‚àß
        absNorm (I : Ideal (ùìû K)) = n} √ó (torsion K) :=
  calc {a // intNorm a = n}
      ‚âÉ {I : {I : (Ideal (ùìû K))‚Å∞ // IsPrincipal I.1} √ó torsion K //
          absNorm (I.1 : Ideal (ùìû K)) = n} :=
      (Equiv.subtypeEquiv (integralPointEquiv K) fun _ ‚Ü¶ by simp [intNorm, absNorm_span_singleton])
    _ ‚âÉ {I : {I : (Ideal (ùìû K))‚Å∞ // IsPrincipal I.1} // absNorm (I.1 : Ideal (ùìû K)) = n} √ó
          torsion K :=
      Equiv.prodSubtypeFstEquivSubtypeProd (p := fun I : {I : (Ideal (ùìû K))‚Å∞ // IsPrincipal I.1} ‚Ü¶
        absNorm (I : Ideal (ùìû K)) = n)
    _ ‚âÉ {I : (Ideal (ùìû K))‚Å∞ // IsPrincipal (I : Ideal (ùìû K)) ‚àß
          absNorm (I : Ideal (ùìû K)) = n} √ó (torsion K) :=
      Equiv.prodCongrLeft fun _ ‚Ü¶ (Equiv.subtypeSubtypeEquivSubtypeInter
        (fun I : (Ideal (ùìû K))‚Å∞ ‚Ü¶ IsPrincipal I.1) (fun I ‚Ü¶ absNorm I.1 = n))

@[simp]
theorem integralPointEquivNorm_apply_fst {n : ‚Ñï} {a : integralPoint K} (ha : intNorm a = n) :
    ((integralPointEquivNorm K n ‚ü®a, ha‚ü©).1 : Ideal (ùìû K)) =
      span {(preimageOfIntegralPoint a : ùìû K)} := by
  simp_rw [‚Üê associatesNonZeroDivisorsEquivIsPrincipal_apply,
    ‚Üê integralPointQuotEquivAssociates_apply]
  rfl

variable (K)

/-- For `n` positive, the number of `fundamentalCone.integralPoint K` of
norm `n` is equal to the number of principal ideals in `ùìû K` of norm `n` multiplied by the number
of roots of unity in `K`. -/
theorem card_isPrincipal_norm_eq (n : ‚Ñï) :
    Nat.card {I : (Ideal (ùìû K))‚Å∞ | IsPrincipal (I : Ideal (ùìû K)) ‚àß
      absNorm (I : Ideal (ùìû K)) = n} * torsionOrder K =
        Nat.card {a : integralPoint K | intNorm a = n} := by
  rw [torsionOrder, PNat.mk_coe, ‚Üê Nat.card_eq_fintype_card, ‚Üê Nat.card_prod]
  exact Nat.card_congr (integralPointEquivNorm K n).symm

theorem card_isPrincipal_norm_le (n : ‚Ñï) :
    Nat.card {I : (Ideal (ùìû K))‚Å∞ | IsPrincipal (I : Ideal (ùìû K)) ‚àß
      absNorm (I : Ideal (ùìû K)) ‚â§ n} * torsionOrder K =
        Nat.card {a : integralPoint K | intNorm a ‚â§ n} := by
  rw [torsionOrder, PNat.mk_coe, ‚Üê Nat.card_eq_fintype_card, ‚Üê Nat.card_prod]
  refine Nat.card_congr <| @Equiv.ofFiberEquiv _ (Œ≥ := Finset.Iic n) _
      (fun I ‚Ü¶ ‚ü®absNorm (I.1 : Ideal (ùìû K)), Finset.mem_Iic.mpr I.1.2.2‚ü©)
      (fun a ‚Ü¶ ‚ü®intNorm a.1, Finset.mem_Iic.mpr a.2‚ü©) fun ‚ü®i, hi‚ü© ‚Ü¶ ?_
  simp_rw [Subtype.mk.injEq]
  calc
    _ ‚âÉ {I : {I : (Ideal (ùìû K))‚Å∞ // IsPrincipal I.1 ‚àß absNorm I.1 ‚â§ n} // absNorm I.1.1 = i}
          √ó torsion K := Equiv.prodSubtypeFstEquivSubtypeProd
    _ ‚âÉ {I : (Ideal (ùìû K))‚Å∞ // (IsPrincipal I.1 ‚àß absNorm I.1 ‚â§ n) ‚àß absNorm I.1 = i}
          √ó torsion K := Equiv.prodCongrLeft fun _ ‚Ü¶ (Equiv.subtypeSubtypeEquivSubtypeInter
      (p := fun I : (Ideal (ùìû K))‚Å∞ ‚Ü¶ IsPrincipal I.1 ‚àß absNorm I.1 ‚â§ n)
      (q := fun I ‚Ü¶ absNorm I.1 = i))
    _ ‚âÉ {I : (Ideal (ùìû K))‚Å∞ // IsPrincipal I.1 ‚àß absNorm I.1 = i ‚àß absNorm I.1 ‚â§ n}
          √ó torsion K := Equiv.prodCongrLeft fun _ ‚Ü¶ (Equiv.subtypeEquivRight fun _ ‚Ü¶ by aesop)
    _ ‚âÉ {I : (Ideal (ùìû K))‚Å∞ // IsPrincipal I.1 ‚àß absNorm I.1 = i} √ó torsion K :=
      Equiv.prodCongrLeft fun _ ‚Ü¶ (Equiv.subtypeEquivRight fun _ ‚Ü¶ by
      rw [and_iff_left_of_imp (a := absNorm _ = _) fun h ‚Ü¶ Finset.mem_Iic.mp (h ‚ñ∏ hi)])
    _ ‚âÉ {a : integralPoint K // intNorm a = i} := (integralPointEquivNorm K i).symm
    _ ‚âÉ {a : {a : integralPoint K // intNorm a ‚â§ n} // intNorm a.1 = i} :=
      (Equiv.subtypeSubtypeEquivSubtype fun h ‚Ü¶ Finset.mem_Iic.mp (h ‚ñ∏ hi)).symm

end fundamentalCone

end
