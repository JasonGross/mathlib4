/-
Copyright (c) 2024 Xavier Roblot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Xavier Roblot
-/
import Mathlib.Analysis.Calculus.FDeriv.Pi
import Mathlib.MeasureTheory.Integral.Marginal
import Mathlib.NumberTheory.NumberField.Units.Regulator
import Mathlib.RingTheory.Ideal.IsPrincipal

import Mathlib.Sandbox

/-!
# Fundamental Cone

Let `K` be a number field of signature `(r‚ÇÅ, r‚ÇÇ)`. We define an action of the units `(ùìû K)À£` on
the space `‚Ñù^r‚ÇÅ √ó ‚ÑÇ^r‚ÇÇ` via the `mixedEmbedding`. The fundamental cone is a cone in `‚Ñù^r‚ÇÅ √ó ‚ÑÇ^r‚ÇÇ`
that is a fundamental domain for the action of `(ùìû K)À£` up to roots of unity.

## Main definitions and results

* `NumberField.mixedEmbedding.unitSMul`: the action of `(ùìû K)À£` on `‚Ñù^r‚ÇÅ √ó ‚ÑÇ^r‚ÇÇ` defined, for
`u : (ùìû K)À£`, by multiplication component by component with `mixedEmbedding K u`.

* `NumberField.mixedEmbedding.fundamentalCone`: a cone in `‚Ñù^r‚ÇÅ √ó ‚ÑÇ^r‚ÇÇ` --that is a subset stable
by multiplication by a real number, see `smul_mem_of_mem`--, that is also a fundamental domain
for the action of `(ùìû K)À£` up to roots of unity, see `exists_unitSMul_me` and
`torsion_unitSMul_mem_of_mem`.

* `NumberField.mixedEmbedding.fundamentalCone.integralPoint`: the subset of elements of the
fundamental cone that are images of algebraic integers of `K`.

* `NumberField.mixedEmbedding.fundamentalCone.integralPointEquiv`: the equivalence between
`fundamentalCone.integralPoint K` and the principal non-zero ideals of `ùìû K` times the
torsion of `K`.

* `NumberField.mixedEmbedding.fundamentalCone.card_isPrincipal_norm_eq`: the number of principal
non-zero ideals in `ùìû K` of norm `n` multiplied by the number of roots of unity is
equal to the number of `fundamentalCone.integralPoint K` of norm `n`.

## Tags

number field, canonical embedding, principal ideals
-/

variable (K : Type*) [Field K]

namespace NumberField.mixedEmbedding

open NumberField NumberField.InfinitePlace

/-- The space `‚Ñù^r‚ÇÅ √ó ‚ÑÇ^r‚ÇÇ` with `(r‚ÇÅ, r‚ÇÇ)` the signature of `K`. -/
local notation "E" K =>
  ({w : InfinitePlace K // IsReal w} ‚Üí ‚Ñù) √ó ({w : InfinitePlace K // IsComplex w} ‚Üí ‚ÑÇ)

noncomputable section UnitSMul

/-- The action of `(ùìû K)À£` on `‚Ñù^r‚ÇÅ √ó ‚ÑÇ^r‚ÇÇ` defined, for `u : (ùìû K)À£`, by multiplication component
by component with `mixedEmbedding K u`. -/
@[simps]
instance unitSMul : SMul (ùìû K)À£ (E K) where
  smul := fun u x ‚Ü¶ (mixedEmbedding K u) * x

instance : MulAction (ùìû K)À£ (E K) where
  one_smul := fun _ ‚Ü¶ by simp_rw [unitSMul_smul, Units.coe_one, map_one, one_mul]
  mul_smul := fun _ _ _ ‚Ü¶ by simp_rw [unitSMul_smul, Units.coe_mul, map_mul, mul_assoc]

instance : SMulZeroClass (ùìû K)À£ (E K) where
  smul_zero := fun _ ‚Ü¶ by simp_rw [unitSMul_smul, mul_zero]

variable [NumberField K]

theorem unitSMul_eq_iff_mul_eq {x y : (ùìû K)} {u : (ùìû K)À£} :
    u ‚Ä¢ mixedEmbedding K x = mixedEmbedding K y ‚Üî u * x = y := by
  rw [unitSMul_smul, ‚Üê map_mul, Function.Injective.eq_iff, ‚Üê RingOfIntegers.coe_eq_algebraMap,
    ‚Üê map_mul, ‚Üê RingOfIntegers.ext_iff]
  exact mixedEmbedding_injective K

theorem norm_unitSMul (u : (ùìû K)À£) (x : E K) :
    mixedEmbedding.norm (u ‚Ä¢ x) = mixedEmbedding.norm x := by
  rw [unitSMul_smul, map_mul, norm_unit, one_mul]

theorem unitSMul_eq_zero (u : (ùìû K)À£) (x : E K) :
    u ‚Ä¢ x = 0 ‚Üî x = 0 := by
  refine ‚ü®fun h ‚Ü¶ ?_, fun h ‚Ü¶ ?_‚ü©
  ¬∑ ext w
    ¬∑ have := congr_fun (congr_arg Prod.fst h) w
      rw [unitSMul_smul, Prod.fst_mul, Pi.mul_apply, Prod.fst_zero, Pi.zero_apply, mul_eq_zero]
        at this
      refine this.resolve_left (by simp only [mixedEmbedding_apply_ofIsReal, map_eq_zero,
        RingOfIntegers.coe_eq_zero_iff, Units.ne_zero, not_false_eq_true])
    ¬∑ have := congr_fun (congr_arg Prod.snd h) w
      rw [unitSMul_smul, Prod.snd_mul, Pi.mul_apply, Prod.snd_zero, Pi.zero_apply, mul_eq_zero]
        at this
      refine this.resolve_left (by simp only [mixedEmbedding_apply_ofIsComplex, map_eq_zero,
        RingOfIntegers.coe_eq_zero_iff, Units.ne_zero, not_false_eq_true])
  ¬∑ rw [h, smul_zero]

end UnitSMul

noncomputable section logMap

open NumberField.Units NumberField.Units.dirichletUnitTheorem FiniteDimensional

variable [NumberField K] {K}

open Classical in
/-- The map from `‚Ñù^r‚ÇÅ √ó ‚ÑÇ^r‚ÇÇ` to `{w : InfinitePlace K // w ‚â† w‚ÇÄ} ‚Üí ‚Ñù` (with `w‚ÇÄ` a fixed place)
defined in such way that: 1) it factors the map `logEmbedding`, see `logMap_eq_logEmbedding`;
2) it is constant on the lines `{c ‚Ä¢ x | c ‚àà ‚Ñù}`, see `logMap_smul`. -/
def logMap (x : E K) : {w : InfinitePlace K // w ‚â† w‚ÇÄ} ‚Üí ‚Ñù := fun w ‚Ü¶
  mult w.val * (Real.log (normAtPlace w.val x) -
    Real.log (mixedEmbedding.norm x) * (finrank ‚Ñö K : ‚Ñù)‚Åª¬π)

theorem logMap_apply (x : E K) (w : {w : InfinitePlace K // w ‚â† w‚ÇÄ}) :
    logMap x w = mult w.val * (Real.log (normAtPlace w.val x) -
      Real.log (mixedEmbedding.norm x) * (finrank ‚Ñö K : ‚Ñù)‚Åª¬π) := rfl

@[simp]
theorem logMap_zero : logMap (0 : E K) = 0 := by
  ext
  rw [logMap, map_zero, map_zero, Real.log_zero, zero_mul, sub_self, mul_zero, Pi.zero_apply]

@[simp]
theorem logMap_one : logMap (1 : E K) = 0 := by
  ext
  rw [logMap, map_one, show 1 = mixedEmbedding K (1 : (ùìû K)À£) by
      rw [Units.val_one, map_one, map_one], norm_unit, Real.log_one, zero_mul, sub_self,
    mul_zero, Pi.zero_apply]

theorem logMap_mul {x y : E K} (hx : mixedEmbedding.norm x ‚â† 0) (hy : mixedEmbedding.norm y ‚â† 0) :
    logMap (x * y) = logMap x + logMap y := by
  ext w
  simp_rw [Pi.add_apply, logMap]
  rw [map_mul, map_mul, Real.log_mul, Real.log_mul hx hy, add_mul]
  ¬∑ ring
  ¬∑ exact mixedEmbedding.norm_ne_zero_iff.mp hx w
  ¬∑ exact mixedEmbedding.norm_ne_zero_iff.mp hy w

theorem logMap_prod {Œπ : Type*} [DecidableEq Œπ] (s : Finset Œπ) {x : Œπ ‚Üí (E K)}
    (hx : ‚àÄ i ‚àà s, mixedEmbedding.norm (x i) ‚â† 0) :
    logMap (‚àè i ‚àà s, x i) = ‚àë i ‚àà s, logMap (x i) := by
  induction s using Finset.cons_induction with
  | empty => simp
  | cons i s hi h_ind =>
      rw [Finset.prod_cons, Finset.sum_cons, logMap_mul, h_ind]
      ¬∑ exact fun _ h ‚Ü¶ hx _ (Finset.mem_cons_of_mem h)
      ¬∑ exact hx i (Finset.mem_cons_self i s)
      ¬∑ rw [map_prod, Finset.prod_ne_zero_iff]
        exact fun _ h ‚Ü¶ hx _ (Finset.mem_cons_of_mem h)

theorem logMap_eq_logEmbedding (u : (ùìû K)À£) :
    logMap (mixedEmbedding K u) = logEmbedding K u := by
  ext
  simp_rw [logMap, mixedEmbedding.norm_unit, Real.log_one, zero_mul, sub_zero, normAtPlace_apply,
    logEmbedding_component]

theorem logMap_unitSMul (u : (ùìû K)À£) {x : E K} (hx : mixedEmbedding.norm x ‚â† 0) :
    logMap (u ‚Ä¢ x) = logEmbedding K u + logMap x := by
  rw [unitSMul_smul, logMap_mul (by rw [norm_unit]; norm_num) hx, logMap_eq_logEmbedding]

theorem logMap_torsion_unitSMul (x : E K) {Œ∂ : (ùìû K)À£} (hŒ∂ : Œ∂ ‚àà torsion K) :
    logMap (Œ∂ ‚Ä¢ x) = logMap x := by
  ext
  simp_rw [logMap, unitSMul_smul, map_mul, norm_eq_norm, Units.norm, Rat.cast_one, one_mul,
    normAtPlace_apply, (mem_torsion K).mp hŒ∂, one_mul]

theorem logMap_smul {x : E K} (hx : mixedEmbedding.norm x ‚â† 0) {c : ‚Ñù} (hc : c ‚â† 0) :
    logMap (c ‚Ä¢ x) = logMap x := by
  rw [show c ‚Ä¢ x = ((fun _ ‚Ü¶ c, fun _ ‚Ü¶ c) : (E K)) * x by rfl, logMap_mul _ hx, add_left_eq_self]
  ¬∑ ext
    have hr : (finrank ‚Ñö K : ‚Ñù) ‚â† 0 :=  Nat.cast_ne_zero.mpr (ne_of_gt finrank_pos)
    simp_rw [logMap, normAtPlace_real, norm_real, Real.log_pow, mul_comm, inv_mul_cancel_left‚ÇÄ hr,
      sub_self, zero_mul, Pi.zero_apply]
  ¬∑ rw [norm_real]
    exact pow_ne_zero _ (abs_ne_zero.mpr hc)

theorem measurable_logMap :
    Measurable (logMap : (E K) ‚Üí _) :=
  measurable_pi_iff.mpr fun _ ‚Ü¶
    measurable_const.mul <| (continuous_normAtPlace _).measurable.log.sub
      <| (mixedEmbedding.continuous_norm K).measurable.log.mul measurable_const

theorem continuousOn_logMap :
    ContinuousOn (logMap : (E K) ‚Üí _) {x | mixedEmbedding.norm x ‚â† 0} := by
  refine continuousOn_pi.mpr fun w ‚Ü¶ continuousOn_const.mul (ContinuousOn.sub ?_ ?_)
  ¬∑ exact Real.continuousOn_log.comp''  (continuous_normAtPlace _).continuousOn
      fun _ hx ‚Ü¶ mixedEmbedding.norm_ne_zero_iff.mp hx _
  ¬∑ exact ContinuousOn.mul
      (Real.continuousOn_log.comp''  (mixedEmbedding.continuous_norm K).continuousOn
        fun _ hx ‚Ü¶ hx) continuousOn_const

theorem logMap_apply_of_norm_one {x : E K} (hx : mixedEmbedding.norm x = 1) {w : InfinitePlace K}
    (hw : w ‚â† w‚ÇÄ) :
    logMap x ‚ü®w, hw‚ü© = mult w * Real.log (normAtPlace w x) := by
  rw [logMap, hx, Real.log_one, zero_mul, sub_zero]

end logMap

noncomputable section

open NumberField.Units NumberField.Units.dirichletUnitTheorem nonZeroDivisors BigOperators

variable [NumberField K]

open Classical in
/-- The fundamental cone is a cone in `‚Ñù^r‚ÇÅ √ó ‚ÑÇ^r‚ÇÇ` --that is a subset fixed by multiplication by
a scalar, see `smul_mem_of_mem`--, that is also a fundamental domain for the action of `(ùìû K)À£` up
to roots of unity, see `exists_unitSMul_mem` and `torsion_unitSMul_mem_of_mem`. -/
def fundamentalCone : Set (E K) :=
  logMap‚Åª¬π' (Zspan.fundamentalDomain ((basisUnitLattice K).ofZlatticeBasis ‚Ñù _)) \
    {x | mixedEmbedding.norm x = 0}

namespace fundamentalCone

variable {K}

-- Use this to golf some proofs? (or remove it)
open Classical in
theorem mem_fundamentalCone {x : E K} :
    x ‚àà fundamentalCone K ‚Üî
      logMap x ‚àà Zspan.fundamentalDomain ((basisUnitLattice K).ofZlatticeBasis ‚Ñù _) ‚àß
      mixedEmbedding.norm x ‚â† 0 := by
  rw [fundamentalCone, Set.mem_diff, Set.mem_preimage, Set.mem_setOf_eq]

theorem norm_pos_of_mem {x : E K} (hx : x ‚àà fundamentalCone K) :
    0 < mixedEmbedding.norm x :=
  lt_iff_le_and_ne.mpr ‚ü®mixedEmbedding.norm_nonneg _, Ne.symm hx.2‚ü©

theorem normAtPlace_pos_of_mem {x : E K} (hx : x ‚àà fundamentalCone K) (w : InfinitePlace K) :
    0 < normAtPlace w x :=
  lt_iff_le_and_ne.mpr ‚ü®normAtPlace_nonneg _ _,
    (mixedEmbedding.norm_ne_zero_iff.mp (ne_of_gt (norm_pos_of_mem hx)) w).symm‚ü©

theorem mem_of_normAtPlace_eq {x y : E K} (hx : x ‚àà fundamentalCone K)
    (hy : ‚àÄ w, normAtPlace w y = normAtPlace w x) :
    y ‚àà fundamentalCone K := by
  have h‚ÇÅ : mixedEmbedding.norm y = mixedEmbedding.norm x := by
    simp_rw [mixedEmbedding.norm_apply, hy]
  have h‚ÇÇ : logMap y = logMap x := by
    ext
    simp_rw [logMap, hy, h‚ÇÅ]
  refine ‚ü®?_, ?_‚ü©
  ¬∑ rw [Set.mem_preimage, h‚ÇÇ]
    exact hx.1
  ¬∑ rw [Set.mem_setOf_eq, h‚ÇÅ]
    exact hx.2

theorem smul_mem_of_mem {x : E K} (hx : x ‚àà fundamentalCone K) {c : ‚Ñù} (hc : c ‚â† 0) :
    c ‚Ä¢ x ‚àà fundamentalCone K := by
  refine ‚ü®?_, ?_‚ü©
  ¬∑ rw [Set.mem_preimage, logMap_smul hx.2 hc]
    exact hx.1
  ¬∑ rw [Set.mem_setOf_eq, mixedEmbedding.norm_smul, mul_eq_zero, not_or]
    exact ‚ü®pow_ne_zero _ (abs_ne_zero.mpr hc), hx.2‚ü©

theorem smul_mem_iff_mem {x : E K} {c : ‚Ñù} (hc : c ‚â† 0) :
    c ‚Ä¢ x ‚àà fundamentalCone K ‚Üî x ‚àà fundamentalCone K := by
  refine ‚ü®fun h ‚Ü¶ ?_, fun h ‚Ü¶ smul_mem_of_mem h hc‚ü©
  convert smul_mem_of_mem h (inv_ne_zero hc)
  rw [eq_inv_smul_iff‚ÇÄ hc]

theorem exists_unitSMul_mem {x : E K} (hx : mixedEmbedding.norm x ‚â† 0) :
    ‚àÉ u : (ùìû K)À£, u ‚Ä¢ x ‚àà fundamentalCone K := by
  classical
  let B := (basisUnitLattice K).ofZlatticeBasis ‚Ñù
  rsuffices ‚ü®‚ü®_, ‚ü®u, _, rfl‚ü©‚ü©, hu‚ü© : ‚àÉ e : unitLattice K, e + logMap x ‚àà Zspan.fundamentalDomain B
  ¬∑ exact ‚ü®u, by rwa [Set.mem_preimage, logMap_unitSMul u hx], by simp [hx]‚ü©
  ¬∑ obtain ‚ü®‚ü®e, h‚ÇÅ‚ü©, h‚ÇÇ, -‚ü© := Zspan.exist_unique_vadd_mem_fundamentalDomain B (logMap x)
    exact ‚ü®‚ü®e, by rwa [‚Üê Basis.ofZlatticeBasis_span ‚Ñù (unitLattice K)]‚ü©, h‚ÇÇ‚ü©

theorem torsion_unitSMul_mem_of_mem {x : E K} (hx : x ‚àà fundamentalCone K) {Œ∂ : (ùìû K)À£}
    (hŒ∂ : Œ∂ ‚àà torsion K) :
    Œ∂ ‚Ä¢ x ‚àà fundamentalCone K := by
  refine ‚ü®?_, ?_‚ü©
  ¬∑ rw [Set.mem_preimage, logMap_torsion_unitSMul _ hŒ∂]
    exact hx.1
  ¬∑ simpa only [unitSMul_smul, Set.mem_setOf_eq, map_mul, norm_eq_norm, Rat.cast_abs, mul_eq_zero,
    abs_eq_zero, Rat.cast_eq_zero, Algebra.norm_eq_zero_iff, RingOfIntegers.coe_eq_zero_iff,
    Units.ne_zero, false_or] using hx.2

theorem unitSMul_mem_iff_mem_torsion {x : E K} (hx : x ‚àà fundamentalCone K) (u : (ùìû K)À£) :
    u ‚Ä¢ x ‚àà fundamentalCone K ‚Üî u ‚àà torsion K := by
  classical
  refine ‚ü®fun h ‚Ü¶ ?_, fun h ‚Ü¶ ?_‚ü©
  ¬∑ rw [‚Üê logEmbedding_eq_zero_iff]
    let B := (basisUnitLattice K).ofZlatticeBasis ‚Ñù
    refine (Subtype.mk_eq_mk (h := ?_) (h' := ?_)).mp <|
      ExistsUnique.unique (Zspan.exist_unique_vadd_mem_fundamentalDomain B (logMap x)) ?_ ?_
    ¬∑ change logEmbedding K u ‚àà (Submodule.span ‚Ñ§ (Set.range B)).toAddSubgroup
      rw [Basis.ofZlatticeBasis_span ‚Ñù (unitLattice K)]
      exact ‚ü®u, trivial, rfl‚ü©
    ¬∑ exact Submodule.zero_mem _
    ¬∑ rw [AddSubmonoid.mk_vadd, vadd_eq_add, ‚Üê logMap_unitSMul _ hx.2]
      exact h.1
    ¬∑ rw [AddSubmonoid.mk_vadd, vadd_eq_add, zero_add]
      exact hx.1
  ¬∑ exact torsion_unitSMul_mem_of_mem hx h

variable (K) in
theorem measurableSet :
    MeasurableSet (fundamentalCone K) := by
  classical
  refine MeasurableSet.diff ?_ ?_
  ¬∑ unfold logMap
    refine MeasurableSet.preimage (Zspan.fundamentalDomain_measurableSet _) <|
      measurable_pi_iff.mpr fun w ‚Ü¶ measurable_const.mul ?_
    exact (continuous_normAtPlace _).measurable.log.sub <|
      (mixedEmbedding.continuous_norm _).measurable.log.mul measurable_const
  ¬∑ exact measurableSet_eq_fun (mixedEmbedding.continuous_norm K).measurable measurable_const

section normLessOne

variable (K)

def normLessThanOne : Set (E K) := {x | x ‚àà fundamentalCone K ‚àß mixedEmbedding.norm x ‚â§ 1}

abbrev normEqOne : Set (E K) := {x | x ‚àà fundamentalCone K ‚àß mixedEmbedding.norm x = 1}

variable {K} in
theorem mem_normLessThanOne_of_normAtPlace_eq {x y : E K} (hx : x ‚àà normLessThanOne K)
    (hy : ‚àÄ w, normAtPlace w y = normAtPlace w x) :
    y ‚àà normLessThanOne K := by
  have h‚ÇÅ : mixedEmbedding.norm y = mixedEmbedding.norm x := by
    simp_rw [mixedEmbedding.norm_apply, hy]
  exact ‚ü®mem_of_normAtPlace_eq hx.1 hy, h‚ÇÅ ‚ñ∏ hx.2‚ü©

theorem mem_normEqOne_of_normAtPlace_eq {x y : E K} (hx : x ‚àà normEqOne K)
    (hy : ‚àÄ w, normAtPlace w y = normAtPlace w x) :
    y ‚àà normEqOne K := by
  have h‚ÇÅ : mixedEmbedding.norm y = mixedEmbedding.norm x := by
    simp_rw [mixedEmbedding.norm_apply, hy]
  exact ‚ü®mem_of_normAtPlace_eq hx.1 hy, h‚ÇÅ ‚ñ∏ hx.2‚ü©

open Pointwise FiniteDimensional Bornology MeasureTheory Filter

theorem smul_normEqOne {c : ‚Ñù} (hc : 0 < c) :
    c ‚Ä¢ normEqOne K = {x | x ‚àà fundamentalCone K ‚àß mixedEmbedding.norm x = c ^ finrank ‚Ñö K} := by
  ext
  rw [‚Üê Set.preimage_smul_inv‚ÇÄ (ne_of_gt hc), Set.preimage_setOf_eq, Set.mem_setOf_eq,
    mixedEmbedding.norm_smul, abs_inv, abs_eq_self.mpr hc.le, inv_pow, mul_comm, mul_inv_eq_one‚ÇÄ
    (pow_ne_zero _ (ne_of_gt hc)), Set.mem_setOf_eq, and_congr_left_iff]
  exact fun _ ‚Ü¶ smul_mem_iff_mem (inv_ne_zero (ne_of_gt hc))

-- Use this to golf some proof before?
-- Use norm_norm_rpow_smul_eq_one
variable {K} in
theorem exists_mem_smul_normEqOne {x : E K} (hx : x ‚àà normLessThanOne K) :
    ‚àÉ c : ‚Ñù, 0 < c ‚àß c ‚â§ 1 ‚àß x ‚àà c ‚Ä¢ normEqOne K := by
  have h‚ÇÅ : (finrank ‚Ñö K : ‚Ñù) ‚â† 0 := Nat.cast_ne_zero.mpr (ne_of_gt finrank_pos)
  have h‚ÇÇ : 0 < mixedEmbedding.norm x ^ (finrank ‚Ñö K : ‚Ñù)‚Åª¬π :=
    Real.rpow_pos_of_pos (norm_pos_of_mem hx.1) _
  refine ‚ü®(mixedEmbedding.norm x) ^ (finrank ‚Ñö K : ‚Ñù)‚Åª¬π, h‚ÇÇ, ?_, ?_‚ü©
  ¬∑ exact Real.rpow_le_one (mixedEmbedding.norm_nonneg _) hx.2 (inv_nonneg.mpr (Nat.cast_nonneg _))
  ¬∑ rw [smul_normEqOne K h‚ÇÇ]
    refine ‚ü®hx.1, ?_‚ü©
    rw [‚Üê Real.rpow_natCast, ‚Üê Real.rpow_mul (mixedEmbedding.norm_nonneg _), inv_mul_cancel‚ÇÄ h‚ÇÅ,
      Real.rpow_one]

-- Replace with Set.Ioc?
-- This is useless after the next result?
theorem smul_normEqOne_subset {c : ‚Ñù} (hc‚ÇÅ : 0 < c) (hc‚ÇÇ : c ‚â§ 1) :
    c ‚Ä¢ normEqOne K ‚äÜ normLessThanOne K := by
  rw [smul_normEqOne K hc‚ÇÅ]
  refine fun x hx ‚Ü¶ ‚ü®hx.1, ?_‚ü©
  rw [hx.2]
  exact pow_le_one _ hc‚ÇÅ.le hc‚ÇÇ

theorem normLessThanOne_eq_union_smul_normEqOne :
    normLessThanOne K = ‚ãÉ c ‚àà Set.Ioc (0 : ‚Ñù) 1, c ‚Ä¢ normEqOne K := by
  ext
  simp_rw [Set.mem_iUnion, Set.mem_Ioc, exists_prop, and_assoc]
  exact ‚ü®fun hx ‚Ü¶ exists_mem_smul_normEqOne hx,
    fun ‚ü®_, h‚ÇÅ, h‚ÇÇ, hx‚ü© ‚Ü¶ smul_normEqOne_subset K h‚ÇÅ h‚ÇÇ hx‚ü©

theorem smul_normLessThanOne_subset {c : ‚Ñù} (hc‚ÇÅ : c ‚â† 0) (hc‚ÇÇ : |c| ‚â§ 1) :
    c ‚Ä¢ normLessThanOne K ‚äÜ normLessThanOne K := by
  rintro _ ‚ü®x, hx, rfl‚ü©
  refine ‚ü®?_, ?_‚ü©
  ¬∑ refine smul_mem_of_mem hx.1 hc‚ÇÅ
  ¬∑ rw [norm_smul]
    refine mul_le_one ?_ (mixedEmbedding.norm_nonneg x) hx.2
    exact pow_le_one _ (abs_nonneg c) hc‚ÇÇ

theorem isBounded_normEqOne :
    IsBounded (normEqOne K) := by
  classical
  let B := (basisUnitLattice K).ofZlatticeBasis ‚Ñù
  obtain ‚ü®r, hr‚ÇÅ, hr‚ÇÇ‚ü© := (Zspan.fundamentalDomain_isBounded B).subset_closedBall_lt 0 0
  have h‚ÇÅ : ‚àÄ ‚¶Éx w‚¶Ñ, x ‚àà normEqOne K ‚Üí w ‚â† w‚ÇÄ ‚Üí |mult w * Real.log (normAtPlace w x)| ‚â§ r := by
    intro x w hx hw
    rw [‚Üê logMap_apply_of_norm_one hx.2]
    suffices ‚ÄñlogMap x‚Äñ ‚â§ r by exact (pi_norm_le_iff_of_nonneg hr‚ÇÅ.le).mp this ‚ü®w, hw‚ü©
    exact mem_closedBall_zero_iff.mp (hr‚ÇÇ hx.1.1)
  have h‚ÇÇ : ‚àÄ ‚¶Éx‚¶Ñ, x ‚àà normEqOne K ‚Üí mult (w‚ÇÄ : InfinitePlace K) * Real.log (normAtPlace w‚ÇÄ x) ‚â§
      (Finset.univ.erase (w‚ÇÄ : InfinitePlace K)).card ‚Ä¢ r := by
    intro x hx
    suffices mult (w‚ÇÄ : InfinitePlace K) * Real.log (normAtPlace w‚ÇÄ x) =
        - ‚àë w ‚àà Finset.univ.erase w‚ÇÄ, mult w * Real.log (normAtPlace w x) by
      rw [this, ‚Üê Finset.sum_neg_distrib, ‚Üê Finset.sum_const]
      exact Finset.sum_le_sum fun w hw ‚Ü¶
        neg_le_of_neg_le (abs_le.mp (h‚ÇÅ hx (Finset.mem_erase.mp hw).1)).1
    simp_rw [‚Üê Real.log_pow]
    rw [‚Üê add_eq_zero_iff_eq_neg, Finset.univ.add_sum_erase (fun w ‚Ü¶
      ((normAtPlace w x) ^ mult w).log) (Finset.mem_univ w‚ÇÄ), ‚Üê Real.log_prod,
      ‚Üê mixedEmbedding.norm_apply, hx.2, Real.log_one]
    exact fun w _ ‚Ü¶  pow_ne_zero _ <| ne_of_gt (normAtPlace_pos_of_mem hx.1 w)
  have h‚ÇÉ : ‚àÄ ‚¶Éx w c‚¶Ñ, 0 ‚â§ c ‚Üí x ‚àà fundamentalCone K ‚Üí
      mult w * Real.log (normAtPlace w x) ‚â§ c ‚Üí normAtPlace w x ‚â§ Real.exp c := by
    intro x w c hc hx
    rw [‚Üê le_div_iff‚ÇÄ' (Nat.cast_pos.mpr mult_pos),
      Real.log_le_iff_le_exp (normAtPlace_pos_of_mem hx w)]
    exact fun h ‚Ü¶ le_trans h <| Real.exp_le_exp.mpr (div_le_self hc one_le_mult)
  refine (Metric.isBounded_iff_subset_closedBall 0).mpr
    ‚ü®max (Real.exp r) (Real.exp ((Finset.univ.erase (w‚ÇÄ : InfinitePlace K)).card ‚Ä¢ r)),
      fun x hx ‚Ü¶ mem_closedBall_zero_iff.mpr ?_‚ü©
  rw [norm_eq_sup'_normAtPlace]
  refine Finset.sup'_le _ _ fun w _ ‚Ü¶ ?_
  by_cases hw : w = w‚ÇÄ
  ¬∑ rw [hw]
    exact (h‚ÇÉ (nsmul_nonneg (hr‚ÇÅ.le) _) hx.1 (h‚ÇÇ hx)).trans (le_max_right _ _)
  ¬∑ exact le_trans (h‚ÇÉ hr‚ÇÅ.le hx.1 (abs_le.mp (h‚ÇÅ hx hw)).2) (le_max_left _ _)

theorem isBounded_normLessThanOne :
    IsBounded (normLessThanOne K) := by
  classical
  obtain ‚ü®r, hr‚ÇÅ, hr‚ÇÇ‚ü© := (isBounded_normEqOne K).subset_ball_lt 0 0
  refine (Metric.isBounded_iff_subset_ball 0).mpr ‚ü®r, fun x hx ‚Ü¶ ?_‚ü©
  obtain ‚ü®c, hc‚ÇÅ, _, hc‚ÇÇ‚ü© := exists_mem_smul_normEqOne hx
  suffices x ‚àà c ‚Ä¢ Metric.ball (0 : (E K)) r by
    rw [smul_ball (ne_of_gt hc‚ÇÅ), smul_zero] at this
    refine Set.mem_of_subset_of_mem (Metric.ball_subset_ball ?_) this
    rwa [mul_le_iff_le_one_left hr‚ÇÅ, Real.norm_eq_abs, abs_eq_self.mpr hc‚ÇÅ.le]
  exact (Set.image_subset _ hr‚ÇÇ) hc‚ÇÇ

theorem measurableSet_normEqOne :
    MeasurableSet (normEqOne K) :=
  MeasurableSet.inter (measurableSet K) <|
    measurableSet_eq_fun (mixedEmbedding.continuous_norm K).measurable measurable_const

theorem measurableSet_normLessThanOne :
    MeasurableSet (normLessThanOne K) :=
  MeasurableSet.inter (measurableSet K) <|
    measurableSet_le (mixedEmbedding.continuous_norm K).measurable measurable_const

end normLessOne

variable (K) in
/-- The set of images by `mixedEmbedding` of algebraic integers of `K` contained in the
fundamental cone. -/
def integralPoint : Set (E K) :=
  fundamentalCone K ‚à© mixedEmbedding K '' (Set.range (algebraMap (ùìû K) K))

theorem exists_unique_preimage_of_integralPoint {x : E K} (hx : x ‚àà integralPoint K) :
    ‚àÉ! a : (ùìû K), mixedEmbedding K a = x := by
  refine ‚ü®hx.2.choose_spec.1.choose, ?_, fun _ h ‚Ü¶ ?_‚ü©
  ¬∑ convert hx.2.choose_spec.2
    exact hx.2.choose_spec.1.choose_spec
  ¬∑ rw [RingOfIntegers.ext_iff, ‚Üê (mixedEmbedding_injective K).eq_iff, h]
    convert hx.2.choose_spec.2.symm
    exact hx.2.choose_spec.1.choose_spec

theorem integralPoint_ne_zero (a : integralPoint K) :
    (a : E K) ‚â† 0 := by
  by_contra!
  exact a.prop.1.2 (this.symm ‚ñ∏ mixedEmbedding.norm.map_zero')

/-- For `a : fundamentalCone K`, the unique non-zero algebraic integer which image by
`mixedEmbedding` is equal to `a`. -/
def preimageOfIntegralPoint (a : integralPoint K) : (ùìû K)‚Å∞ :=
  ‚ü®a.prop.2.choose_spec.1.choose, by
    simp_rw [mem_nonZeroDivisors_iff_ne_zero, ne_eq, RingOfIntegers.ext_iff,
      a.prop.2.choose_spec.1.choose_spec, ‚Üê (mixedEmbedding_injective K).eq_iff, map_zero,
      a.prop.2.choose_spec.2, integralPoint_ne_zero a, not_false_eq_true]‚ü©

@[simp]
theorem mixedEmbedding_preimageOfIntegralPoint (a : integralPoint K) :
    mixedEmbedding K (preimageOfIntegralPoint a : ùìû K) = (a : E K) := by
  rw [RingOfIntegers.coe_eq_algebraMap, ‚Üê a.prop.2.choose_spec.2, preimageOfIntegralPoint,
    a.prop.2.choose_spec.1.choose_spec]

theorem preimageOfIntegralPoint_mixedEmbedding {x : (ùìû K)‚Å∞}
    (hx : mixedEmbedding K (x : ùìû K) ‚àà integralPoint K) :
    preimageOfIntegralPoint (‚ü®mixedEmbedding K (x : ùìû K), hx‚ü©) = x := by
  simp_rw [Subtype.ext_iff, RingOfIntegers.ext_iff, ‚Üê (mixedEmbedding_injective K).eq_iff,
    mixedEmbedding_preimageOfIntegralPoint]

theorem exists_unitSMul_mem_integralPoint {x : E K} (hx : x ‚â† 0)
    (hx' : x ‚àà mixedEmbedding K '' (Set.range (algebraMap (ùìû K) K))) :
    ‚àÉ u : (ùìû K)À£, u ‚Ä¢ x ‚àà integralPoint K := by
  replace hx : mixedEmbedding.norm x ‚â† 0 :=
      (norm_eq_zero_iff' (Set.mem_range_of_mem_image (mixedEmbedding K) _ hx')).not.mpr hx
  obtain ‚ü®u, hu‚ü© := exists_unitSMul_mem hx
  obtain ‚ü®_, ‚ü®‚ü®x, rfl‚ü©, ‚ü®_, rfl‚ü©‚ü©‚ü© := hx'
  exact ‚ü®u, hu, (u * x : K), ‚ü®u * x, rfl‚ü©, by simp_rw [unitSMul_smul, ‚Üê map_mul]‚ü©

theorem torsion_unitSMul_mem_integralPoint {x : E K} {Œ∂ : (ùìû K)À£} (hŒ∂ : Œ∂ ‚àà torsion K)
    (hx : x ‚àà integralPoint K) :
    Œ∂ ‚Ä¢ x ‚àà integralPoint K := by
  obtain ‚ü®_, ‚ü®a, rfl‚ü©, rfl‚ü© := hx.2
  refine ‚ü®torsion_unitSMul_mem_of_mem hx.1 hŒ∂, ‚ü®Œ∂ * a, ?_, ?_‚ü©‚ü©
  ¬∑ exact ‚ü®Œ∂ * a, rfl‚ü©
  ¬∑ rw [unitSMul_smul, map_mul]

variable (K) in
/-- The map that sends an element of `a : fundamentalCone K` to the associates class
of its preimage in `(ùìû K)‚Å∞`. By quotienting by the kernel of the map, which is equal to the group
of roots of unity, we get the equivalence `integralPointQuotEquivAssociates`. -/
def integralPointToAssociates (a : integralPoint K) : Associates (ùìû K)‚Å∞ :=
  ‚ü¶preimageOfIntegralPoint a‚üß

@[simp]
theorem integralPointToAssociates_apply (a : integralPoint K) :
    (integralPointToAssociates K a) = ‚ü¶preimageOfIntegralPoint a‚üß := rfl

variable (K) in
theorem integralPointToAssociates_surjective :
    Function.Surjective (integralPointToAssociates K) := by
  rintro ‚ü®x‚ü©
  obtain ‚ü®u, hu‚ü© : ‚àÉ u : (ùìû K)À£, u ‚Ä¢ mixedEmbedding K (x : ùìû K) ‚àà integralPoint K := by
    refine exists_unitSMul_mem_integralPoint ?_  ‚ü®(x : ùìû K), Set.mem_range_self _, rfl‚ü©
    rw [map_ne_zero, RingOfIntegers.coe_ne_zero_iff]
    exact nonZeroDivisors.coe_ne_zero _
  refine ‚ü®‚ü®u ‚Ä¢ mixedEmbedding K (x : ùìû K), hu‚ü©,
    Quotient.sound ‚ü®unitsNonZeroDivisorsEquiv.symm u‚Åª¬π, ?_‚ü©‚ü©
  simp_rw [Subtype.ext_iff, RingOfIntegers.ext_iff, ‚Üê (mixedEmbedding_injective K).eq_iff,
    Submonoid.coe_mul, map_mul, mixedEmbedding_preimageOfIntegralPoint,
    unitSMul_smul, ‚Üê map_mul, mul_comm, map_inv, val_inv_unitsNonZeroDivisorsEquiv_symm_apply_coe,
    Units.mul_inv_cancel_right]

@[simps]
instance integralPoint_torsionSMul: SMul (torsion K) (integralPoint K) where
  smul := fun ‚ü®Œ∂, hŒ∂‚ü© ‚ü®x, hx‚ü© ‚Ü¶ ‚ü®Œ∂ ‚Ä¢ x, torsion_unitSMul_mem_integralPoint hŒ∂ hx‚ü©

instance : MulAction (torsion K) (integralPoint K) where
  one_smul := fun _ ‚Ü¶ by
    rw [Subtype.mk_eq_mk, integralPoint_torsionSMul_smul_coe, OneMemClass.coe_one, one_smul]
  mul_smul := fun _ _ _ ‚Ü¶ by
    rw [Subtype.mk_eq_mk]
    simp_rw [integralPoint_torsionSMul_smul_coe, Subgroup.coe_mul, mul_smul]

theorem integralPointToAssociates_eq_iff (a b : integralPoint K) :
    integralPointToAssociates K a = integralPointToAssociates K b ‚Üî
      ‚àÉ Œ∂ : torsion K, Œ∂ ‚Ä¢ a = b := by
  simp_rw [integralPointToAssociates_apply, Associates.quotient_mk_eq_mk,
    Associates.mk_eq_mk_iff_associated, Associated, mul_comm, Subtype.ext_iff,
    RingOfIntegers.ext_iff, ‚Üê (mixedEmbedding_injective K).eq_iff, Submonoid.coe_mul, map_mul,
    mixedEmbedding_preimageOfIntegralPoint, integralPoint_torsionSMul_smul_coe]
  refine ‚ü®fun ‚ü®u, hu‚ü© ‚Ü¶ ?_, fun ‚ü®‚ü®Œ∂, _‚ü©, h‚ü© ‚Ü¶ ?_‚ü©
  ¬∑ refine ‚ü®‚ü®unitsNonZeroDivisorsEquiv u, ?_‚ü©, by simp [hu]‚ü©
    exact (unitSMul_mem_iff_mem_torsion a.prop.1 _).mp (by simp [hu, b.prop.1])
  ¬∑ exact ‚ü®unitsNonZeroDivisorsEquiv.symm Œ∂, by simpa using h‚ü©

variable (K) in
/-- The equivalence between `fundamentalCone.integralPoint K / torsion K` and
`Associates (ùìû K)‚Å∞`. -/
def integralPointQuotEquivAssociates :
    Quotient (MulAction.orbitRel (torsion K) (integralPoint K)) ‚âÉ Associates (ùìû K)‚Å∞ := by
  refine Equiv.ofBijective
    (Quotient.lift (integralPointToAssociates K)
      fun _ _ h ‚Ü¶ ((integralPointToAssociates_eq_iff _ _).mpr h).symm)
    ‚ü®by
      convert Setoid.ker_lift_injective (integralPointToAssociates K)
      all_goals
      ¬∑ ext a b
        rw [Setoid.ker_def, eq_comm, integralPointToAssociates_eq_iff b a,
          MulAction.orbitRel_apply, MulAction.mem_orbit_iff],
      (Quot.surjective_lift _).mpr (integralPointToAssociates_surjective K)‚ü©

@[simp]
theorem integralPointQuotEquivAssociates_apply (a : integralPoint K) :
    integralPointQuotEquivAssociates K ‚ü¶a‚üß = ‚ü¶preimageOfIntegralPoint a‚üß := rfl

theorem integralPoint_torsionSMul_stabilizer {a : integralPoint K} :
    MulAction.stabilizer (torsion K) a = ‚ä• := by
  refine (Subgroup.eq_bot_iff_forall _).mpr fun Œ∂ hŒ∂ ‚Ü¶ ?_
  rwa [MulAction.mem_stabilizer_iff, Subtype.ext_iff, integralPoint_torsionSMul_smul_coe,
    unitSMul_smul, ‚Üê mixedEmbedding_preimageOfIntegralPoint, ‚Üê map_mul,
    (mixedEmbedding_injective K).eq_iff, ‚Üê map_mul, ‚Üê RingOfIntegers.ext_iff, mul_eq_right‚ÇÄ,
    Units.val_eq_one, OneMemClass.coe_eq_one] at hŒ∂
  exact nonZeroDivisors.coe_ne_zero _

open Submodule Ideal

variable (K) in
def integralPointEquiv :
    integralPoint K ‚âÉ {I : (Ideal (ùìû K))‚Å∞ // IsPrincipal I.val} √ó torsion K :=
  (MulAction.selfEquivSigmaOrbitsQuotientStabilizer (torsion K) (integralPoint K)).trans
    ((Equiv.sigmaEquivProdOfEquiv (by
        intro _
        simp_rw [integralPoint_torsionSMul_stabilizer]
        exact QuotientGroup.quotientBot.toEquiv)).trans
      (Equiv.prodCongrLeft (fun _ ‚Ü¶ (integralPointQuotEquivAssociates K).trans
        (Ideal.associatesNonZeroDivisorsEquivIsPrincipal (ùìû K)))))

@[simp]
theorem integralPointEquiv_apply_fst (a : integralPoint K) :
    ((integralPointEquiv K a).1 : Ideal (ùìû K)) = span {(preimageOfIntegralPoint a : ùìû K)} := by
  simp_rw [‚Üê associatesNonZeroDivisorsEquivIsPrincipal_apply,
    ‚Üê integralPointQuotEquivAssociates_apply]
  rfl

/-- The `mixedEmbedding.norm` of `a : integralPoint K` as a natural integer, see `intNorm_coe` . -/
def intNorm (a : integralPoint K) : ‚Ñï := (Algebra.norm ‚Ñ§ (preimageOfIntegralPoint a : ùìû K)).natAbs

@[simp]
theorem intNorm_coe (a : integralPoint K) :
    (intNorm a : ‚Ñù) = mixedEmbedding.norm (a : E K) := by
  rw [intNorm, Int.cast_natAbs, ‚Üê Rat.cast_intCast, Int.cast_abs, Algebra.coe_norm_int,
    ‚Üê norm_eq_norm, mixedEmbedding_preimageOfIntegralPoint]

theorem intNorm_le_iff (a : integralPoint K) (n : ‚Ñï) :
    intNorm a ‚â§ n ‚Üî mixedEmbedding.norm (a : E K) ‚â§ n := by
  rw [‚Üê intNorm_coe, Nat.cast_le]

/-- The norm `intNorm` defined on `fundamentalCone.integralPoint K` lifts to a function
on the classes of `fundamentalCone.integralPoint K` modulo `torsion K`. -/
def quotIntNorm :
    Quotient (MulAction.orbitRel (torsion K) (integralPoint K)) ‚Üí ‚Ñï :=
  Quotient.lift (fun x ‚Ü¶ intNorm x) fun a b ‚ü®u, hu‚ü© ‚Ü¶ by
    rw [‚Üê Nat.cast_inj (R := ‚Ñù), intNorm_coe, intNorm_coe, ‚Üê hu, integralPoint_torsionSMul_smul_coe,
      norm_unitSMul]

@[simp]
theorem quotIntNorm_apply (a : integralPoint K) : quotIntNorm ‚ü¶a‚üß = intNorm a := rfl

variable (K) in
def integralPointEquivNorm (n : ‚Ñï) :
    {a : integralPoint K // intNorm a = n} ‚âÉ
      {I : (Ideal (ùìû K))‚Å∞ // IsPrincipal (I : Ideal (ùìû K)) ‚àß
        absNorm (I : Ideal (ùìû K)) = n} √ó (torsion K) :=
  calc {a // intNorm a = n}
      ‚âÉ {I : {I : (Ideal (ùìû K))‚Å∞ // IsPrincipal I.1} √ó torsion K //
          absNorm (I.1 : Ideal (ùìû K)) = n} :=
      (Equiv.subtypeEquiv (integralPointEquiv K) fun _ ‚Ü¶ by simp [intNorm, absNorm_span_singleton])
    _ ‚âÉ {I : {I : (Ideal (ùìû K))‚Å∞ // IsPrincipal I.1} // absNorm (I.1 : Ideal (ùìû K)) = n} √ó
          torsion K :=
      Equiv.prodSubtypeFstEquivSubtypeProd (p := fun I : {I : (Ideal (ùìû K))‚Å∞ // IsPrincipal I.1} ‚Ü¶
        absNorm (I : Ideal (ùìû K)) = n)
    _ ‚âÉ {I : (Ideal (ùìû K))‚Å∞ // IsPrincipal (I : Ideal (ùìû K)) ‚àß
          absNorm (I : Ideal (ùìû K)) = n} √ó (torsion K) :=
      Equiv.prodCongrLeft fun _ ‚Ü¶ (Equiv.subtypeSubtypeEquivSubtypeInter
        (fun I : (Ideal (ùìû K))‚Å∞ ‚Ü¶ IsPrincipal I.1) (fun I ‚Ü¶ absNorm I.1 = n))

@[simp]
theorem integralPointEquivNorm_apply_fst {n : ‚Ñï} {a : integralPoint K} (ha : intNorm a = n) :
    ((integralPointEquivNorm K n ‚ü®a, ha‚ü©).1 : Ideal (ùìû K)) =
      span {(preimageOfIntegralPoint a : ùìû K)} := by
  simp_rw [‚Üê associatesNonZeroDivisorsEquivIsPrincipal_apply,
    ‚Üê integralPointQuotEquivAssociates_apply]
  rfl

variable (K)

/-- For `n` positive, the number of `fundamentalCone.integralPoint K` of
norm `n` is equal to the number of principal ideals in `ùìû K` of norm `n` multiplied by the number
of roots of unity in `K`. -/
theorem card_isPrincipal_norm_eq (n : ‚Ñï) :
    Nat.card {I : (Ideal (ùìû K))‚Å∞ | IsPrincipal (I : Ideal (ùìû K)) ‚àß
      absNorm (I : Ideal (ùìû K)) = n} * torsionOrder K =
        Nat.card {a : integralPoint K | intNorm a = n} := by
  rw [torsionOrder, PNat.mk_coe, ‚Üê Nat.card_eq_fintype_card, ‚Üê Nat.card_prod]
  exact Nat.card_congr (integralPointEquivNorm K n).symm

theorem card_isPrincipal_norm_le (n : ‚Ñï) :
    Nat.card {I : (Ideal (ùìû K))‚Å∞ | IsPrincipal (I : Ideal (ùìû K)) ‚àß
      absNorm (I : Ideal (ùìû K)) ‚â§ n} * torsionOrder K =
        Nat.card {a : integralPoint K | intNorm a ‚â§ n} := by
  rw [torsionOrder, PNat.mk_coe, ‚Üê Nat.card_eq_fintype_card, ‚Üê Nat.card_prod]
  refine Nat.card_congr <| @Equiv.ofFiberEquiv _ (Œ≥ := Finset.Iic n) _
      (fun I ‚Ü¶ ‚ü®absNorm (I.1 : Ideal (ùìû K)), Finset.mem_Iic.mpr I.1.2.2‚ü©)
      (fun a ‚Ü¶ ‚ü®intNorm a.1, Finset.mem_Iic.mpr a.2‚ü©) fun ‚ü®i, hi‚ü© ‚Ü¶ ?_
  simp_rw [Subtype.mk.injEq]
  calc
    _ ‚âÉ {I : {I : (Ideal (ùìû K))‚Å∞ // IsPrincipal I.1 ‚àß absNorm I.1 ‚â§ n} // absNorm I.1.1 = i}
          √ó torsion K := Equiv.prodSubtypeFstEquivSubtypeProd
    _ ‚âÉ {I : (Ideal (ùìû K))‚Å∞ // (IsPrincipal I.1 ‚àß absNorm I.1 ‚â§ n) ‚àß absNorm I.1 = i}
          √ó torsion K := Equiv.prodCongrLeft fun _ ‚Ü¶ (Equiv.subtypeSubtypeEquivSubtypeInter
      (p := fun I : (Ideal (ùìû K))‚Å∞ ‚Ü¶ IsPrincipal I.1 ‚àß absNorm I.1 ‚â§ n)
      (q := fun I ‚Ü¶ absNorm I.1 = i))
    _ ‚âÉ {I : (Ideal (ùìû K))‚Å∞ // IsPrincipal I.1 ‚àß absNorm I.1 = i ‚àß absNorm I.1 ‚â§ n}
          √ó torsion K := Equiv.prodCongrLeft fun _ ‚Ü¶ (Equiv.subtypeEquivRight fun _ ‚Ü¶ by aesop)
    _ ‚âÉ {I : (Ideal (ùìû K))‚Å∞ // IsPrincipal I.1 ‚àß absNorm I.1 = i} √ó torsion K :=
      Equiv.prodCongrLeft fun _ ‚Ü¶ (Equiv.subtypeEquivRight fun _ ‚Ü¶ by
      rw [and_iff_left_of_imp (a := absNorm _ = _) fun h ‚Ü¶ Finset.mem_Iic.mp (h ‚ñ∏ hi)])
    _ ‚âÉ {a : integralPoint K // intNorm a = i} := (integralPointEquivNorm K i).symm
    _ ‚âÉ {a : {a : integralPoint K // intNorm a ‚â§ n} // intNorm a.1 = i} :=
      (Equiv.subtypeSubtypeEquivSubtype fun h ‚Ü¶ Finset.mem_Iic.mp (h ‚ñ∏ hi)).symm

end fundamentalCone

end

end NumberField.mixedEmbedding
