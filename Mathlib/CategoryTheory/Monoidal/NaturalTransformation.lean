/-
Copyright (c) 2020 Kim Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kim Morrison
-/
import Mathlib.CategoryTheory.Adjunction.FullyFaithful
import Mathlib.CategoryTheory.Monoidal.Functor
import Mathlib.CategoryTheory.FullSubcategory

/-!
# Monoidal natural transformations

Natural transformations between (lax) monoidal functors must satisfy
an additional compatibility relation with the tensorators:
`F.Œº X Y ‚â´ app (X ‚äó Y) = (app X ‚äó app Y) ‚â´ G.Œº X Y`.

-/

open CategoryTheory

universe v‚ÇÅ v‚ÇÇ v‚ÇÉ v‚ÇÑ u‚ÇÅ u‚ÇÇ u‚ÇÉ u‚ÇÑ

open CategoryTheory.Category

open CategoryTheory.Functor

namespace CategoryTheory

open MonoidalCategory

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] [MonoidalCategory.{v‚ÇÅ} C]
  {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D] [MonoidalCategory.{v‚ÇÇ} D]
  {E : Type u‚ÇÉ} [Category.{v‚ÇÉ} E] [MonoidalCategory.{v‚ÇÉ} E]

variable {F‚ÇÅ F‚ÇÇ F‚ÇÉ : C ‚•§ D} (œÑ : F‚ÇÅ ‚ü∂ F‚ÇÇ) [F‚ÇÅ.LaxMonoidal] [F‚ÇÇ.LaxMonoidal] [F‚ÇÉ.LaxMonoidal]

namespace NatTrans

open Functor.LaxMonoidal

/-- A natural transformation between (lax) monoidal functors is monoidal if it satisfies
`Œµ F ‚â´ œÑ.app (ùüô_ C) = Œµ G` and `Œº F X Y ‚â´ app (X ‚äó Y) = (app X ‚äó app Y) ‚â´ Œº G X Y`. -/
class IsMonoidal where
  unit : Œµ F‚ÇÅ ‚â´ œÑ.app (ùüô_ C) = Œµ F‚ÇÇ := by aesop_cat
  tensor (X Y : C) : Œº F‚ÇÅ _ _ ‚â´ œÑ.app (X ‚äó Y) = (œÑ.app X ‚äó œÑ.app Y) ‚â´ Œº F‚ÇÇ _ _ := by aesop_cat

namespace IsMonoidal

attribute [reassoc (attr := simp)] unit tensor

instance id : IsMonoidal (ùüô F‚ÇÅ) where

instance comp (œÑ' : F‚ÇÇ ‚ü∂ F‚ÇÉ) [IsMonoidal œÑ] [IsMonoidal œÑ'] :
    IsMonoidal (œÑ ‚â´ œÑ') where

instance {G‚ÇÅ G‚ÇÇ : D ‚•§ E} [G‚ÇÅ.LaxMonoidal] [G‚ÇÇ.LaxMonoidal] (œÑ' : G‚ÇÅ ‚ü∂ G‚ÇÇ)
    [IsMonoidal œÑ] [IsMonoidal œÑ'] : IsMonoidal (œÑ ‚ó´ œÑ') where
  unit := by
    simp only [comp_obj, comp_Œµ, hcomp_app, assoc, naturality_assoc, unit_assoc, ‚Üê map_comp, unit]
  tensor X Y := by
    simp only [comp_obj, comp_Œº, hcomp_app, assoc, naturality_assoc,
      tensor_assoc, tensor_comp, Œº_natural_assoc]
    simp only [‚Üê map_comp, tensor]

instance (F : C ‚•§ D) [F.LaxMonoidal] : NatTrans.IsMonoidal F.leftUnitor.hom where
instance (F : C ‚•§ D) [F.LaxMonoidal] : NatTrans.IsMonoidal F.rightUnitor.hom where

instance {E' : Type u‚ÇÑ} [Category.{v‚ÇÑ} E'] [MonoidalCategory E']
    (F : C ‚•§ D) (G : D ‚•§ E) (H : E ‚•§ E') [F.LaxMonoidal] [G.LaxMonoidal] [H.LaxMonoidal]:
    NatTrans.IsMonoidal (Functor.associator F G H).hom where
  unit := by
    simp only [comp_obj, comp_Œµ, assoc, Functor.map_comp, associator_hom_app, comp_id,
      Functor.comp_map]
  tensor X Y := by
    simp only [comp_obj, comp_Œº, associator_hom_app, Functor.comp_map, map_comp,
      comp_id, tensorHom_id, id_whiskerRight, assoc, id_comp]

end IsMonoidal

end NatTrans

--/-- The cartesian product of two monoidal natural transformations is monoidal. -/
--@[simps]
--def prod {F G : LaxMonoidalFunctor C D} {H K : LaxMonoidalFunctor C E} (Œ± : MonoidalNatTrans F G)
--    (Œ≤ : MonoidalNatTrans H K) : MonoidalNatTrans (F.prod' H) (G.prod' K) where
--  app X := (Œ±.app X, Œ≤.app X)

namespace Iso

variable (e : F‚ÇÅ ‚âÖ F‚ÇÇ) [NatTrans.IsMonoidal e.hom]

instance : NatTrans.IsMonoidal e.inv where
  unit := by rw [‚Üê NatTrans.IsMonoidal.unit (œÑ := e.hom), assoc, hom_inv_id_app, comp_id]
  tensor X Y := by
    rw [‚Üê cancel_mono (e.hom.app (X ‚äó Y)), assoc, assoc, inv_hom_id_app, comp_id,
      NatTrans.IsMonoidal.tensor, ‚Üê MonoidalCategory.tensor_comp_assoc,
      inv_hom_id_app, inv_hom_id_app, tensorHom_id, id_whiskerRight, id_comp]

end Iso

namespace Adjunction

variable {F : C ‚•§ D} {G : D ‚•§ C} (adj : F ‚ä£ G) [F.Monoidal] [G.LaxMonoidal] [adj.IsMonoidal]

instance : NatTrans.IsMonoidal adj.unit where
  unit := by
    dsimp only [comp_obj, id_obj, Functor.id_map, comp_id, id_comp, implies_true, tensorHom_id,
      id_whiskerRight, whiskerRight_tensor, Iso.inv_hom_id, MonoidalCategory.whiskerRight_id,
      Iso.hom_inv_id, LaxMonoidal.ofTensorHom_Œµ, LaxMonoidal.comp_Œµ]
    simp only [id_comp, Adjunction.IsMonoidal.leftAdjoint_Œµ (adj := adj), homEquiv_apply,
      assoc, Monoidal.map_Œ∑_Œµ, comp_obj, comp_id]
  tensor X Y := by
    dsimp only [id_obj, comp_obj, LaxMonoidal.id_Œº, LaxMonoidal.comp_Œº]
    simp only [id_comp]
    rw [Adjunction.IsMonoidal.leftAdjoint_Œº (adj := adj)]
    sorry
    --dsimp
    --simp only [id_comp, comp_id, assoc, Adjunction.homEquiv_unit,
    --  ‚Üê h.unit_naturality_assoc, ‚Üê Functor.map_comp,
    --  F.map_tensor, IsIso.hom_inv_id_assoc, ‚Üê tensor_comp_assoc,
    --  Adjunction.left_triangle_components, tensorHom_id, id_whiskerRight,
    --  IsIso.inv_hom_id, map_id]

instance : NatTrans.IsMonoidal adj.counit where
  unit := by
    dsimp only [id_obj, comp_obj, LaxMonoidal.comp_Œµ, Functor.id_map, comp_id, id_comp,
      implies_true, tensorHom_id, id_whiskerRight, whiskerRight_tensor, Iso.inv_hom_id,
      MonoidalCategory.whiskerRight_id, Iso.hom_inv_id, LaxMonoidal.ofTensorHom_Œµ]
    simp only [Adjunction.IsMonoidal.leftAdjoint_Œµ (adj := adj),
      homEquiv_apply, comp_obj, map_comp, assoc, counit_naturality, id_obj,
      left_triangle_components_assoc, Monoidal.Œµ_Œ∑]
  tensor X Y := sorry
  --  have eq := h.counit_naturality (F.Œº (G.obj X) (G.obj Y)) =‚â´ inv (F.Œº _ _)
  --  simp only [assoc, IsIso.hom_inv_id, comp_id] at eq
  --  dsimp
  --  simp only [Adjunction.homEquiv_unit, comp_id, assoc,
  --    map_comp, map_inv, h.counit_naturality, ‚Üê eq,
  --    h.left_triangle_components_assoc,
  --    IsIso.inv_hom_id_assoc, IsIso.hom_inv_id_assoc]

end Adjunction

end CategoryTheory
