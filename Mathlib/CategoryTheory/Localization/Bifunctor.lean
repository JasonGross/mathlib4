/-
Copyright (c) 2023 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Localization.Prod
import Mathlib.CategoryTheory.Functor.Currying

/-!
# Lifting of bifunctors

-/

namespace CategoryTheory

open Category

variable {C‚ÇÅ C‚ÇÇ D‚ÇÅ D‚ÇÇ E E' : Type*} [Category C‚ÇÅ] [Category C‚ÇÇ]
  [Category D‚ÇÅ] [Category D‚ÇÇ] [Category E] [Category E']

@[reassoc (attr := simp)]
lemma Iso.hom_inv_id_app_app {F G : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ E} (e : F ‚âÖ G) (X‚ÇÅ : C‚ÇÅ) (X‚ÇÇ : C‚ÇÇ) :
    (e.hom.app X‚ÇÅ).app X‚ÇÇ ‚â´ (e.inv.app X‚ÇÅ).app X‚ÇÇ = ùüô _ := by
  rw [‚Üê NatTrans.comp_app, Iso.hom_inv_id_app, NatTrans.id_app]

@[reassoc (attr := simp)]
lemma Iso.inv_hom_id_app_app {F G : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ E} (e : F ‚âÖ G) (X‚ÇÅ : C‚ÇÅ) (X‚ÇÇ : C‚ÇÇ) :
    (e.inv.app X‚ÇÅ).app X‚ÇÇ ‚â´ (e.hom.app X‚ÇÅ).app X‚ÇÇ = ùüô _ := by
  rw [‚Üê NatTrans.comp_app, Iso.inv_hom_id_app, NatTrans.id_app]

@[simps!]
def curryObjProdComp (F‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ) (F‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ) (G : D‚ÇÅ √ó D‚ÇÇ ‚•§ E) :
    curry.obj ((F‚ÇÅ.prod F‚ÇÇ).comp G) ‚âÖ
      F‚ÇÅ ‚ãô curry.obj G ‚ãô (whiskeringLeft C‚ÇÇ D‚ÇÇ E).obj F‚ÇÇ :=
  NatIso.ofComponents (fun X‚ÇÅ => NatIso.ofComponents (fun X‚ÇÇ => Iso.refl _))

@[simps!]
def whiskeringLeft‚ÇÇObjObj (F‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ) (F‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ) (E : Type*) [Category E] :
    (D‚ÇÅ ‚•§ D‚ÇÇ ‚•§ E) ‚•§ (C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ E) :=
  (whiskeringRight D‚ÇÅ (D‚ÇÇ ‚•§ E) (C‚ÇÇ ‚•§ E)).obj ((whiskeringLeft C‚ÇÇ D‚ÇÇ E).obj F‚ÇÇ) ‚ãô
    (whiskeringLeft C‚ÇÅ D‚ÇÅ (C‚ÇÇ ‚•§ E)).obj F‚ÇÅ

-- whiskeringRight‚ÇÇ should be given a better name
variable (C‚ÇÅ C‚ÇÇ) in
@[simps!]
def whiskeringRight‚ÇÇ' (G : E ‚•§ E') :
    (C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ E) ‚•§ C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ E' :=
  (whiskeringRight C‚ÇÅ (C‚ÇÇ ‚•§ E) (C‚ÇÇ ‚•§ E')).obj ((whiskeringRight C‚ÇÇ E E').obj G)

namespace MorphismProperty

def IsInvertedBy‚ÇÇ (W‚ÇÅ : MorphismProperty C‚ÇÅ) (W‚ÇÇ : MorphismProperty C‚ÇÇ)
    (F : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ E) : Prop :=
  (W‚ÇÅ.prod W‚ÇÇ).IsInvertedBy (uncurry.obj F)

end MorphismProperty

namespace Localization

section

variable (L‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ) (L‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ)

class Lifting‚ÇÇ (W‚ÇÅ : MorphismProperty C‚ÇÅ) (W‚ÇÇ : MorphismProperty C‚ÇÇ)
    (F : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ E) (F' : D‚ÇÅ ‚•§ D‚ÇÇ ‚•§ E) where
  iso' : (whiskeringLeft‚ÇÇObjObj L‚ÇÅ L‚ÇÇ E).obj F' ‚âÖ F

variable (W‚ÇÅ : MorphismProperty C‚ÇÅ) (W‚ÇÇ : MorphismProperty C‚ÇÇ)
  (F : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ E) (F' : D‚ÇÅ ‚•§ D‚ÇÇ ‚•§ E) [Lifting‚ÇÇ L‚ÇÅ L‚ÇÇ W‚ÇÅ W‚ÇÇ F F']

noncomputable def Lifting‚ÇÇ.iso : (whiskeringLeft‚ÇÇObjObj L‚ÇÅ L‚ÇÇ E).obj F' ‚âÖ F :=
  Lifting‚ÇÇ.iso' W‚ÇÅ W‚ÇÇ

noncomputable def Lifting‚ÇÇ.fst (X‚ÇÅ : C‚ÇÅ) :
    Lifting L‚ÇÇ W‚ÇÇ (F.obj X‚ÇÅ) (F'.obj (L‚ÇÅ.obj X‚ÇÅ)) where
  iso' := ((evaluation _ _).obj X‚ÇÅ).mapIso (Lifting‚ÇÇ.iso L‚ÇÅ L‚ÇÇ W‚ÇÅ W‚ÇÇ F F')

noncomputable instance Lifting‚ÇÇ.flip : Lifting‚ÇÇ L‚ÇÇ L‚ÇÅ W‚ÇÇ W‚ÇÅ F.flip F'.flip where
  iso' := (flipFunctor _ _ _).mapIso (Lifting‚ÇÇ.iso L‚ÇÅ L‚ÇÇ W‚ÇÅ W‚ÇÇ F F')

noncomputable def Lifting‚ÇÇ.snd (X‚ÇÇ : C‚ÇÇ) :
    Lifting L‚ÇÅ W‚ÇÅ (F.flip.obj X‚ÇÇ) (F'.flip.obj (L‚ÇÇ.obj X‚ÇÇ)) :=
  Lifting‚ÇÇ.fst L‚ÇÇ L‚ÇÅ W‚ÇÇ W‚ÇÅ F.flip F'.flip X‚ÇÇ

noncomputable instance Lifting‚ÇÇ.uncurry [Lifting‚ÇÇ L‚ÇÅ L‚ÇÇ W‚ÇÅ W‚ÇÇ F F'] :
    Lifting (L‚ÇÅ.prod L‚ÇÇ) (W‚ÇÅ.prod W‚ÇÇ) (uncurry.obj F) (uncurry.obj F') where
  iso' := CategoryTheory.uncurry.mapIso (Lifting‚ÇÇ.iso L‚ÇÅ L‚ÇÇ W‚ÇÅ W‚ÇÇ F F')

end

section

variable (F : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ E) {W‚ÇÅ : MorphismProperty C‚ÇÅ} {W‚ÇÇ : MorphismProperty C‚ÇÇ}
  (hF : MorphismProperty.IsInvertedBy‚ÇÇ W‚ÇÅ W‚ÇÇ F)
  (L‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ) (L‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ)
  [L‚ÇÅ.IsLocalization W‚ÇÅ] [L‚ÇÇ.IsLocalization W‚ÇÇ]
  [W‚ÇÅ.ContainsIdentities] [W‚ÇÇ.ContainsIdentities]

noncomputable def lift‚ÇÇ : D‚ÇÅ ‚•§ D‚ÇÇ ‚•§ E :=
  curry.obj (lift (uncurry.obj F) hF (L‚ÇÅ.prod L‚ÇÇ))

noncomputable instance : Lifting‚ÇÇ L‚ÇÅ L‚ÇÇ W‚ÇÅ W‚ÇÇ F (lift‚ÇÇ F hF L‚ÇÅ L‚ÇÇ) where
  iso' := (curryObjProdComp _ _ _).symm ‚â™‚â´
    curry.mapIso (fac (uncurry.obj F) hF (L‚ÇÅ.prod L‚ÇÇ)) ‚â™‚â´
    currying.unitIso.symm.app F

noncomputable instance Lifting‚ÇÇ.liftingLift‚ÇÇ (X‚ÇÅ : C‚ÇÅ) :
    Lifting L‚ÇÇ W‚ÇÇ (F.obj X‚ÇÅ) ((lift‚ÇÇ F hF L‚ÇÅ L‚ÇÇ).obj (L‚ÇÅ.obj X‚ÇÅ)) :=
  Lifting‚ÇÇ.fst _ _ W‚ÇÅ _ _ _ _

noncomputable instance Lifting‚ÇÇ.liftingLift‚ÇÇFlip (X‚ÇÇ : C‚ÇÇ) :
    Lifting L‚ÇÅ W‚ÇÅ (F.flip.obj X‚ÇÇ) ((lift‚ÇÇ F hF L‚ÇÅ L‚ÇÇ).flip.obj (L‚ÇÇ.obj X‚ÇÇ)) :=
  Lifting‚ÇÇ.snd _ _ _ W‚ÇÇ _ _ _

lemma lift‚ÇÇ_iso_hom_app_app‚ÇÅ (X‚ÇÅ : C‚ÇÅ) (X‚ÇÇ : C‚ÇÇ) :
    ((Lifting‚ÇÇ.iso L‚ÇÅ L‚ÇÇ W‚ÇÅ W‚ÇÇ F (lift‚ÇÇ F hF L‚ÇÅ L‚ÇÇ)).hom.app X‚ÇÅ).app X‚ÇÇ =
      (Lifting.iso L‚ÇÇ W‚ÇÇ (F.obj X‚ÇÅ) ((lift‚ÇÇ F hF L‚ÇÅ L‚ÇÇ).obj (L‚ÇÅ.obj X‚ÇÅ))).hom.app X‚ÇÇ :=
  rfl

lemma lift‚ÇÇ_iso_hom_app_app‚ÇÇ (X‚ÇÅ : C‚ÇÅ) (X‚ÇÇ : C‚ÇÇ) :
    ((Lifting‚ÇÇ.iso L‚ÇÅ L‚ÇÇ W‚ÇÅ W‚ÇÇ F (lift‚ÇÇ F hF L‚ÇÅ L‚ÇÇ)).hom.app X‚ÇÅ).app X‚ÇÇ =
      (Lifting.iso L‚ÇÅ W‚ÇÅ (F.flip.obj X‚ÇÇ) ((lift‚ÇÇ F hF L‚ÇÅ L‚ÇÇ).flip.obj (L‚ÇÇ.obj X‚ÇÇ))).hom.app X‚ÇÅ :=
  rfl

end

section

variable (L‚ÇÅ : C‚ÇÅ ‚•§ D‚ÇÅ) (L‚ÇÇ : C‚ÇÇ ‚•§ D‚ÇÇ)
  (W‚ÇÅ : MorphismProperty C‚ÇÅ) (W‚ÇÇ : MorphismProperty C‚ÇÇ)
  [L‚ÇÅ.IsLocalization W‚ÇÅ] [L‚ÇÇ.IsLocalization W‚ÇÇ]
  [W‚ÇÅ.ContainsIdentities] [W‚ÇÇ.ContainsIdentities]
  (F‚ÇÅ F‚ÇÇ : C‚ÇÅ ‚•§ C‚ÇÇ ‚•§ E) (F‚ÇÅ' F‚ÇÇ' : D‚ÇÅ ‚•§ D‚ÇÇ ‚•§ E)
  [Lifting‚ÇÇ L‚ÇÅ L‚ÇÇ W‚ÇÅ W‚ÇÇ F‚ÇÅ F‚ÇÅ'] [Lifting‚ÇÇ L‚ÇÅ L‚ÇÇ W‚ÇÅ W‚ÇÇ F‚ÇÇ F‚ÇÇ'] (œÑ : F‚ÇÅ ‚ü∂ F‚ÇÇ)
  (e : F‚ÇÅ ‚âÖ F‚ÇÇ)

noncomputable def lift‚ÇÇNatTrans : F‚ÇÅ' ‚ü∂ F‚ÇÇ' :=
  fullyFaithfulUncurry.preimage
    (liftNatTrans (L‚ÇÅ.prod L‚ÇÇ) (W‚ÇÅ.prod W‚ÇÇ) (uncurry.obj F‚ÇÅ)
      (uncurry.obj F‚ÇÇ) (uncurry.obj F‚ÇÅ') (uncurry.obj F‚ÇÇ') (uncurry.map œÑ))

@[simp]
theorem lift‚ÇÇNatTrans_app_app (X‚ÇÅ : C‚ÇÅ) (X‚ÇÇ : C‚ÇÇ) :
    ((lift‚ÇÇNatTrans L‚ÇÅ L‚ÇÇ W‚ÇÅ W‚ÇÇ F‚ÇÅ F‚ÇÇ F‚ÇÅ' F‚ÇÇ' œÑ).app (L‚ÇÅ.obj X‚ÇÅ)).app (L‚ÇÇ.obj X‚ÇÇ) =
      ((Lifting‚ÇÇ.iso L‚ÇÅ L‚ÇÇ W‚ÇÅ W‚ÇÇ F‚ÇÅ F‚ÇÅ').hom.app X‚ÇÅ).app X‚ÇÇ ‚â´ (œÑ.app X‚ÇÅ).app X‚ÇÇ ‚â´
        ((Lifting‚ÇÇ.iso L‚ÇÅ L‚ÇÇ W‚ÇÅ W‚ÇÇ F‚ÇÇ F‚ÇÇ').inv.app X‚ÇÅ).app X‚ÇÇ := by
  dsimp [lift‚ÇÇNatTrans, fullyFaithfulUncurry, Equivalence.fullyFaithfulFunctor]
  simp only [currying_unitIso_hom_app_app_app, currying_unitIso_inv_app_app_app, comp_id, id_comp]
  exact liftNatTrans_app _ _ _ _ (uncurry.obj F‚ÇÅ') (uncurry.obj F‚ÇÇ') (uncurry.map œÑ) ‚ü®X‚ÇÅ, X‚ÇÇ‚ü©

variable {F‚ÇÅ' F‚ÇÇ'} in
include W‚ÇÅ W‚ÇÇ in
theorem natTrans‚ÇÇ_ext {œÑ œÑ' : F‚ÇÅ' ‚ü∂ F‚ÇÇ'}
    (h : ‚àÄ (X‚ÇÅ : C‚ÇÅ) (X‚ÇÇ : C‚ÇÇ), (œÑ.app (L‚ÇÅ.obj X‚ÇÅ)).app (L‚ÇÇ.obj X‚ÇÇ) =
      (œÑ'.app (L‚ÇÅ.obj X‚ÇÅ)).app (L‚ÇÇ.obj X‚ÇÇ)) : œÑ = œÑ' :=
  uncurry.map_injective (natTrans_ext (L‚ÇÅ.prod L‚ÇÇ) (W‚ÇÅ.prod W‚ÇÇ) (fun _ ‚Ü¶ h _ _))

noncomputable def lift‚ÇÇNatIso : F‚ÇÅ' ‚âÖ F‚ÇÇ' where
  hom := lift‚ÇÇNatTrans L‚ÇÅ L‚ÇÇ W‚ÇÅ W‚ÇÇ F‚ÇÅ F‚ÇÇ F‚ÇÅ' F‚ÇÇ' e.hom
  inv := lift‚ÇÇNatTrans L‚ÇÅ L‚ÇÇ W‚ÇÅ W‚ÇÇ F‚ÇÇ F‚ÇÅ F‚ÇÇ' F‚ÇÅ' e.inv
  hom_inv_id := natTrans‚ÇÇ_ext L‚ÇÅ L‚ÇÇ W‚ÇÅ W‚ÇÇ (by aesop_cat)
  inv_hom_id := natTrans‚ÇÇ_ext L‚ÇÅ L‚ÇÇ W‚ÇÅ W‚ÇÇ (by aesop_cat)

end

end Localization

end CategoryTheory
