/-
Copyright (c) 2021 Jakob von Raumer. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jakob von Raumer
-/
import Mathlib.LinearAlgebra.DirectSum.Finsupp
import Mathlib.LinearAlgebra.FinsuppVectorSpace
import Mathlib.LinearAlgebra.Basis.Basic

/-!
# Bases and dimensionality of tensor products of modules

These can not go into `LinearAlgebra.TensorProduct` since they depend on
`LinearAlgebra.FinsuppVectorSpace` which in turn imports `LinearAlgebra.TensorProduct`.
-/


noncomputable section

open Set LinearMap Submodule

open scoped TensorProduct

section CommSemiring

variable {R : Type*} {S : Type*} {M : Type*} {N : Type*} {Œπ : Type*} {Œ∫ : Type*}
  [CommSemiring R] [Semiring S] [Algebra R S] [AddCommMonoid M] [Module R M] [Module S M]
  [IsScalarTower R S M] [AddCommMonoid N] [Module R N]

/-- If `b : Œπ ‚Üí M` and `c : Œ∫ ‚Üí N` are bases then so is `fun i ‚Ü¶ b i.1 ‚äó‚Çú c i.2 : Œπ √ó Œ∫ ‚Üí M ‚äó N`. -/
def Basis.tensorProduct (b : Basis Œπ S M) (c : Basis Œ∫ R N) :
    Basis (Œπ √ó Œ∫) S (M ‚äó[R] N) :=
  Finsupp.basisSingleOne.map
    ((TensorProduct.AlgebraTensorModule.congr b.repr c.repr).trans <|
        (finsuppTensorFinsupp R S _ _ _ _).trans <|
          Finsupp.lcongr (Equiv.refl _) (TensorProduct.AlgebraTensorModule.rid R S S)).symm

@[simp]
theorem Basis.tensorProduct_apply (b : Basis Œπ S M) (c : Basis Œ∫ R N) (i : Œπ) (j : Œ∫) :
    Basis.tensorProduct b c (i, j) = b i ‚äó‚Çú c j := by
  simp [Basis.tensorProduct]

theorem Basis.tensorProduct_apply' (b : Basis Œπ S M) (c : Basis Œ∫ R N) (i : Œπ √ó Œ∫) :
    Basis.tensorProduct b c i = b i.1 ‚äó‚Çú c i.2 := by
  simp [Basis.tensorProduct]

@[simp]
theorem Basis.tensorProduct_repr_tmul_apply (b : Basis Œπ S M) (c : Basis Œ∫ R N) (m : M) (n : N)
    (i : Œπ) (j : Œ∫) :
    (Basis.tensorProduct b c).repr (m ‚äó‚Çú n) (i, j) = c.repr n j ‚Ä¢ b.repr m i := by
  simp [Basis.tensorProduct, mul_comm]

variable (S : Type*) [Semiring S] [Algebra R S]

/-- The lift of an `R`-basis of `M` to an `S`-basis of the base change `S ‚äó[R] M`. -/
noncomputable
def Basis.baseChange (b : Basis Œπ R M) : Basis Œπ S (S ‚äó[R] M) :=
  ((Basis.singleton Unit S).tensorProduct b).reindex (Equiv.punitProd Œπ)

@[simp]
lemma Basis.baseChange_repr_tmul (b : Basis Œπ R M) (x y i) :
    (b.baseChange S).repr (x ‚äó‚Çú y) i = b.repr y i ‚Ä¢ x := by
  simp [Basis.baseChange, Basis.tensorProduct]

@[simp]
lemma Basis.baseChange_apply (b : Basis Œπ R M) (i) :
    b.baseChange S i = 1 ‚äó‚Çú b i := by
  simp [Basis.baseChange, Basis.tensorProduct]

variable {ŒπN ŒπM : Type*} (‚Ñ¨ : Basis ŒπM R M) (ùíû : Basis ŒπN R N) (x : M ‚äó[R] N)

/-- Elements in M ‚äó N can be represented by sum of elements in M tensor elements of basis of N.-/
lemma TensorProduct.eq_repr_basis_right :
    ‚àÉ (b : ŒπN ‚Üí‚ÇÄ M), (b.sum fun i m => m ‚äó‚Çú ùíû i) = x := by
  classical
  induction x using TensorProduct.induction_on with
  | zero => exact ‚ü®0, by simp‚ü©
  | tmul m n =>
    use ùíû.repr n |>.mapRange (fun (r : R) => r ‚Ä¢ m) (by simp)
    simp only [Finsupp.mapRange, zero_tmul, implies_true, Finsupp.onFinset_sum, Function.comp_apply,
      smul_tmul]
    rw [‚Üê tmul_sum]
    congr
    conv_rhs => rw [‚Üê Basis.linearCombination_repr ùíû n]
    rfl
  | add x y hx hy =>
    rcases hx with ‚ü®x, rfl‚ü©
    rcases hy with ‚ü®y, rfl‚ü©
    use x + y
    rw [Finsupp.sum_add_index]
    ¬∑ simp
    ¬∑ intro i _; simp [add_tmul]

/-- Elements in M ‚äó N can be represented by sum of elements of basis of M tensor elements of N.-/
lemma TensorProduct.eq_repr_basis_left :
    ‚àÉ (c : ŒπM ‚Üí‚ÇÄ N), (c.sum fun i n => ‚Ñ¨ i ‚äó‚Çú n) = x := by
  obtain ‚ü®c, hc‚ü© := TensorProduct.eq_repr_basis_right ‚Ñ¨ (TensorProduct.comm R M N x)
  refine ‚ü®c, ?_‚ü©
  apply_fun TensorProduct.comm R M N using (TensorProduct.comm R M N).injective
  simp only [Finsupp.sum, map_sum, comm_tmul, ‚Üê hc]

include ‚Ñ¨ in
lemma TensorProduct.sum_tmul_basis_right_eq_zero
    (b : ŒπN ‚Üí‚ÇÄ M) (h : (b.sum fun i m => m ‚äó‚Çú[R] ùíû i) = 0) :
    b = 0 := by
  classical
  let ùíØ := Basis.tensorProduct ‚Ñ¨ ùíû
  let I := b.support.biUnion fun i => (‚Ñ¨.repr (b i)).support
  have eq1 := calc (0 : M ‚äó[R] N)
      _ = ‚àë i ‚àà b.support, b i ‚äó‚Çú[R] ùíû i := h.symm
      _ = ‚àë i ‚àà b.support, (‚àë k ‚àà (‚Ñ¨.repr (b i)).support, (‚Ñ¨.repr (b i)) k ‚Ä¢ ‚Ñ¨ k) ‚äó‚Çú[R] ùíû i := by
          refine Finset.sum_congr rfl fun z _ => ?_
          congr
          exact ‚Ñ¨.linearCombination_repr (b z) |>.symm
      _ = ‚àë i ‚àà b.support, ‚àë k ‚àà (‚Ñ¨.repr (b i)).support, (‚Ñ¨.repr (b i)) k ‚Ä¢ (‚Ñ¨ k ‚äó‚Çú[R] ùíû i) := by
          refine Finset.sum_congr rfl fun z _ => ?_
          rw [TensorProduct.sum_tmul]
          refine Finset.sum_congr rfl fun _ _ => ?_
          rw [TensorProduct.smul_tmul']
      _ = ‚àë i ‚àà b.support, ‚àë k ‚àà I, (‚Ñ¨.repr (b i)) k ‚Ä¢ (‚Ñ¨ k ‚äó‚Çú[R] ùíû i) := by
          refine Finset.sum_congr rfl fun j h => ?_
          apply Finset.sum_subset
          ¬∑ intro i hi
            simp only [Finsupp.mem_support_iff, ne_eq, Finset.mem_biUnion, I] at h hi ‚ä¢
            exact ‚ü®_, h, hi‚ü©
          ¬∑ intro i hi1 hi2
            simp only [Finsupp.mem_support_iff, ne_eq, Decidable.not_not, smul_eq_zero]
              at hi1 hi2 ‚ä¢
            simp only [hi2, zero_smul]
      _ = ‚àë k ‚àà I, ‚àë i ‚àà b.support, (‚Ñ¨.repr (b i)) k ‚Ä¢ (‚Ñ¨ k ‚äó‚Çú[R] ùíû i) := Finset.sum_comm
      _ = ‚àë ij ‚àà I √óÀ¢ b.support, (‚Ñ¨.repr (b ij.2)) ij.1 ‚Ä¢ (‚Ñ¨ ij.1 ‚äó‚Çú[R] ùíû ij.2) := by
          rw [Finset.sum_product]
      _ = ‚àë ij ‚àà I √óÀ¢ b.support, (‚Ñ¨.repr (b ij.2)) ij.1 ‚Ä¢ ùíØ ij := by
          refine Finset.sum_congr rfl fun ij _ => ?_
          rw [Basis.tensorProduct_apply]
  have LI := ùíØ.linearIndependent
  rw [linearIndependent_iff'] at LI
  specialize LI (I √óÀ¢ b.support) _ eq1.symm
  ext i
  by_cases hi : i ‚àà b.support
  swap
  ¬∑ simp only [Finsupp.mem_support_iff, ne_eq, Decidable.not_not] at hi; exact hi
  rw [‚Üê ‚Ñ¨.linearCombination_repr (b i)]
  change ‚àë _ ‚àà _, _ = 0
  simp only [LinearMap.coe_smulRight, LinearMap.id_coe, id_eq]
  refine Finset.sum_eq_zero fun j hj => ?_
  specialize LI ‚ü®j, i‚ü© (by
    simp only [Finset.mem_product, Finset.mem_biUnion, Finsupp.mem_support_iff, ne_eq, I] at hi hj ‚ä¢
    refine ‚ü®‚ü®_, hi, hj‚ü©, hi‚ü©)
  simp [LI]

include ùíû in
lemma TensorProduct.sum_tmul_basis_left_eq_zero
    (c : ŒπM ‚Üí‚ÇÄ N) (h : (c.sum fun i n => ‚Ñ¨ i ‚äó‚Çú[R] n) = 0) :
    c = 0 := by
  refine TensorProduct.sum_tmul_basis_right_eq_zero ùíû ‚Ñ¨ c ?_
  apply_fun TensorProduct.comm R M N at h
  simp only [Finsupp.sum, map_sum, comm_tmul, map_zero] at h
  exact h

end CommSemiring

end
