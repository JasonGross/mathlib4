/-
Copyright (c) 2024 Nailin Guan. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Nailin Guan, Yuyang Zhao, Jujian Zhang
-/

import Mathlib.Algebra.Category.Grp.FiniteGrp
import Mathlib.CategoryTheory.Category.Preorder
import Mathlib.FieldTheory.NormalClosure
import Mathlib.FieldTheory.SeparableClosure

/-!

# Main definitions and results

In a field extension `K/k`

* `FiniteGaloisIntermediateField` : The type of a finite Galois intermediate field of `K/k`

* `adjoin` : The finite Galois intermediate field obtained from the normal closure of adjoining a
  `s : Set K` to `k`.

* `finGaloisGroup L` : The (finite) Galois group `Gal(K / k)` associated to a
  `L : FiniteGaloisIntermediateField k K` `L`.

* `finGaloisGroupMap` : For `FiniteGaloisIntermediateField` s `L‚ÇÅ` and `L‚ÇÇ` with `L‚ÇÇ ‚â§ L‚ÇÅ`
  giving the restriction of `Gal(L‚ÇÅ/k)` to `Gal(L‚ÇÇ/k)`

* `finGaloisGroupFunctor` : Mapping `FiniteGaloisIntermediateField` ordered by inverse inclusion to
  its corresponding Galois Group as `FiniteGrp`.

# TODO

* `FiniteGaloisIntermediateField` should be a `ConditionallyCompleteLattice` but isn't proved yet.

-/

open CategoryTheory Opposite
open scoped IntermediateField

variable (k K : Type*) [Field k] [Field K] [Algebra k K]

/-- The type of a finite Galois intermediate field of `K/k` -/
@[ext]
structure FiniteGaloisIntermediateField extends IntermediateField k K where
  [finiteDimensional : FiniteDimensional k toIntermediateField]
  [isGalois : IsGalois k toIntermediateField]

namespace FiniteGaloisIntermediateField

instance : Coe (FiniteGaloisIntermediateField k K) (IntermediateField k K) where
  coe := toIntermediateField

instance : CoeSort (FiniteGaloisIntermediateField k K) (Type _) where
  coe L := L.toIntermediateField

instance (L : FiniteGaloisIntermediateField k K) : FiniteDimensional k L :=
  L.finiteDimensional

instance (L : FiniteGaloisIntermediateField k K) : IsGalois k L := L.isGalois

variable {k K}

lemma val_injective : Function.Injective (toIntermediateField (k := k) (K := K)) := by
  rintro ‚ü®‚ü© ‚ü®‚ü© eq
  simpa only [mk.injEq] using eq

/--Make the Finite Galois IntermediateField of `K/k` into an lattice-/

instance (L‚ÇÅ L‚ÇÇ : IntermediateField k K) [IsGalois k L‚ÇÅ] [IsGalois k L‚ÇÇ] :
    IsGalois k ‚Üë(L‚ÇÅ ‚äî L‚ÇÇ) := {}

instance (L‚ÇÅ L‚ÇÇ : IntermediateField k K) [FiniteDimensional k L‚ÇÅ] :
    FiniteDimensional k ‚Üë(L‚ÇÅ ‚äì L‚ÇÇ) :=
  .of_injective (IntermediateField.inclusion inf_le_left).toLinearMap
    (IntermediateField.inclusion inf_le_left).injective

instance (L‚ÇÅ L‚ÇÇ : IntermediateField k K) [FiniteDimensional k L‚ÇÇ] :
    FiniteDimensional k ‚Üë(L‚ÇÅ ‚äì L‚ÇÇ) :=
  .of_injective (IntermediateField.inclusion inf_le_right).toLinearMap
    (IntermediateField.inclusion inf_le_right).injective

instance (L‚ÇÅ L‚ÇÇ : IntermediateField k K) [Algebra.IsSeparable k L‚ÇÅ] :
    Algebra.IsSeparable k ‚Üë(L‚ÇÅ ‚äì L‚ÇÇ) :=
  .of_algHom _ _ (IntermediateField.inclusion inf_le_left)

instance (L‚ÇÅ L‚ÇÇ : IntermediateField k K) [Algebra.IsSeparable k L‚ÇÇ] :
    Algebra.IsSeparable k ‚Üë(L‚ÇÅ ‚äì L‚ÇÇ) :=
  .of_algHom _ _ (IntermediateField.inclusion inf_le_right)

instance (L‚ÇÅ L‚ÇÇ : IntermediateField k K) [IsGalois k L‚ÇÅ] [IsGalois k L‚ÇÇ] :
    IsGalois k ‚Üë(L‚ÇÅ ‚äì L‚ÇÇ) := {}

instance : Sup (FiniteGaloisIntermediateField k K) where
  sup L‚ÇÅ L‚ÇÇ := .mk <| L‚ÇÅ ‚äî L‚ÇÇ

instance : Inf (FiniteGaloisIntermediateField k K) where
  inf L‚ÇÅ L‚ÇÇ := .mk <| L‚ÇÅ ‚äì L‚ÇÇ

instance : Lattice (FiniteGaloisIntermediateField k K) :=
  val_injective.lattice _ (fun _ _ ‚Ü¶ rfl) (fun _ _ ‚Ü¶ rfl)

instance : OrderBot (FiniteGaloisIntermediateField k K) where
  bot := .mk ‚ä•
  bot_le _ := bot_le (Œ± := IntermediateField _ _)

@[simp]
lemma le_iff (L‚ÇÅ L‚ÇÇ : FiniteGaloisIntermediateField k K) :
    L‚ÇÅ ‚â§ L‚ÇÇ ‚Üî L‚ÇÅ.toIntermediateField ‚â§ L‚ÇÇ.toIntermediateField :=
  Iff.rfl

variable (k) in
/-- The finite Galois intermediate field obtained from the normal closure of adjoining a
`s : Set K` to `k`. -/
noncomputable def adjoin [IsGalois k K] (s : Set K) [Finite s] :
    FiniteGaloisIntermediateField k K := {
  normalClosure k (IntermediateField.adjoin k (s : Set K)) K with
  finiteDimensional :=
    letI : FiniteDimensional k (IntermediateField.adjoin k (s : Set K)) :=
      IntermediateField.finiteDimensional_adjoin <| fun z _ =>
        IsAlgebraic.isIntegral (Algebra.IsAlgebraic.isAlgebraic z)
    normalClosure.is_finiteDimensional k (IntermediateField.adjoin k (s : Set K)) K
  isGalois := IsGalois.normalClosure k (IntermediateField.adjoin k (s : Set K)) K }

@[simp]
lemma adjoin_val [IsGalois k K] (s : Set K) [Finite s] :
    (FiniteGaloisIntermediateField.adjoin k s) =
    normalClosure k (IntermediateField.adjoin k s) K :=
  rfl

variable (k) in
lemma subset_adjoin [IsGalois k K] (s : Set K) [Finite s] :
    s ‚äÜ (adjoin k s).toIntermediateField :=
  (IntermediateField.subset_adjoin k s).trans (IntermediateField.le_normalClosure _)

theorem adjoin_le_iff [IsGalois k K] {s : Set K} [Finite s]
    {L : FiniteGaloisIntermediateField k K} : adjoin k s ‚â§ L ‚Üî s ‚â§ L.toIntermediateField := by
  simp only [le_iff, adjoin_val, IntermediateField.normalClosure_le_iff_of_normal,
    IntermediateField.adjoin_le_iff, Set.le_eq_subset]

@[simp]
theorem adjoin_map [IsGalois k K] (f : K ‚Üí‚Çê[k] K) (s : Set K) [Finite s] :
    adjoin k (f '' s) = adjoin k s := by
  apply val_injective; dsimp [adjoin_val]
  rw [‚Üê IntermediateField.adjoin_map, IntermediateField.normalClosure_map]

@[simp]
theorem adjoin_simple_map_algHom [IsGalois k K] (f : K ‚Üí‚Çê[k] K) (x : K) :
    adjoin k {f x} = adjoin k {x} := by
  simpa only [Set.image_singleton] using adjoin_map f { x }

@[simp]
theorem adjoin_simple_map_algEquiv [IsGalois k K] (f : K ‚âÉ‚Çê[k] K) (x : K) :
    adjoin k {f x} = adjoin k {x} :=
  adjoin_simple_map_algHom (f : K ‚Üí‚Çê[k] K) x

/-- The (finite) Galois group `Gal(K / k)` associated to a
`L : FiniteGaloisIntermediateField k K` `L`. -/
def finGaloisGroup (L : FiniteGaloisIntermediateField k K) : FiniteGrp :=
  letI := AlgEquiv.fintype k L
  FiniteGrp.of <| L ‚âÉ‚Çê[k] L

/-- For `FiniteGaloisIntermediateField` s `L‚ÇÅ` and `L‚ÇÇ` with `L‚ÇÇ ‚â§ L‚ÇÅ`
  giving the restriction of `Gal(L‚ÇÅ/k)` to `Gal(L‚ÇÇ/k)`-/
noncomputable def finGaloisGroupMap {L‚ÇÅ L‚ÇÇ : (FiniteGaloisIntermediateField k K)·µí·µñ}
    (le : L‚ÇÅ ‚ü∂ L‚ÇÇ) : L‚ÇÅ.unop.finGaloisGroup ‚ü∂ L‚ÇÇ.unop.finGaloisGroup :=
  haveI : Normal k L‚ÇÇ.unop := IsGalois.to_normal
  letI : Algebra L‚ÇÇ.unop L‚ÇÅ.unop := RingHom.toAlgebra (Subsemiring.inclusion <| leOfHom le.1)
  haveI : IsScalarTower k L‚ÇÇ.unop L‚ÇÅ.unop := IsScalarTower.of_algebraMap_eq (congrFun rfl)
  FiniteGrp.ofHom (AlgEquiv.restrictNormalHom (F := k) (K‚ÇÅ := L‚ÇÅ.unop) L‚ÇÇ.unop)

namespace finGaloisGroupMap

@[simp]
lemma map_id (L : (FiniteGaloisIntermediateField k K)·µí·µñ) :
    (finGaloisGroupMap (ùüô L)) = ùüô L.unop.finGaloisGroup :=
  AlgEquiv.restrictNormalHom_id _ _

@[simp]
lemma map_comp {L‚ÇÅ L‚ÇÇ L‚ÇÉ : (FiniteGaloisIntermediateField k K)·µí·µñ} (f : L‚ÇÅ ‚ü∂ L‚ÇÇ) (g : L‚ÇÇ ‚ü∂ L‚ÇÉ) :
    finGaloisGroupMap (f ‚â´ g) = finGaloisGroupMap f ‚â´ finGaloisGroupMap g := by
  iterate 2
    induction L‚ÇÅ with | _ L‚ÇÅ => ?_
    induction L‚ÇÇ with | _ L‚ÇÇ => ?_
    induction L‚ÇÉ with | _ L‚ÇÉ => ?_
  letI : Algebra L‚ÇÉ L‚ÇÇ := RingHom.toAlgebra (Subsemiring.inclusion g.unop.le)
  letI : Algebra L‚ÇÇ L‚ÇÅ := RingHom.toAlgebra (Subsemiring.inclusion f.unop.le)
  letI : Algebra L‚ÇÉ L‚ÇÅ := RingHom.toAlgebra (Subsemiring.inclusion (g.unop.le.trans f.unop.le))
  haveI : IsScalarTower k L‚ÇÇ L‚ÇÅ := IsScalarTower.of_algebraMap_eq' rfl
  haveI : IsScalarTower k L‚ÇÉ L‚ÇÅ := IsScalarTower.of_algebraMap_eq' rfl
  haveI : IsScalarTower k L‚ÇÉ L‚ÇÇ := IsScalarTower.of_algebraMap_eq' rfl
  haveI : IsScalarTower L‚ÇÉ L‚ÇÇ L‚ÇÅ := IsScalarTower.of_algebraMap_eq' rfl
  apply IsScalarTower.AlgEquiv.restrictNormalHom_comp k L‚ÇÉ L‚ÇÇ L‚ÇÅ

end finGaloisGroupMap

variable (k K) in
/-- Mapping `FiniteGaloisIntermediateField` ordered by inverse inclusion to its
  corresponding Galois Group as `FiniteGrp`. -/
noncomputable def finGaloisGroupFunctor : (FiniteGaloisIntermediateField k K)·µí·µñ ‚•§ FiniteGrp where
  obj L := L.unop.finGaloisGroup
  map := finGaloisGroupMap
  map_id := finGaloisGroupMap.map_id
  map_comp := finGaloisGroupMap.map_comp

end FiniteGaloisIntermediateField
