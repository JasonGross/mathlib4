import Mathlib

section quasispectrum

/-- The existing version should be generalized to this. -/
lemma Unitization.quasispectrum_eq_spectrum_inr'' (R : Type*) {A : Type*} [CommRing R]
    [NonUnitalRing A] [Module R A] [IsScalarTower R A A] [SMulCommClass R A A] (a : A) :
    quasispectrum R a = spectrum R (a : Unitization R A) := by
  ext r
  have : { r | ¬¨ IsUnit r} ‚äÜ spectrum R _ := mem_spectrum_inr_of_not_isUnit a
  rw [‚Üê Set.union_eq_left.mpr this, ‚Üê quasispectrum_eq_spectrum_union]
  apply forall_congr' fun hr ‚Ü¶ ?_
  rw [not_iff_not, Units.smul_def, Units.smul_def, ‚Üê inr_smul, ‚Üê inr_neg, isQuasiregular_inr_iff]

lemma NonUnitalContinuousFunctionalCalculus.isCompact_quasispectrum {R A : Type*}
    {p : outParam (A ‚Üí Prop)}
    [CommSemiring R] [Nontrivial R] [StarRing R] [MetricSpace R] [TopologicalSemiring R]
    [ContinuousStar R] [NonUnitalRing A] [StarRing A] [TopologicalSpace A] [Module R A]
    [IsScalarTower R A A] [SMulCommClass R A A] [NonUnitalContinuousFunctionalCalculus R p]
    (a : A) : IsCompact (quasispectrum R a) :=
  isCompact_iff_compactSpace.mpr inferInstance

end quasispectrum

section stone_weierstrass

variable {ùïú : Type*} [RCLike ùïú]

open ContinuousMapZero NonUnitalStarAlgebra

/-- An induction principle for `C(s, ùïú)‚ÇÄ`. -/
@[elab_as_elim]
lemma ContinuousMapZero.induction_on' {s : Set ùïú} [Zero s] (h0 : ((0 : s) : ùïú) = 0)
    {p : C(s, ùïú)‚ÇÄ ‚Üí Prop} (zero : p 0) (id : p (.id h0)) (star_id : p (star (.id h0)))
    (add : ‚àÄ f g, p f ‚Üí p g ‚Üí p (f + g)) (mul : ‚àÄ f g, p f ‚Üí p g ‚Üí p (f * g))
    (smul : ‚àÄ (r : ùïú) f, p f ‚Üí p (r ‚Ä¢ f))
    (closure : (‚àÄ f ‚àà adjoin ùïú {(.id h0 : C(s, ùïú)‚ÇÄ)}, p f) ‚Üí ‚àÄ f, p f) (f : C(s, ùïú)‚ÇÄ) :
    p f := by
  refine closure (fun f hf => ?_) f
  induction hf using NonUnitalAlgebra.adjoin_induction with
  | mem f hf =>
    simp only [Set.mem_union, Set.mem_singleton_iff, Set.mem_star] at hf
    rw [star_eq_iff_star_eq, eq_comm (b := f)] at hf
    obtain (rfl | rfl) := hf
    all_goals assumption
  | zero => exact zero
  | add _ _ _ _ hf hg => exact add _ _ hf hg
  | mul _ _ _ _ hf hg => exact mul _ _ hf hg
  | smul _ _ _ hf => exact smul _ _ hf

open Topology in
@[elab_as_elim]
theorem ContinuousMapZero.induction_on_of_compact' {s : Set ùïú} [Zero s] (h0 : ((0 : s) : ùïú) = 0)
    [CompactSpace s] {p : C(s, ùïú)‚ÇÄ ‚Üí Prop} (zero : p 0) (id : p (.id h0))
    (star_id : p (star (.id h0))) (add : ‚àÄ f g, p f ‚Üí p g ‚Üí p (f + g))
    (mul : ‚àÄ f g, p f ‚Üí p g ‚Üí p (f * g)) (smul : ‚àÄ (r : ùïú) f, p f ‚Üí p (r ‚Ä¢ f))
    (frequently : ‚àÄ f, (‚àÉ·∂† g in ùìù f, p g) ‚Üí p f) (f : C(s, ùïú)‚ÇÄ) :
    p f := by
  refine f.induction_on' h0 zero id star_id add mul smul fun h f ‚Ü¶ frequently f ?_
  have := (ContinuousMapZero.adjoin_id_dense h0).closure_eq ‚ñ∏ Set.mem_univ (x := f)
  exact mem_closure_iff_frequently.mp this |>.mp <| .of_forall h

end stone_weierstrass

section cfc_commute

lemma cfc_commute_cfc {R A : Type*} {p : A ‚Üí Prop} [CommSemiring R] [StarRing R] [MetricSpace R]
    [TopologicalSemiring R] [ContinuousStar R] [TopologicalSpace A] [Ring A] [StarRing A]
    [Algebra R A] [ContinuousFunctionalCalculus R p] (f g : R ‚Üí R) (a : A) :
    Commute (cfc f a) (cfc g a) := by
  refine cfc_cases (fun x ‚Ü¶ Commute x (cfc g a)) a f (by simp) fun hf ha ‚Ü¶ ?_
  refine cfc_cases (fun x ‚Ü¶ Commute _ x) a g (by simp) fun hg _ ‚Ü¶ ?_
  exact Commute.all _ _ |>.map _

lemma cfc‚Çô_commute_cfc‚Çô {R A : Type*} {p : A ‚Üí Prop} [CommSemiring R] [Nontrivial R] [StarRing R]
    [MetricSpace R] [TopologicalSemiring R] [ContinuousStar R] [NonUnitalRing A] [StarRing A]
    [TopologicalSpace A] [Module R A] [IsScalarTower R A A] [SMulCommClass R A A]
    [NonUnitalContinuousFunctionalCalculus R p] (f g : R ‚Üí R) (a : A) :
    Commute (cfc‚Çô f a) (cfc‚Çô g a) := by
  refine cfc‚Çô_cases (fun x ‚Ü¶ Commute x (cfc‚Çô g a)) a f (by simp) fun hf hf0 ha ‚Ü¶ ?_
  refine cfc‚Çô_cases (fun x ‚Ü¶ Commute _ x) a g (by simp) fun hg hg0 _ ‚Ü¶ ?_
  exact Commute.all _ _ |>.map _

end cfc_commute

section superset

local notation "œÉ‚Çô" => quasispectrum
open ContinuousMapZero

variable {R A : Type*} {p : A ‚Üí Prop} [CommSemiring R] [Nontrivial R] [StarRing R]
    [MetricSpace R] [TopologicalSemiring R] [ContinuousStar R] [NonUnitalRing A] [StarRing A]
    [TopologicalSpace A] [Module R A] [IsScalarTower R A A] [SMulCommClass R A A]
    [instCFC‚Çô : NonUnitalContinuousFunctionalCalculus R p]

/-- The composition of `cfc‚ÇôHom` with the natural embedding `C(s, R)‚ÇÄ ‚Üí C(quasispectrum R a, R)‚ÇÄ`
whenever `quasispectrum R a ‚äÜ s`.

This is sometimes necessary in order to consider the same continuous functions applied to multiple
distinct elements, with the added constraint that `cfc‚Çô` does not suffice. This can occur, for
example, if it is necessary to use uniqueness of this continuous functional calculus. A practical
example can be found in the proof of `CFC.posPart_negPart_unique`. -/
@[simps!]
noncomputable def cfc‚ÇôHom_superset {a : A} (ha : p a) {s : Set R} (hs : œÉ‚Çô R a ‚äÜ s) :
    letI : Zero s := ‚ü®0, hs (quasispectrum.zero_mem R a)‚ü©
    C(s, R)‚ÇÄ ‚Üí‚ãÜ‚Çô‚Çê[R] A :=
  letI : Zero s := ‚ü®0, hs (quasispectrum.zero_mem R a)‚ü©
  cfc‚ÇôHom ha (R := R) |>.comp <| ContinuousMapZero.nonUnitalStarAlgHom_precomp R <|
    ‚ü®‚ü®_, continuous_id.subtype_map hs‚ü©, rfl‚ü©

lemma cfc‚ÇôHom_superset_continuous {a : A} (ha : p a) {s : Set R} (hs : œÉ‚Çô R a ‚äÜ s) :
    Continuous (cfc‚ÇôHom_superset ha hs) :=
  letI : Zero s := ‚ü®0, hs (quasispectrum.zero_mem R a)‚ü©
  (cfc‚ÇôHom_continuous ha).comp <| ContinuousMapZero.continuous_comp_left _

lemma cfc‚ÇôHom_superset_id {a : A} (ha : p a) {s : Set R} (hs : œÉ‚Çô R a ‚äÜ s) :
    letI : Zero s := ‚ü®0, hs (quasispectrum.zero_mem R a)‚ü©
    cfc‚ÇôHom_superset ha hs ‚ü®.restrict s <| .id R, rfl‚ü© = a :=
  cfc‚ÇôHom_id ha

/-- this version uses `ContinuousMapZero.id`. -/
lemma cfc‚ÇôHom_superset_id' {a : A} (ha : p a) {s : Set R} (hs : œÉ‚Çô R a ‚äÜ s) :
    letI : Zero s := ‚ü®0, hs (quasispectrum.zero_mem R a)‚ü©
    cfc‚ÇôHom_superset ha hs (.id rfl) = a :=
  cfc‚ÇôHom_id ha

lemma ContinuousMapZero.nonUnitalStarAlgHom_apply_mul_eq_zero {ùïú A : Type*}
    [RCLike ùïú] [NonUnitalRing A] [StarRing A] [TopologicalSpace A] [TopologicalSemiring A]
    [T2Space A] [Module ùïú A] [IsScalarTower ùïú A A] {s : Set ùïú} [Zero s] [CompactSpace s]
    (h0 : (0 : s) = (0 : ùïú)) (œÜ : C(s, ùïú)‚ÇÄ ‚Üí‚ãÜ‚Çô‚Çê[ùïú] A) (a : A) (hmul_id : œÜ (.id h0) * a = 0)
    (hmul_star_id : œÜ (star (.id h0)) * a = 0) (hœÜ : Continuous œÜ) (f : C(s, ùïú)‚ÇÄ) :
    œÜ f * a = 0 := by
  induction f using ContinuousMapZero.induction_on_of_compact' h0 with
  | zero => simp [map_zero]
  | id => exact hmul_id
  | star_id => exact hmul_star_id
  | add _ _ h‚ÇÅ h‚ÇÇ => simp only [map_add, add_mul, h‚ÇÅ, h‚ÇÇ, zero_add]
  | mul _ _ _ h => simp only [map_mul, mul_assoc, h, mul_zero]
  | smul _ _ h => rw [map_smul, smul_mul_assoc, h, smul_zero]
  | frequently f h => exact h.mem_of_closed <| isClosed_eq (by fun_prop) continuous_zero

lemma ContinuousMapZero.mul_nonUnitalStarAlgHom_apply_eq_zero {ùïú A : Type*}
    [RCLike ùïú] [NonUnitalRing A] [StarRing A] [TopologicalSpace A] [TopologicalSemiring A]
    [T2Space A] [Module ùïú A] [SMulCommClass ùïú A A] {s : Set ùïú} [Zero s] [CompactSpace s]
    (h0 : (0 : s) = (0 : ùïú)) (œÜ : C(s, ùïú)‚ÇÄ ‚Üí‚ãÜ‚Çô‚Çê[ùïú] A) (a : A) (hmul_id : a * œÜ (.id h0) = 0)
    (hmul_star_id : a * œÜ (star (.id h0)) = 0) (hœÜ : Continuous œÜ) (f : C(s, ùïú)‚ÇÄ) :
    a * œÜ f = 0 := by
  induction f using ContinuousMapZero.induction_on_of_compact' h0 with
  | zero => simp [map_zero]
  | id => exact hmul_id
  | star_id => exact hmul_star_id
  | add _ _ h‚ÇÅ h‚ÇÇ => simp only [map_add, mul_add, h‚ÇÅ, h‚ÇÇ, zero_add]
  | mul _ _ h _ => simp only [map_mul, ‚Üê mul_assoc, h, zero_mul]
  | smul _ _ h => rw [map_smul, mul_smul_comm, h, smul_zero]
  | frequently f h => exact h.mem_of_closed <| isClosed_eq (by fun_prop) continuous_zero

end superset


universe u

variable {A : Type u} [NonUnitalRing A] [Module ‚Ñù A] [SMulCommClass ‚Ñù A A] [IsScalarTower ‚Ñù A A]
variable [StarRing A] [TopologicalSpace A]
variable [NonUnitalContinuousFunctionalCalculus ‚Ñù (IsSelfAdjoint : A ‚Üí Prop)]

namespace CStarAlgebra

noncomputable instance : PosPart A where
  posPart := cfc‚Çô (¬∑‚Å∫ : ‚Ñù ‚Üí ‚Ñù)

noncomputable instance : NegPart A where
  negPart := cfc‚Çô (¬∑‚Åª : ‚Ñù ‚Üí ‚Ñù)

end CStarAlgebra

attribute [fun_prop] continuous_posPart continuous_negPart

namespace CFC

lemma posPart_def (a : A) : a‚Å∫ = cfc‚Çô (¬∑‚Å∫ : ‚Ñù ‚Üí ‚Ñù) a := rfl

lemma negPart_def (a : A) : a‚Åª = cfc‚Çô (¬∑‚Åª : ‚Ñù ‚Üí ‚Ñù) a := rfl

@[simp]
lemma posPart_mul_negPart (a : A) : a‚Å∫ * a‚Åª = 0 := by
  rw [posPart_def, negPart_def]
  by_cases ha : IsSelfAdjoint a
  ¬∑ rw [‚Üê cfc‚Çô_mul _ _, ‚Üê cfc‚Çô_zero ‚Ñù a]
    refine cfc‚Çô_congr (fun x _ ‚Ü¶ ?_)
    simp only [_root_.posPart_def, _root_.negPart_def]
    simpa using le_total x 0
  ¬∑ simp [cfc‚Çô_apply_of_not_predicate a ha]


@[simp]
lemma negPart_mul_posPart (a : A) : a‚Åª * a‚Å∫ = 0 :=
  posPart_mul_negPart a ‚ñ∏ cfc‚Çô_commute_cfc‚Çô _ _ a

lemma posPart_sub_negPart (a : A) (ha : IsSelfAdjoint a := by cfc_tac) : a‚Å∫ - a‚Åª = a := by
  rw [posPart_def, negPart_def]
  rw [‚Üê cfc‚Çô_sub _ _]
  conv_rhs => rw [‚Üê cfc‚Çô_id ‚Ñù a]
  congr! 2 with
  exact _root_.posPart_sub_negPart _

section Unique

variable [UniqueNonUnitalContinuousFunctionalCalculus ‚Ñù A]

@[simp]
lemma posPart_neg (a : A) : (-a)‚Å∫ = a‚Åª := by
  by_cases ha : IsSelfAdjoint a
  ¬∑ rw [posPart_def, negPart_def, ‚Üê cfc‚Çô_comp_neg _ _]
    congr! 2
  ¬∑ have ha' : ¬¨ IsSelfAdjoint (-a) := fun h ‚Ü¶ ha (by simpa using h.neg)
    rw [posPart_def, negPart_def, cfc‚Çô_apply_of_not_predicate a ha,
      cfc‚Çô_apply_of_not_predicate _ ha']

@[simp]
lemma negPart_neg (a : A) : (-a)‚Åª = a‚Å∫ := by
  rw [‚Üê eq_comm, ‚Üê sub_eq_zero, ‚Üê posPart_neg, neg_neg, sub_self]

end Unique

variable [PartialOrder A] [StarOrderedRing A]
    -- I absolutely hate this hypothesis, I think we need a `ContinuousSqrt` class.
    -- Then we could avoid this idiocy.
    [‚àÄ (Œ± : Type) [Zero Œ±] [TopologicalSpace Œ±], StarOrderedRing (ContinuousMapZero Œ± ‚Ñù)]

lemma posPart_nonneg (a : A) :
    0 ‚â§ a‚Å∫ :=
  cfc‚Çô_nonneg (fun x _ ‚Ü¶ by positivity)

lemma negPart_nonneg (a : A) :
    0 ‚â§ a‚Åª :=
  cfc‚Çô_nonneg (fun x _ ‚Ü¶ by positivity)

lemma eq_posPart_iff [NonnegSpectrumClass ‚Ñù A] (a : A) : a = a‚Å∫ ‚Üî 0 ‚â§ a := by
  refine ‚ü®fun ha ‚Ü¶ ha ‚ñ∏ posPart_nonneg a, fun ha ‚Ü¶ ?_‚ü©
  conv_lhs => rw [‚Üê cfc‚Çô_id ‚Ñù a]
  rw [posPart_def]
  refine cfc‚Çô_congr (fun x hx ‚Ü¶ ?_)
  simpa [_root_.posPart_def] using quasispectrum_nonneg_of_nonneg a ha x hx

lemma negPart_eq_zero_iff [NonnegSpectrumClass ‚Ñù A] (a : A) (ha : IsSelfAdjoint a) :
    a‚Åª = 0 ‚Üî 0 ‚â§ a := by
  rw [‚Üê eq_posPart_iff]
  nth_rw 2 [‚Üê posPart_sub_negPart a]
  simp

variable [UniqueNonUnitalContinuousFunctionalCalculus ‚Ñù A]

lemma eq_negPart_iff [NonnegSpectrumClass ‚Ñù A] (a : A) : a = -a‚Åª ‚Üî a ‚â§ 0 := by
  simpa [neg_eq_iff_eq_neg] using eq_posPart_iff (-a)

lemma posPart_eq_zero_iff [NonnegSpectrumClass ‚Ñù A] (a : A) (ha : IsSelfAdjoint a) :
    a‚Å∫ = 0 ‚Üî a ‚â§ 0 := by
  rw [‚Üê eq_negPart_iff]
  nth_rw 2 [‚Üê posPart_sub_negPart a]
  simp

-- there are even more here, like the norm condition
lemma nonneg_tfae [NonnegSpectrumClass ‚Ñù A] (a : A) :
    List.TFAE
      [0 ‚â§ a,
      a = a‚Å∫,
      IsSelfAdjoint a ‚àß a‚Åª = 0,
      IsSelfAdjoint a ‚àß ‚àÄ x ‚àà quasispectrum ‚Ñù a, 0 ‚â§ x,
      IsSelfAdjoint a ‚àß QuasispectrumRestricts a ContinuousMap.realToNNReal] := by
  sorry

local notation "œÉ‚Çô" => quasispectrum

open ContinuousMapZero

variable [NonnegSpectrumClass ‚Ñù A]
variable [TopologicalRing A] [T2Space A]

open NonUnitalContinuousFunctionalCalculus in
/-- The positive and negative parts of a selfadjoint elements `a` are unique. That is, if
`a = b - c` is the difference of nonnegative elements whose product is zero, then these are
precisely `a‚Å∫` and `a‚Åª`. -/
lemma posPart_negPart_unique {a b c : A} (habc : a = b - c) (hbc : b * c = 0)
    (hb : 0 ‚â§ b := by cfc_tac) (hc : 0 ‚â§ c := by cfc_tac) :
    b = a‚Å∫ ‚àß c = a‚Åª := by
  /- The key idea is to show that `cfc‚Çô f a = cfc‚Çô f b + cfc‚Çô f (-c)` for all real-valued `f`
  continuous on the union of the spectra of `a`, `b`, and `-c`. Then apply this to `f = (¬∑‚Å∫)`.
  The equality holds because both sides consitute star homomorphisms which agree on `f = id` since
  `a = b - c`. -/
  /- `a`, `b`, `-c` are selfadjoint. -/
  have hb' : IsSelfAdjoint b := .of_nonneg hb
  have hc' : IsSelfAdjoint (-c) := .neg <| .of_nonneg hc
  have ha : IsSelfAdjoint a := habc ‚ñ∏ hb'.sub <| .of_nonneg hc
  /- It suffices to show `b = a‚Å∫` since `a‚Å∫ - a‚Åª = a = b - c` -/
  rw [and_iff_left_of_imp ?of_b_eq]
  case of_b_eq =>
    rw [‚Üê posPart_sub_negPart a] at habc
    rintro rfl
    linear_combination (norm := abel1) habc
  /- `s := œÉ‚Çô ‚Ñù a ‚à™ œÉ‚Çô ‚Ñù b ‚à™ œÉ‚Çô ‚Ñù (-c)` is compact and each of these sets are subsets of `s`.
  Moreover, `0 ‚àà s`. -/
  let s := œÉ‚Çô ‚Ñù a ‚à™ œÉ‚Çô ‚Ñù b ‚à™ œÉ‚Çô ‚Ñù (-c)
  have hs : CompactSpace s := by
    refine isCompact_iff_compactSpace.mp <| (IsCompact.union ?_ ?_).union ?_
    all_goals exact isCompact_quasispectrum _
  obtain ‚ü®has, hbs, hcs‚ü© : œÉ‚Çô ‚Ñù a ‚äÜ s ‚àß œÉ‚Çô ‚Ñù b ‚äÜ s ‚àß œÉ‚Çô ‚Ñù (-c) ‚äÜ s := by
    refine ‚ü®?_, ?_, ?_‚ü©; all_goals intro; aesop
  let _ : Zero s := ‚ü®0, by aesop‚ü©
  have s0 : (0 : s) = (0 : ‚Ñù) := rfl
  /- The continuous functional calculi for functions `f g : C(s, ‚Ñù)‚ÇÄ` applied to `b` and `(-c)`
  are orthogonal (i.e., the product is always zero). -/
  have mul‚ÇÅ (f g : C(s, ‚Ñù)‚ÇÄ) :
      (cfc‚ÇôHom_superset hb' hbs f) * (cfc‚ÇôHom_superset hc' hcs g) = 0 := by
    refine f.nonUnitalStarAlgHom_apply_mul_eq_zero s0 _ _ ?_ ?_
      (cfc‚ÇôHom_superset_continuous hb' hbs)
    swap; rw [star_trivial]
    all_goals
      refine g.mul_nonUnitalStarAlgHom_apply_eq_zero s0 _ _ ?_ ?_
        (cfc‚ÇôHom_superset_continuous hc' hcs)
      all_goals simp only [star_trivial, cfc‚ÇôHom_superset_id' hb' hbs, cfc‚ÇôHom_superset_id' hc' hcs,
        mul_neg, hbc, neg_zero]
  have mul‚ÇÇ (f g : C(s, ‚Ñù)‚ÇÄ) : (cfc‚ÇôHom_superset hc' hcs f) * (cfc‚ÇôHom_superset hb' hbs g) = 0 := by
    simpa only [star_mul, star_zero, ‚Üê map_star, star_trivial] using congr(star $(mul‚ÇÅ g f))
  /- `fun f ‚Ü¶ cfc‚Çô f b + cfc‚Çô f (-c)` defines a star homomorphism `œà : C(s, ‚Ñù)‚ÇÄ ‚Üí‚ãÜ‚Çô‚Çê[‚Ñù] A` which
  agrees with the star homomorphism `cfc‚Çô ¬∑ a : C(s, ‚Ñù)‚ÇÄ ‚Üí‚ãÜ‚Çô‚Çê[‚Ñù] A` since
  `cfc‚Çô id a = a = b - c = cfc‚Çô id b + cfc‚Çô id (-c)`. -/
  let œà : C(s, ‚Ñù)‚ÇÄ ‚Üí‚ãÜ‚Çô‚Çê[‚Ñù] A :=
    { (cfc‚ÇôHom_superset hb' hbs : C(s, ‚Ñù)‚ÇÄ ‚Üí‚Çó[‚Ñù] A) + (cfc‚ÇôHom_superset hc' hcs : C(s, ‚Ñù)‚ÇÄ ‚Üí‚Çó[‚Ñù] A)
        with
      toFun := cfc‚ÇôHom_superset hb' hbs + cfc‚ÇôHom_superset hc' hcs
      map_zero' := by simp [-cfc‚ÇôHom_superset_apply]
      map_mul' := fun f g ‚Ü¶ by
        simp only [Pi.add_apply, map_mul, mul_add, add_mul, mul‚ÇÇ, add_zero, mul‚ÇÅ, zero_add]
      map_star' := fun f ‚Ü¶ by simp [‚Üê map_star] }
  have key : (cfc‚ÇôHom_superset ha has) = œà :=
    UniqueNonUnitalContinuousFunctionalCalculus.eq_of_continuous_of_map_id s rfl
    (cfc‚ÇôHom_superset ha has) œà (cfc‚ÇôHom_superset_continuous ha has)
    ((cfc‚ÇôHom_superset_continuous hb' hbs).add (cfc‚ÇôHom_superset_continuous hc' hcs))
    (by simpa [œà, -cfc‚ÇôHom_superset_apply, cfc‚ÇôHom_superset_id, sub_eq_add_neg] using habc)
  /- Applying the equality of star homomorphisms to the function `(¬∑‚Å∫ : ‚Ñù ‚Üí ‚Ñù)` we find that
  `b = cfc‚Çô id b + cfc‚Çô 0 (-c) = cfc‚Çô (¬∑‚Å∫) b - cfc‚Çô (¬∑‚Å∫) (-c) = cfc‚Çô (¬∑‚Å∫) a = a‚Å∫`, where the
  second equality follows because these functions are equal on the spectra of `b` and `-c`,
  respectively, since `0 ‚â§ b` and `-c ‚â§ 0`. -/
  letI f : C(s, ‚Ñù)‚ÇÄ := ‚ü®‚ü®(¬∑‚Å∫), by fun_prop‚ü©, by simp [s0]‚ü©
  replace key := congr($key f)
  simp only [cfc‚ÇôHom_superset_apply, NonUnitalStarAlgHom.coe_mk', NonUnitalAlgHom.coe_mk, œà,
    Pi.add_apply, cfc‚ÇôHom_superset_apply, cfc‚ÇôHom_eq_cfc‚Çô_extend (¬∑‚Å∫)] at key
  calc
    b = cfc‚Çô (id : ‚Ñù ‚Üí ‚Ñù) b + cfc‚Çô (0 : ‚Ñù ‚Üí ‚Ñù) (-c) := by simp [cfc‚Çô_id ‚Ñù b]
    _ = _ := by
      congr! 1
      all_goals
        refine cfc‚Çô_congr fun x hx ‚Ü¶ Eq.symm ?_
        lift x to œÉ‚Çô ‚Ñù _ using hx
        simp only [Subtype.val_injective.extend_apply, comp_apply, coe_mk, ContinuousMap.coe_mk,
          Subtype.map_coe, id_eq, posPart_eq_self, f, Pi.zero_apply, posPart_eq_zero]
      ¬∑ exact quasispectrum_nonneg_of_nonneg b hb x.val x.property
      ¬∑ obtain ‚ü®x, hx‚ü© := x
        simp only [‚Üê neg_nonneg]
        rw [Unitization.quasispectrum_eq_spectrum_inr'' ‚Ñù (-c), Unitization.inr_neg,
          ‚Üê spectrum.neg_eq, Set.mem_neg, ‚Üê Unitization.quasispectrum_eq_spectrum_inr'' ‚Ñù c]
          at hx
        exact quasispectrum_nonneg_of_nonneg c hc _ hx
    _ = _ := key.symm
    _ = a‚Å∫ := by
      refine cfc‚Çô_congr fun x hx ‚Ü¶ ?_
      lift x to œÉ‚Çô ‚Ñù a using hx
      simp [Subtype.val_injective.extend_apply, f]

end CFC
