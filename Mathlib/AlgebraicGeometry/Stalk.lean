/-
Copyright (c) 2024 Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrew Yang, Fangming Li
-/
import Mathlib.AlgebraicGeometry.AffineScheme

/-!
# Stalks of a Scheme

## Main definitions and results

- `AlgebraicGeometry.Scheme.fromSpecStalk`: The canonical morphism `Spec ùí™_{X, x} ‚ü∂ X`.
- `AlgebraicGeometry.Scheme.range_fromSpecStalk`: The range of the map `Spec ùí™_{X, x} ‚ü∂ X` is
  exactly the `y` that specializes to `x`.
- `AlgebraicGeometry.SpecToEquivOfLocalRing`:
  Given a local ring `R` and scheme `X`, morphisms `Spec R ‚ü∂ X` corresponds to pairs
  `(x, f)` where `x : X` and `f : ùí™_{X, x} ‚ü∂ R` is a local ring homomorphism.
-/

namespace AlgebraicGeometry

open CategoryTheory Opposite TopologicalSpace LocalRing

universe u

variable {X Y : Scheme.{u}} (f : X ‚ü∂ Y) {U V : X.Opens} (hU : IsAffineOpen U) (hV : IsAffineOpen V)

section fromSpecStalk

/--
A morphism from `Spec(O_x)` to `X`, which is defined with the help of an affine open
neighborhood `U` of `x`.
-/
noncomputable def IsAffineOpen.fromSpecStalk
    {x : X} (hxU : x ‚àà U) :
    Spec (X.presheaf.stalk x) ‚ü∂ X :=
  Spec.map (X.presheaf.germ ‚ü®x, hxU‚ü©) ‚â´ hU.fromSpec

/--
The morphism from `Spec(O_x)` to `X` given by `IsAffineOpen.fromSpec` does not depend on the affine
open neighborhood of `x` we choose.
-/
theorem IsAffineOpen.fromSpecStalk_eq (x : X) (hxU : x ‚àà U) (hxV : x ‚àà V) :
    hU.fromSpecStalk hxU = hV.fromSpecStalk hxV := by
  obtain ‚ü®U', h‚ÇÅ, h‚ÇÇ, h‚ÇÉ : U' ‚â§ U ‚äì V‚ü© :=
    Opens.isBasis_iff_nbhd.mp (isBasis_affine_open X) (show x ‚àà U ‚äì V from ‚ü®hxU, hxV‚ü©)
  transitivity fromSpecStalk h‚ÇÅ h‚ÇÇ
  ¬∑ rw [fromSpecStalk, fromSpecStalk, ‚Üê hU.map_fromSpec h‚ÇÅ (homOfLE $ h‚ÇÉ.trans inf_le_left).op,
      ‚Üê Spec.map_comp_assoc, TopCat.Presheaf.germ_res]
  ¬∑ rw [fromSpecStalk, fromSpecStalk, ‚Üê hV.map_fromSpec h‚ÇÅ (homOfLE $ h‚ÇÉ.trans inf_le_right).op,
      ‚Üê Spec.map_comp_assoc, TopCat.Presheaf.germ_res]

/--
If `x` is a point of `X`, this is the canonical morphism from `Spec(O_x)` to `X`.
-/
noncomputable def Scheme.fromSpecStalk (X : Scheme.{u}) (x : X) :
    Spec (X.presheaf.stalk x) ‚ü∂ X :=
  (isAffineOpen_opensRange (X.affineOpenCover.map x)).fromSpecStalk (X.affineOpenCover.covers x)

@[simp]
theorem IsAffineOpen.fromSpecStalk_eq_fromSpecStalk {x : X} (hxU : x ‚àà U) :
    hU.fromSpecStalk hxU = X.fromSpecStalk x := fromSpecStalk_eq ..

lemma IsAffineOpen.fromSpecStalk_closedPoint {U : Opens X} (hU : IsAffineOpen U)
    {x : X} (hxU : x ‚àà U) :
    (hU.fromSpecStalk hxU).1.base (closedPoint (X.presheaf.stalk x)) = x := by
  rw [IsAffineOpen.fromSpecStalk, Scheme.comp_val_base_apply]
  erw [‚Üê hU.primeIdealOf_eq_map_closedPoint ‚ü®x, hxU‚ü©, hU.fromSpec_primeIdealOf ‚ü®x, hxU‚ü©]

namespace Scheme

@[simp]
lemma fromSpecStalk_closedPoint {x : X} :
    (X.fromSpecStalk x).1.base (closedPoint (X.presheaf.stalk x)) = x :=
  IsAffineOpen.fromSpecStalk_closedPoint _ _

lemma fromSpecStalk_app {x : X} (hxU : x ‚àà U) :
    (X.fromSpecStalk x).app U =
      X.presheaf.germ ‚ü®x, hxU‚ü© ‚â´
        (ŒìSpecIso (X.presheaf.stalk x)).inv ‚â´
          (Spec (X.presheaf.stalk x)).presheaf.map (homOfLE le_top).op := by
  obtain ‚ü®_, ‚ü®V : X.Opens, hV, rfl‚ü©, hxV, hVU‚ü© := (isBasis_affine_open X).exists_subset_of_mem_open
    hxU U.2
  have : V.Œπ ‚Åª¬π·µÅ U = ‚ä§ := eq_top_iff.mpr fun x _ ‚Ü¶ hVU x.2
  rw [‚Üê hV.fromSpecStalk_eq_fromSpecStalk hxV, IsAffineOpen.fromSpecStalk, Scheme.comp_app,
    IsAffineOpen.fromSpec_app_of_le hV _ hVU, ‚Üê  X.presheaf.germ_res (homOfLE hVU) ‚ü®x, hxV‚ü©]
  simp only [Category.assoc]
  rw [Hom.naturality, ‚Üê ŒìSpecIso_inv_naturality_assoc]
  rfl

@[reassoc]
lemma stalkSpecializes_fromSpecStalk {x y : X} (h : x ‚§≥ y) :
    Spec.map (X.presheaf.stalkSpecializes h) ‚â´ X.fromSpecStalk y = X.fromSpecStalk x := by
  obtain ‚ü®_, ‚ü®U, hU, rfl‚ü©, hyU, -‚ü© :=
    (isBasis_affine_open X).exists_subset_of_mem_open (Set.mem_univ y) isOpen_univ
  have hxU : x ‚àà U := h.mem_open U.2 hyU
  rw [‚Üê hU.fromSpecStalk_eq_fromSpecStalk hyU, ‚Üê hU.fromSpecStalk_eq_fromSpecStalk hxU,
    IsAffineOpen.fromSpecStalk, IsAffineOpen.fromSpecStalk, ‚Üê Category.assoc, ‚Üê Spec.map_comp,
    TopCat.Presheaf.germ_stalkSpecializes]

@[reassoc (attr := simp)]
lemma stalkMap_fromSpecStalk {x} :
    Spec.map (PresheafedSpace.stalkMap f.1 x) ‚â´ Y.fromSpecStalk _ = X.fromSpecStalk x ‚â´ f := by
  obtain ‚ü®_, ‚ü®U, hU, rfl‚ü©, hxU, -‚ü© := (isBasis_affine_open Y).exists_subset_of_mem_open
    (Set.mem_univ (f.1.base x)) isOpen_univ
  obtain ‚ü®_, ‚ü®V, hV, rfl‚ü©, hxV, hVU‚ü© := (isBasis_affine_open X).exists_subset_of_mem_open
    hxU (f ‚Åª¬π·µÅ U).2
  rw [‚Üê hU.fromSpecStalk_eq_fromSpecStalk hxU, ‚Üê hV.fromSpecStalk_eq_fromSpecStalk hxV,
    IsAffineOpen.fromSpecStalk, ‚Üê Spec.map_comp_assoc, PresheafedSpace.stalkMap_germ f.1 _ ‚ü®x, hxU‚ü©,
    IsAffineOpen.fromSpecStalk, Spec.map_comp_assoc, ‚Üê X.presheaf.germ_res (homOfLE hVU) ‚ü®x, hxV‚ü©,
    Spec.map_comp_assoc, Category.assoc, ‚Üê Scheme.Hom.app, ‚Üê Spec.map_comp_assoc (f.app _),
      Hom.app_eq_appLE, Hom.appLE_map, IsAffineOpen.map_appLE_fromSpec]

lemma Spec_fromSpecStalk (R : CommRingCat) (x) :
    (Spec R).fromSpecStalk x =
      Spec.map ((ŒìSpecIso R).inv ‚â´ (Spec R).presheaf.germ (U := ‚ä§) ‚ü®x, trivial‚ü©) := by
  rw [‚Üê (isAffineOpen_top (Spec R)).fromSpecStalk_eq_fromSpecStalk (x := x) trivial,
    IsAffineOpen.fromSpecStalk, IsAffineOpen.fromSpec_top, isoSpec_Spec_inv,
    ‚Üê Spec.map_comp]

-- This is not a simp lemma to respect the abstraction boundaries
lemma Spec_fromSpecStalk' (R : CommRingCat) (x) :
    (Spec R).fromSpecStalk x = Spec.map (StructureSheaf.toStalk R _) :=
  Spec_fromSpecStalk _ _

/-- https://stacks.math.columbia.edu/tag/01J7 -/
lemma range_fromSpecStalk {x : X} :
    Set.range (X.fromSpecStalk x).1.base = { y | y ‚§≥ x } := by
  ext y
  constructor
  ¬∑ rintro ‚ü®y, rfl‚ü©
    exact ((LocalRing.specializes_closedPoint y).map (X.fromSpecStalk x).1.base.2).trans
      (specializes_of_eq fromSpecStalk_closedPoint)
  ¬∑ rintro (hy : y ‚§≥ x)
    have := fromSpecStalk_closedPoint (x := y)
    rw [‚Üê stalkSpecializes_fromSpecStalk hy] at this
    exact ‚ü®_, this‚ü©

end Scheme

end fromSpecStalk

variable (R : CommRingCat.{u}) [LocalRing R]

section stalkClosedPointIso

/-- For a local ring `(R, ùî™)`,
this is the isomorphism between the stalk of `Spec R` at `ùî™` and `R`. -/
noncomputable
def stalkClosedPointIso :
    (Spec R).presheaf.stalk (closedPoint R) ‚âÖ R :=
  StructureSheaf.stalkIso _ _ ‚â™‚â´ (IsLocalization.atUnits R
      (closedPoint R).asIdeal.primeCompl fun _ ‚Ü¶ not_not.mp).toRingEquiv.toCommRingCatIso.symm

lemma stalkClosedPointIso_inv :
    (stalkClosedPointIso R).inv = StructureSheaf.toStalk R _ := by
  ext x
  exact StructureSheaf.localizationToStalk_of _ _ _

lemma ŒìSpecIso_hom_stalkClosedPointIso_inv :
    (Scheme.ŒìSpecIso R).hom ‚â´ (stalkClosedPointIso R).inv =
      (Spec R).presheaf.germ (U := ‚ä§) ‚ü®closedPoint _, trivial‚ü© := by
  rw [stalkClosedPointIso_inv, ‚Üê Iso.eq_inv_comp]
  rfl

@[reassoc (attr := simp)]
lemma germ_stalkClosedPointIso_hom :
    (Spec R).presheaf.germ (U := ‚ä§) ‚ü®closedPoint _, trivial‚ü© ‚â´ (stalkClosedPointIso R).hom =
      (Scheme.ŒìSpecIso R).hom := by
  rw [‚Üê ŒìSpecIso_hom_stalkClosedPointIso_inv, Category.assoc, Iso.inv_hom_id, Category.comp_id]

lemma Spec_stalkClosedPointIso :
    Spec.map (stalkClosedPointIso R).inv = (Spec R).fromSpecStalk (closedPoint R) := by
  rw [stalkClosedPointIso_inv, Scheme.Spec_fromSpecStalk']

end stalkClosedPointIso

section stalkClosedPointTo

variable {R} (f : Spec R ‚ü∂ X)

-- move me
lemma LocalRing.closed_point_mem_iff {R : Type*} [CommRing R] [LocalRing R]
    {U : Opens (PrimeSpectrum R)} : closedPoint R ‚àà U ‚Üî U = ‚ä§ :=
  ‚ü®(eq_top_iff.mpr fun x _ ‚Ü¶ (specializes_closedPoint x).mem_open U.2 ¬∑), (¬∑ ‚ñ∏ trivial)‚ü©

@[simp]
lemma Spec_closedPoint {R S : CommRingCat} [LocalRing R] [LocalRing S]
    {f : R ‚ü∂ S} [IsLocalRingHom f] : (Spec.map f).1.base (closedPoint S) = closedPoint R :=
  LocalRing.comap_closedPoint f

namespace Scheme

/--
Given a local ring `(R, ùî™)` and a morphism `f : Spec R ‚ü∂ X`,
they induce a ring homomorphim `œÜ : ùí™_{X, f ùî™} ‚ü∂ X`.

This is inverse to `œÜ ‚Ü¶ Spec.map œÜ ‚â´ X.fromSpecStalk (f ùî™)`. See `SpecToEquivOfLocalRing`.
-/
noncomputable
def stalkClosedPointTo :
    X.presheaf.stalk (f.1.base (closedPoint R)) ‚ü∂ R :=
  PresheafedSpace.stalkMap f.1 (closedPoint R) ‚â´ (stalkClosedPointIso R).hom

instance isLocalRingHom_stalkClosedPointTo :
    IsLocalRingHom (stalkClosedPointTo f) := by
  delta stalkClosedPointTo; infer_instance

lemma preimage_eq_top_of_closedPoint_mem
    {U : Opens X} (hU : f.1.base (closedPoint R) ‚àà U) : f ‚Åª¬π·µÅ U = ‚ä§ :=
  LocalRing.closed_point_mem_iff.mp hU

lemma stalkClosedPointTo_comp (g : X ‚ü∂ Y) :
    stalkClosedPointTo (f ‚â´ g) = PresheafedSpace.stalkMap g.1 _ ‚â´ stalkClosedPointTo f := by
  rw [stalkClosedPointTo]
  erw [PresheafedSpace.stalkMap.comp]
  exact Category.assoc _ _ _

lemma germ_stalkClosedPointTo_Spec {R S : CommRingCat} [LocalRing S] (œÜ : R ‚ü∂ S):
    (Spec R).presheaf.germ (U := ‚ä§) ‚ü®_, trivial‚ü© ‚â´ stalkClosedPointTo (Spec.map œÜ) =
      (ŒìSpecIso R).hom ‚â´ œÜ := by
  rw [stalkClosedPointTo, PresheafedSpace.stalkMap_germ'_assoc, ‚Üê Iso.inv_comp_eq,
    ‚Üê ŒìSpecIso_inv_naturality_assoc, germ_stalkClosedPointIso_hom, Iso.inv_hom_id,
    Category.comp_id]

@[reassoc]
lemma germ_stalkClosedPointTo (U : Opens X) (hU : f.1.base (closedPoint R) ‚àà U) :
    X.presheaf.germ ‚ü®_, hU‚ü© ‚â´ stalkClosedPointTo f = f.app U ‚â´
      ((Spec R).presheaf.mapIso (eqToIso (preimage_eq_top_of_closedPoint_mem f hU).symm).op ‚â™‚â´
        ŒìSpecIso R).hom := by
  rw [stalkClosedPointTo, PresheafedSpace.stalkMap_germ'_assoc, Iso.trans_hom]
  congr 1
  rw [‚Üê Iso.eq_comp_inv, Category.assoc, ŒìSpecIso_hom_stalkClosedPointIso_inv]
  simp only [TopCat.Presheaf.pushforward_obj_obj, Functor.mapIso_hom, Iso.op_hom, eqToIso.hom,
    TopCat.Presheaf.germ_res]

@[reassoc]
lemma germ_stalkClosedPointTo_Spec_fromSpecStalk
    {x : X} (f : X.presheaf.stalk x ‚ü∂ R) [IsLocalRingHom f] (U : Opens X) (hU) :
    X.presheaf.germ (U := U) ‚ü®_, hU‚ü© ‚â´ stalkClosedPointTo (Spec.map f ‚â´ X.fromSpecStalk x) =
      X.presheaf.germ (U := U) ‚ü®x, by simpa using hU‚ü© ‚â´ f := by
  have : (Spec.map f ‚â´ X.fromSpecStalk x).1.base (closedPoint R) = x := by
    rw [comp_val_base_apply, Spec_closedPoint, fromSpecStalk_closedPoint]
  have : x ‚àà U := this ‚ñ∏ hU
  simp only [TopCat.Presheaf.stalkCongr_hom, TopCat.Presheaf.germ_stalkSpecializes_assoc,
    germ_stalkClosedPointTo, comp_app,
    fromSpecStalk_app (X := X) (x := x) this, Category.assoc, Iso.trans_hom,
    Functor.mapIso_hom, Hom.naturality_assoc, ‚Üê Functor.map_comp_assoc,
    (Spec.map f).app_eq_appLE, Hom.appLE_map_assoc, Hom.map_appLE_assoc]
  erw [‚Üê (Spec.map f).app_eq_appLE]
  rw [ŒìSpecIso_naturality, Iso.inv_hom_id_assoc]

lemma stalkClosedPointTo_fromSpecStalk (x : X) :
    stalkClosedPointTo (X.fromSpecStalk x) =
      (X.presheaf.stalkCongr (by rw [fromSpecStalk_closedPoint]; rfl)).hom := by
  refine TopCat.Presheaf.stalk_hom_ext _ fun U hxU ‚Ü¶ ?_
  simp only [TopCat.Presheaf.stalkCongr_hom, TopCat.Presheaf.germ_stalkSpecializes, id_eq]
  have : X.fromSpecStalk x = Spec.map (ùüô (X.presheaf.stalk x)) ‚â´ X.fromSpecStalk x := by simp
  convert germ_stalkClosedPointTo_Spec_fromSpecStalk (ùüô (X.presheaf.stalk x)) U hxU

@[reassoc]
lemma Spec_stalkClosedPointTo_fromSpecStalk :
    Spec.map (stalkClosedPointTo f) ‚â´ X.fromSpecStalk _ = f := by
  obtain ‚ü®_, ‚ü®U, hU, rfl‚ü©, hxU, -‚ü© := (isBasis_affine_open X).exists_subset_of_mem_open
    (Set.mem_univ (f.1.base (closedPoint R))) isOpen_univ
  have := IsAffineOpen.map_appLE_fromSpec f hU (isAffineOpen_top _)
    (preimage_eq_top_of_closedPoint_mem f hxU).ge
  rw [IsAffineOpen.fromSpec_top, Iso.eq_inv_comp, isoSpec_Spec_hom] at this
  rw [‚Üê hU.fromSpecStalk_eq_fromSpecStalk hxU, IsAffineOpen.fromSpecStalk, ‚Üê Spec.map_comp_assoc,
    germ_stalkClosedPointTo]
  simpa only [Iso.trans_hom, Functor.mapIso_hom, Iso.op_hom, Category.assoc,
    Hom.app_eq_appLE, Hom.appLE_map_assoc, Spec.map_comp_assoc]

end Scheme

end stalkClosedPointTo

variable {R}

/-- useful lemma for applications of `SpecToEquivOfLocalRing` -/
lemma SpecToEquivOfLocalRing_eq_iff
    {f‚ÇÅ f‚ÇÇ : Œ£ x, { f : X.presheaf.stalk x ‚ü∂ R // IsLocalRingHom f }} :
    f‚ÇÅ = f‚ÇÇ ‚Üî ‚àÉ h‚ÇÅ : f‚ÇÅ.1 = f‚ÇÇ.1, f‚ÇÅ.2.1 =
      (X.presheaf.stalkCongr (by rw [h‚ÇÅ]; rfl)).hom ‚â´ f‚ÇÇ.2.1 := by
  constructor
  ¬∑ rintro rfl; simp
  ¬∑ obtain ‚ü®x‚ÇÅ, ‚ü®f‚ÇÅ, h‚ÇÅ‚ü©‚ü© := f‚ÇÅ
    obtain ‚ü®x‚ÇÇ, ‚ü®f‚ÇÇ, h‚ÇÇ‚ü©‚ü© := f‚ÇÇ
    rintro ‚ü®rfl : x‚ÇÅ = x‚ÇÇ, e : f‚ÇÅ = _‚ü©
    simp [e]

variable (X R)

/--
Given a local ring `R` and scheme `X`, morphisms `Spec R ‚ü∂ X` corresponds to pairs
`(x, f)` where `x : X` and `f : ùí™_{X, x} ‚ü∂ R` is a local ring homomorphism.
-/
noncomputable
def SpecToEquivOfLocalRing :
    (Spec R ‚ü∂ X) ‚âÉ Œ£ x, { f : X.presheaf.stalk x ‚ü∂ R // IsLocalRingHom f } where
  toFun f := ‚ü®f.1.base (closedPoint R), Scheme.stalkClosedPointTo f, inferInstance‚ü©
  invFun xf := Spec.map xf.2.1 ‚â´ X.fromSpecStalk xf.1
  left_inv := Scheme.Spec_stalkClosedPointTo_fromSpecStalk
  right_inv xf := by
    obtain ‚ü®x, ‚ü®f, hf‚ü©‚ü© := xf
    symm
    refine SpecToEquivOfLocalRing_eq_iff.mpr ‚ü®?_, ?_‚ü©
    ¬∑ simp only [Scheme.comp_coeBase, TopCat.coe_comp, Function.comp_apply, Spec_closedPoint,
        Scheme.fromSpecStalk_closedPoint]
    ¬∑ refine TopCat.Presheaf.stalk_hom_ext _ fun U hxU ‚Ü¶ ?_
      simp only [Scheme.germ_stalkClosedPointTo_Spec_fromSpecStalk,
        TopCat.Presheaf.stalkCongr_hom, TopCat.Presheaf.germ_stalkSpecializes_assoc]

end AlgebraicGeometry
