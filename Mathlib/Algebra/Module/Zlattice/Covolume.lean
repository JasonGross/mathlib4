/-
Copyright (c) 2024 Xavier Roblot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Xavier Roblot
-/
import Mathlib.Analysis.BoxIntegral.UnitPartition
import Mathlib.MeasureTheory.Measure.Haar.InnerProductSpace

import Mathlib.Sandbox

/-!
# Covolume of ‚Ñ§-lattices

Let `E` be a finite dimensional real vector space.

Let `L` be a `‚Ñ§`-lattice defined as a discrete `AddSubgroup E` that spans `E` over `‚Ñù`.

## Main definitions and results

* `Zlattice.covolume`: the covolume of `L` defined as the volume of an arbitrary fundamental
domain of `L`.

* `Zlattice.covolume_eq_measure_fundamentalDomain`: the covolume of `L` does not depend on the
choice of the fundamental domain of `L`.

* `Zlattice.covolume_eq_det`: if `L` is a lattice in `‚Ñù^n`, then its covolume is the absolute
value of the determinant of any `‚Ñ§`-basis of `L`.

* `Zlattice.covolume.tendsto_card_div_pow`: Let `s` be a bounded measurable set of `Œπ ‚Üí ‚Ñù`, then
the number of points in `s ‚à© n‚Åª¬π ‚Ä¢ L` divided by `n ^ card Œπ` tends to `volume s / covolume L`
when `n : ‚Ñï` tends to infinity. See also `Zlattice.covolume.tendsto_card_div_pow'` for a version
for `InnerProductSpace ‚Ñù E` and `Zlattice.covolume.tendsto_card_div_pow''` for the general version.

* `Zlattice.covolume.tendsto_card_le_div`: Let `X` be a cone in `Œπ ‚Üí ‚Ñù` and let `F : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù`
be a function such that `F (c ‚Ä¢ x) = c ^ card Œπ * F x`. Then the number of points `x ‚àà X` such that
`F x ‚â§ c` divided by `c` tends to `volume {x ‚àà X | F x ‚â§ 1} / covolume L` when `c : ‚Ñù` tends to
infinity. See also `Zlattice.covolume.tendsto_card_le_div'` for a version for
`InnerProductSpace ‚Ñù E` and `Zlattice.covolume.tendsto_card_le_div''` for the general version.

-/

noncomputable section

namespace Zlattice

open Submodule MeasureTheory FiniteDimensional Module Bornology

section General

variable (K : Type*) [NormedLinearOrderedField K] [HasSolidNorm K] [FloorRing K]
variable {E : Type*} [NormedAddCommGroup E] [NormedSpace K E] [FiniteDimensional K E]
variable [ProperSpace E] [MeasurableSpace E]
variable (L : AddSubgroup E) [DiscreteTopology L] [IsZlattice K L]

/-- The covolume of a `‚Ñ§`-lattice is the volume of some fundamental domain; see
`Zlattice.covolume_eq_volume` for the proof that the volume does not depend on the choice of
the fundamental domain. -/
def covolume (Œº : Measure E := by volume_tac) : ‚Ñù := (addCovolume L E Œº).toReal

end General

section Basic

variable {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E] [FiniteDimensional ‚Ñù E]
variable [MeasurableSpace E] [BorelSpace E]
variable (L : AddSubgroup E) [DiscreteTopology L] [IsZlattice ‚Ñù L]
variable (Œº : Measure E := by volume_tac) [Measure.IsAddHaarMeasure Œº]

theorem covolume_eq_measure_fundamentalDomain {F : Set E} (h : IsAddFundamentalDomain L F Œº) :
    covolume L Œº = (Œº F).toReal := congr_arg ENNReal.toReal (h.covolume_eq_volume Œº)

theorem covolume_ne_zero : covolume L Œº ‚â† 0 := by
  rw [covolume_eq_measure_fundamentalDomain L Œº (isAddFundamentalDomain (Free.chooseBasis ‚Ñ§ L) Œº),
    ENNReal.toReal_ne_zero]
  refine ‚ü®Zspan.measure_fundamentalDomain_ne_zero _, ne_of_lt ?_‚ü©
  exact IsBounded.measure_lt_top (Zspan.fundamentalDomain_isBounded _)

theorem covolume_pos : 0 < covolume L Œº :=
  lt_of_le_of_ne ENNReal.toReal_nonneg (covolume_ne_zero L Œº).symm

theorem covolume_eq_det_mul_measure {Œπ : Type*} [Fintype Œπ] [DecidableEq Œπ] (b : Basis Œπ ‚Ñ§ L)
    (b‚ÇÄ : Basis Œπ ‚Ñù E) :
    covolume L Œº = |b‚ÇÄ.det ((‚Üë) ‚àò b)| * (Œº (Zspan.fundamentalDomain b‚ÇÄ)).toReal := by
  rw [covolume_eq_measure_fundamentalDomain L Œº (isAddFundamentalDomain b Œº),
    Zspan.measure_fundamentalDomain _ _ b‚ÇÄ,
    measure_congr (Zspan.fundamentalDomain_ae_parallelepiped b‚ÇÄ Œº), ENNReal.toReal_mul,
    ENNReal.toReal_ofReal (by positivity)]
  congr
  ext
  exact b.ofZlatticeBasis_apply ‚Ñù L _

theorem covolume_eq_det {Œπ : Type*} [Fintype Œπ] [DecidableEq Œπ] (L : AddSubgroup (Œπ ‚Üí ‚Ñù))
    [DiscreteTopology L] [IsZlattice ‚Ñù L] (b : Basis Œπ ‚Ñ§ L) :
    covolume L = |(Matrix.of ((‚Üë) ‚àò b)).det| := by
  rw [covolume_eq_measure_fundamentalDomain L volume (isAddFundamentalDomain b volume),
    Zspan.volume_fundamentalDomain, ENNReal.toReal_ofReal (by positivity)]
  congr
  ext1
  exact b.ofZlatticeBasis_apply ‚Ñù L _

theorem volume_image_eq_volume_div_covolume {Œπ : Type*} [Fintype Œπ] [DecidableEq Œπ]
    (L : AddSubgroup (Œπ ‚Üí ‚Ñù)) [DiscreteTopology L] [IsZlattice ‚Ñù L] (b : Basis Œπ ‚Ñ§ L)
    (s : Set (Œπ ‚Üí ‚Ñù)) :
    volume ((b.ofZlatticeBasis ‚Ñù L).equivFun '' s) = (volume s) / ENNReal.ofReal (covolume L) := by
  rw [LinearEquiv.image_eq_preimage, Measure.addHaar_preimage_linearEquiv, LinearEquiv.symm_symm,
    covolume_eq_det_mul_measure L volume b (Pi.basisFun ‚Ñù Œπ), div_eq_mul_inv,
    Zspan.fundamentalDomain_pi_basisFun, volume_pi_pi, Real.volume_Ico, sub_zero,
    ENNReal.ofReal_one, Finset.prod_const_one, ENNReal.one_toReal, mul_one,
    show (((‚Üë) : L ‚Üí _) ‚àò ‚áëb) = (b.ofZlatticeBasis ‚Ñù) by ext; simp, ‚Üê Basis.det_inv,
    Units.val_inv_eq_inv_val, IsUnit.unit_spec, abs_inv, ENNReal.ofReal_inv_of_pos,
    inv_inv, mul_comm, Basis.det_basis]
  ¬∑ rfl
  ¬∑ exact abs_pos.mpr <|
      (AlternatingMap.map_basis_ne_zero_iff _ _).mpr (Basis.ofZlatticeBasis ‚Ñù L b).det_ne_zero

-- Use the above to golf this proof
theorem volume_image_eq_volume_div_covolume' {E : Type*} [NormedAddCommGroup E]
    [InnerProductSpace ‚Ñù E] [FiniteDimensional ‚Ñù E] [MeasurableSpace E] [BorelSpace E]
    {s : Set E} (hs : MeasurableSet s) (L : AddSubgroup E) [DiscreteTopology L] [IsZlattice ‚Ñù L]
    {Œπ : Type*} [Fintype Œπ] (b : Basis Œπ ‚Ñ§ L) :
    volume ((b.ofZlatticeBasis ‚Ñù).equivFun '' s) = volume s / ENNReal.ofReal (covolume L) := by
  classical
  let e : Fin (finrank ‚Ñù E) ‚âÉ Œπ :=
    Fintype.equivOfCardEq (by rw [Fintype.card_fin, finrank_eq_card_basis (b.ofZlatticeBasis ‚Ñù)])
  have h‚ÇÅ : MeasurableSet ((b.ofZlatticeBasis ‚Ñù).equivFun '' s) :=
    (b.ofZlatticeBasis ‚Ñù).equivFunL.toHomeomorph.toMeasurableEquiv.measurableSet_image.mpr hs
  have h‚ÇÇ : (Subtype.val ‚àò b) = (b.ofZlatticeBasis ‚Ñù) := by ext; simp
  -- This is useful for positivity later on
  have h‚ÇÉ : ((stdOrthonormalBasis ‚Ñù E).toBasis.reindex e).det (Subtype.val ‚àò b) ‚â† 0 :=
    isUnit_iff_ne_zero.mp (h‚ÇÇ ‚ñ∏ Basis.isUnit_det _ _)
  have h‚ÇÑ : (b.ofZlatticeBasis ‚Ñù).equivFun ‚â™‚â´‚Çó (WithLp.linearEquiv 2 _  _).symm ‚â™‚â´‚Çó
      ((stdOrthonormalBasis ‚Ñù E).reindex e).repr.toLinearEquiv.symm =
      (b.ofZlatticeBasis ‚Ñù).equiv ((stdOrthonormalBasis ‚Ñù E).reindex e).toBasis (Equiv.refl Œπ) := by
    refine (b.ofZlatticeBasis ‚Ñù).ext' fun _ ‚Ü¶ ?_
    simp_rw [LinearEquiv.trans_apply, Basis.equivFun_apply, Basis.repr_self,
      Finsupp.single_eq_pi_single, WithLp.linearEquiv_symm_apply, WithLp.equiv_symm_single _ (1:‚Ñù),
      LinearIsometryEquiv.toLinearEquiv_symm, LinearIsometryEquiv.coe_toLinearEquiv,
      OrthonormalBasis.repr_symm_single, Basis.equiv_apply, Equiv.refl_apply,
      OrthonormalBasis.reindex_toBasis, OrthonormalBasis.coe_reindex, Basis.coe_reindex,
      OrthonormalBasis.coe_toBasis]
  rw [‚Üê (EuclideanSpace.volume_preserving_measurableEquiv _).measure_preimage,
    ‚Üê ((stdOrthonormalBasis ‚Ñù E).reindex e).measurePreserving_repr.measure_preimage]
  any_goals exact h‚ÇÅ.nullMeasurableSet
  simp_rw [EuclideanSpace.coe_measurableEquiv, ‚Üê WithLp.linearEquiv_apply 2 ‚Ñù,
    ‚Üê LinearIsometryEquiv.coe_toLinearEquiv, ‚Üê LinearEquiv.image_symm_eq_preimage,
    ‚Üê Set.image_comp, ‚Üê LinearEquiv.coe_coe, ‚Üê LinearMap.coe_comp, LinearEquiv.comp_coe]
  rw [h‚ÇÑ, LinearEquiv.coe_coe, LinearEquiv.image_eq_preimage,
    Measure.addHaar_preimage_linearEquiv, LinearEquiv.symm_symm, ‚Üê Basis.det_basis, ‚Üê Basis.det_inv,
    Units.val_inv_eq_inv_val, IsUnit.unit_spec, covolume_eq_det_mul_measure L volume b
    ((stdOrthonormalBasis ‚Ñù E).reindex e).toBasis, OrthonormalBasis.reindex_toBasis,
    Zspan.fundamentalDomain_reindex, measure_congr (Zspan.fundamentalDomain_ae_parallelepiped _
    volume), OrthonormalBasis.coe_toBasis, OrthonormalBasis.volume_parallelepiped,
    ENNReal.one_toReal, mul_one, mul_comm, div_eq_mul_inv, ‚Üê ENNReal.ofReal_inv_of_pos
    (by positivity), abs_inv, ‚Üê h‚ÇÇ]

end Basic

namespace covolume

section General

open Filter Fintype Pointwise Topology BoxIntegral

variable {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E] [FiniteDimensional ‚Ñù E]
variable [MeasurableSpace E] [BorelSpace E]
variable {L : AddSubgroup E} [DiscreteTopology L] [IsZlattice ‚Ñù L]
variable {Œπ : Type*} [Fintype Œπ] (b : Basis Œπ ‚Ñ§ L)

theorem tendsto_card_div_pow'' {s : Set E} (hs‚ÇÅ : IsBounded s) (hs‚ÇÇ : MeasurableSet s)
    (hs‚ÇÉ : volume (frontier ((b.ofZlatticeBasis ‚Ñù L).equivFun '' s)) = 0) :
    Tendsto (fun n : ‚Ñï ‚Ü¶ (Nat.card (s ‚à© (n : ‚Ñù)‚Åª¬π ‚Ä¢ L : Set E) : ‚Ñù) / n ^ card Œπ)
      atTop (ùìù (volume ((b.ofZlatticeBasis ‚Ñù).equivFun '' s)).toReal) := by
  refine Tendsto.congr' ?_
    (unitPartition.tendsto_card_div_pow' ((b.ofZlatticeBasis ‚Ñù).equivFun '' s) ?_ ?_ hs‚ÇÉ)
  ¬∑ filter_upwards [eventually_gt_atTop 0] with n hn
    congr
    refine Nat.card_congr <| ((b.ofZlatticeBasis ‚Ñù).equivFun.toEquiv.subtypeEquiv fun x ‚Ü¶ ?_).symm
    simp_rw [Set.mem_inter_iff, ‚Üê b.ofZlatticeBasis_span ‚Ñù, coe_toAddSubgroup,
      LinearEquiv.coe_toEquiv, Basis.equivFun_apply, Set.mem_image, DFunLike.coe_fn_eq,
      EmbeddingLike.apply_eq_iff_eq, exists_eq_right, and_congr_right_iff,
      Set.mem_inv_smul_set_iff‚ÇÄ (by aesop : (n:‚Ñù) ‚â† 0), ‚Üê Finsupp.coe_smul, ‚Üê LinearEquiv.map_smul,
      SetLike.mem_coe, Basis.mem_span_iff_repr_mem, Pi.basisFun_repr, implies_true]
  ¬∑ rw [‚Üê NormedSpace.isVonNBounded_iff ‚Ñù] at hs‚ÇÅ ‚ä¢
    exact Bornology.IsVonNBounded.image hs‚ÇÅ ((b.ofZlatticeBasis ‚Ñù).equivFunL : E ‚ÜíL[‚Ñù] Œπ ‚Üí ‚Ñù)
  ¬∑ exact (b.ofZlatticeBasis ‚Ñù).equivFunL.toHomeomorph.toMeasurableEquiv.measurableSet_image.mpr hs‚ÇÇ

variable {X : Set E} (hX : ‚àÄ ‚¶Éx‚¶Ñ ‚¶Ér : ‚Ñù‚¶Ñ, x ‚àà X ‚Üí 0 < r ‚Üí r ‚Ä¢ x ‚àà X)

variable {F : E ‚Üí ‚Ñù} (hF‚ÇÅ : ‚àÄ x ‚¶Ér : ‚Ñù‚¶Ñ, 0 < r ‚Üí  F (r ‚Ä¢ x) = r ^ card Œπ * (F x))
  (hF‚ÇÇ : IsBounded {x ‚àà X | F x ‚â§ 1}) (hF‚ÇÉ : MeasurableSet {x ‚àà X | F x ‚â§ 1})
  (hF‚ÇÑ : volume (frontier ((b.ofZlatticeBasis ‚Ñù L).equivFun '' {x | x ‚àà X ‚àß F x ‚â§ 1})) = 0)

include hX hF‚ÇÅ in
private theorem tendsto_card_le_div''_aux {c : ‚Ñù} (hc : 0 < c) :
    c ‚Ä¢ {x ‚àà X | F x ‚â§ 1} = {x ‚àà X | F x ‚â§ c ^ card Œπ} := by
  ext x
  constructor
  ¬∑ rintro ‚ü®y, ‚ü®hy‚ÇÅ, hy‚ÇÇ‚ü©, rfl‚ü©
    refine ‚ü®?_, ?_‚ü©
    exact hX hy‚ÇÅ hc
    rw [hF‚ÇÅ _ hc]
    exact mul_le_of_le_one_right (pow_nonneg (le_of_lt hc) _) hy‚ÇÇ
  ¬∑ refine fun ‚ü®hx‚ÇÅ, hx‚ÇÇ‚ü© ‚Ü¶
      ‚ü®c‚Åª¬π ‚Ä¢ x, ‚ü®hX hx‚ÇÅ (inv_pos_of_pos hc), ?_‚ü©, smul_inv_smul‚ÇÄ (ne_of_gt hc) _‚ü©
    rw [hF‚ÇÅ _ (inv_pos_of_pos hc), inv_pow]
    exact inv_mul_le_one_of_le hx‚ÇÇ (pow_nonneg (le_of_lt hc) _)

include hX hF‚ÇÅ hF‚ÇÇ hF‚ÇÉ hF‚ÇÑ in
theorem tendsto_card_le_div'' [Nonempty Œπ] :
    Tendsto (fun c : ‚Ñù ‚Ü¶
      Nat.card ({x ‚àà X | F x ‚â§ c} ‚à© L : Set E) / (c : ‚Ñù))
        atTop (ùìù (volume ((b.ofZlatticeBasis ‚Ñù).equivFun '' {x ‚àà X | F x ‚â§ 1})).toReal) := by
  have h : (card Œπ : ‚Ñù) ‚â† 0 := Nat.cast_ne_zero.mpr card_ne_zero
  refine Tendsto.congr' ?_ <| (unitPartition.tendsto_card_div_pow
      ((b.ofZlatticeBasis ‚Ñù).equivFun '' {x ‚àà X | F x ‚â§ 1}) ?_ ?_ hF‚ÇÑ fun x y hx hy ‚Ü¶ ?_).comp
        (tendsto_rpow_atTop <| inv_pos.mpr
          (Nat.cast_pos.mpr card_pos) : Tendsto (fun x ‚Ü¶ x ^ (card Œπ : ‚Ñù)‚Åª¬π) atTop atTop)
  ¬∑ filter_upwards [eventually_gt_atTop 0] with c hc
    obtain ‚ü®hc‚ÇÅ, hc‚ÇÇ‚ü© := lt_iff_le_and_ne.mp hc
    rw [Function.comp_apply, ‚Üê Real.rpow_natCast, Real.rpow_inv_rpow hc‚ÇÅ h, eq_comm]
    congr
    refine Nat.card_congr <| Equiv.subtypeEquiv ((b.ofZlatticeBasis ‚Ñù).equivFun.toEquiv.trans
          (Equiv.smulRight (a := c ^ (- (card Œπ : ‚Ñù)‚Åª¬π)) (by aesop))) fun _ ‚Ü¶ ?_
    rw [Set.mem_inter_iff, Set.mem_inter_iff, Equiv.trans_apply, LinearEquiv.coe_toEquiv,
      Equiv.smulRight_apply, Real.rpow_neg hc‚ÇÅ, Set.smul_mem_smul_set_iff‚ÇÄ (by aesop),
      ‚Üê Set.mem_smul_set_iff_inv_smul_mem‚ÇÄ (by aesop), ‚Üê image_smul_set,
      tendsto_card_le_div''_aux hX hF‚ÇÅ (by positivity), ‚Üê Real.rpow_natCast, ‚Üê Real.rpow_mul hc‚ÇÅ,
      inv_mul_cancel‚ÇÄ h, Real.rpow_one]
    simp_rw [SetLike.mem_coe, Set.mem_image, EmbeddingLike.apply_eq_iff_eq, exists_eq_right,
      and_congr_right_iff, ‚Üê b.ofZlatticeBasis_span ‚Ñù, mem_toAddSubgroup,
      Basis.mem_span_iff_repr_mem, Pi.basisFun_repr, Basis.equivFun_apply, implies_true]
  ¬∑ rw [‚Üê NormedSpace.isVonNBounded_iff ‚Ñù] at hF‚ÇÇ ‚ä¢
    exact Bornology.IsVonNBounded.image hF‚ÇÇ ((b.ofZlatticeBasis ‚Ñù).equivFunL : E ‚ÜíL[‚Ñù] Œπ ‚Üí ‚Ñù)
  ¬∑ exact (b.ofZlatticeBasis ‚Ñù).equivFunL.toHomeomorph.toMeasurableEquiv.measurableSet_image.mpr hF‚ÇÉ
  ¬∑ simp_rw [‚Üê image_smul_set]
    apply Set.image_mono
    rw [tendsto_card_le_div''_aux hX hF‚ÇÅ hx,
      tendsto_card_le_div''_aux hX hF‚ÇÅ (lt_of_lt_of_le hx hy)]
    exact fun a ‚ü®ha‚ÇÅ, ha‚ÇÇ‚ü© ‚Ü¶ ‚ü®ha‚ÇÅ, le_trans ha‚ÇÇ <| pow_le_pow_left (le_of_lt hx) hy _‚ü©

end General

section Pi

open Filter Fintype Pointwise Topology

variable {Œπ : Type*} [Fintype Œπ] [DecidableEq Œπ]
variable (L : AddSubgroup (Œπ ‚Üí ‚Ñù)) [DiscreteTopology L] [IsZlattice ‚Ñù L]

theorem tendsto_card_div_pow (b : Basis Œπ ‚Ñ§ L) {s : Set (Œπ ‚Üí ‚Ñù)} (hs‚ÇÅ : IsBounded s)
    (hs‚ÇÇ : MeasurableSet s) (hs‚ÇÉ : volume (frontier s) = 0) :
    Tendsto (fun n : ‚Ñï ‚Ü¶ (Nat.card (s ‚à© (n : ‚Ñù)‚Åª¬π ‚Ä¢ L : Set (Œπ ‚Üí ‚Ñù)) : ‚Ñù) / n ^ card Œπ)
      atTop (ùìù ((volume s).toReal / covolume L)) := by
  convert tendsto_card_div_pow'' b hs‚ÇÅ hs‚ÇÇ ?_
  ¬∑ rw [volume_image_eq_volume_div_covolume, ENNReal.toReal_div, ENNReal.toReal_ofReal
      (covolume_pos L volume).le]
  ¬∑ rw [LinearEquiv.image_eq_preimage, ‚Üê Basis.equivFunL_symm_coe, ‚Üê ContinuousLinearEquiv.coe_coe,
      ContinuousLinearMap.frontier_preimage _ (ContinuousLinearEquiv.surjective _),
      ContinuousLinearEquiv.coe_coe, Basis.equivFunL_symm_coe, ‚Üê LinearEquiv.image_eq_preimage,
      volume_image_eq_volume_div_covolume, hs‚ÇÉ, ENNReal.zero_div]

variable {X : Set (Œπ ‚Üí ‚Ñù)} (hX : ‚àÄ ‚¶Éx‚¶Ñ ‚¶Ér : ‚Ñù‚¶Ñ, x ‚àà X ‚Üí 0 < r ‚Üí r ‚Ä¢ x ‚àà X)
variable {F : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù} (hF‚ÇÅ : ‚àÄ x ‚¶Ér : ‚Ñù‚¶Ñ, 0 < r ‚Üí  F (r ‚Ä¢ x) = r ^ card Œπ * (F x))
  (hF‚ÇÇ : IsBounded {x ‚àà X | F x ‚â§ 1}) (hF‚ÇÉ : MeasurableSet {x ‚àà X | F x ‚â§ 1})
  (hF‚ÇÑ : volume (frontier {x | x ‚àà X ‚àß F x ‚â§ 1}) = 0)

include hX hF‚ÇÅ hF‚ÇÇ hF‚ÇÉ hF‚ÇÑ in
theorem tendsto_card_le_div [Nonempty Œπ]:
    Tendsto (fun c : ‚Ñù ‚Ü¶
      Nat.card ({x ‚àà X | F x ‚â§ c} ‚à© L : Set (Œπ ‚Üí ‚Ñù)) / (c : ‚Ñù))
        atTop (ùìù ((volume {x ‚àà X | F x ‚â§ 1}).toReal / covolume L)) := by
  let e : Free.ChooseBasisIndex ‚Ñ§ ‚Ü•L ‚âÉ Œπ := by
    refine Fintype.equivOfCardEq ?_
    rw [‚Üê finrank_eq_card_chooseBasisIndex, Zlattice.rank ‚Ñù, finrank_fintype_fun_eq_card]
  let b := (Module.Free.chooseBasis ‚Ñ§ L).reindex e
  convert tendsto_card_le_div'' b hX hF‚ÇÅ hF‚ÇÇ hF‚ÇÉ ?_
  ¬∑ rw [volume_image_eq_volume_div_covolume, ENNReal.toReal_div, ENNReal.toReal_ofReal
      (covolume_pos L volume).le]
  ¬∑ rw [LinearEquiv.image_eq_preimage, ‚Üê Basis.equivFunL_symm_coe, ‚Üê ContinuousLinearEquiv.coe_coe,
      ContinuousLinearMap.frontier_preimage _ (ContinuousLinearEquiv.surjective _),
      ContinuousLinearEquiv.coe_coe, Basis.equivFunL_symm_coe, ‚Üê LinearEquiv.image_eq_preimage,
      volume_image_eq_volume_div_covolume, hF‚ÇÑ, ENNReal.zero_div]

end Pi

section InnerProductSpace

open Filter Pointwise Topology

variable {E : Type*} [NormedAddCommGroup E] [InnerProductSpace ‚Ñù E] [FiniteDimensional ‚Ñù E]
  [MeasurableSpace E] [BorelSpace E]
variable (L : AddSubgroup E) [DiscreteTopology L] [IsZlattice ‚Ñù L]

theorem tendsto_card_div_pow' {s : Set E} (hs‚ÇÅ : IsBounded s) (hs‚ÇÇ : MeasurableSet s)
    (hs‚ÇÉ : volume (frontier s) = 0) :
    Tendsto (fun n : ‚Ñï ‚Ü¶ (Nat.card (s ‚à© (n : ‚Ñù)‚Åª¬π ‚Ä¢ L : Set E) : ‚Ñù) / n ^ finrank ‚Ñù E)
      atTop (ùìù ((volume s).toReal / covolume L)) := by
  let b := Module.Free.chooseBasis ‚Ñ§ L
  convert tendsto_card_div_pow'' b hs‚ÇÅ hs‚ÇÇ ?_
  ¬∑ rw [‚Üê finrank_eq_card_chooseBasisIndex, Zlattice.rank ‚Ñù L]
  ¬∑ rw [volume_image_eq_volume_div_covolume' hs‚ÇÇ, ENNReal.toReal_div, ENNReal.toReal_ofReal]
    exact le_of_lt (covolume_pos L)
  ¬∑ rw [LinearEquiv.image_eq_preimage, ‚Üê Basis.equivFunL_symm_coe, ‚Üê ContinuousLinearEquiv.coe_coe,
      ContinuousLinearMap.frontier_preimage _ (ContinuousLinearEquiv.surjective _),
      ContinuousLinearEquiv.coe_coe, Basis.equivFunL_symm_coe, ‚Üê LinearEquiv.image_eq_preimage,
      volume_image_eq_volume_div_covolume' measurableSet_frontier, hs‚ÇÉ, ENNReal.zero_div]

variable {X : Set E} (hX : ‚àÄ ‚¶Éx‚¶Ñ ‚¶Ér : ‚Ñù‚¶Ñ, x ‚àà X ‚Üí 0 < r ‚Üí r ‚Ä¢ x ‚àà X)
variable {F : E ‚Üí ‚Ñù} (hF‚ÇÅ : ‚àÄ x ‚¶Ér : ‚Ñù‚¶Ñ, 0 < r ‚Üí  F (r ‚Ä¢ x) = r ^ finrank ‚Ñù E * (F x))
  (hF‚ÇÇ : IsBounded {x ‚àà X | F x ‚â§ 1}) (hF‚ÇÉ : MeasurableSet {x ‚àà X | F x ‚â§ 1})
  (hF‚ÇÑ : volume (frontier {x ‚àà X | F x ‚â§  1}) = 0)

include hX hF‚ÇÅ hF‚ÇÇ hF‚ÇÉ hF‚ÇÑ in
theorem tendsto_card_le_div' [Nontrivial E]:
    Tendsto (fun c : ‚Ñù ‚Ü¶
      Nat.card ({x ‚àà X | F x ‚â§ c} ‚à© L : Set E) / (c : ‚Ñù))
        atTop (ùìù ((volume {x ‚àà X | F x ‚â§ 1}).toReal / covolume L)) := by
  let b := Module.Free.chooseBasis ‚Ñ§ L
  convert tendsto_card_le_div'' b hX ?_ hF‚ÇÇ hF‚ÇÉ ?_
  ¬∑ rw [volume_image_eq_volume_div_covolume' hF‚ÇÉ, ENNReal.toReal_div, ENNReal.toReal_ofReal]
    exact le_of_lt (covolume_pos L)
  ¬∑ rwa [‚Üê finrank_eq_card_chooseBasisIndex, Zlattice.rank ‚Ñù L]
  ¬∑ rw [LinearEquiv.image_eq_preimage, ‚Üê Basis.equivFunL_symm_coe, ‚Üê ContinuousLinearEquiv.coe_coe,
      ContinuousLinearMap.frontier_preimage _ (ContinuousLinearEquiv.surjective _),
      ContinuousLinearEquiv.coe_coe, Basis.equivFunL_symm_coe, ‚Üê LinearEquiv.image_eq_preimage,
      volume_image_eq_volume_div_covolume' measurableSet_frontier, hF‚ÇÑ, ENNReal.zero_div]
  ¬∑ have : Nontrivial L := nontrivial_of_finrank_pos <| (Zlattice.rank ‚Ñù L).symm ‚ñ∏ finrank_pos
    infer_instance

end InnerProductSpace

end covolume

end Zlattice
