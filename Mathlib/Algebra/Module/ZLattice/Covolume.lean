/-
Copyright (c) 2024 Xavier Roblot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Xavier Roblot
-/
import Mathlib.Algebra.Module.ZLattice.Basic

/-!
# Covolume of ‚Ñ§-lattices

Let `E` be a finite dimensional real vector space with an inner product.

Let `L` be a `‚Ñ§`-lattice `L` defined as a discrete `AddSubgroup E` that spans `E` over `‚Ñù`.

## Main definitions and results

* `ZLattice.covolume`: the covolume of `L` defined as the volume of an arbitrary fundamental
domain of `L`.

* `ZLattice.covolume_eq_measure_fundamentalDomain`: the covolume of `L` does not depend on the
choice of the fundamental domain of `L`.

* `ZLattice.covolume_eq_det`: if `L` is a lattice in `‚Ñù^n`, then its covolume is the absolute
value of the determinant of any `‚Ñ§`-basis of `L`.

-/

noncomputable section

namespace ZLattice

open Submodule MeasureTheory FiniteDimensional MeasureTheory Module ZSpan

section General

variable (K : Type*) [NormedLinearOrderedField K] [HasSolidNorm K] [FloorRing K]
variable {E : Type*} [NormedAddCommGroup E] [NormedSpace K E] [FiniteDimensional K E]
variable [ProperSpace E] [MeasurableSpace E]
variable (L : AddSubgroup E) [DiscreteTopology L] [IsZLattice K L]

/-- The covolume of a `‚Ñ§`-lattice is the volume of some fundamental domain; see
`ZLattice.covolume_eq_volume` for the proof that the volume does not depend on the choice of
the fundamental domain. -/
def covolume (Œº : Measure E := by volume_tac) : ‚Ñù := (addCovolume L E Œº).toReal

end General

section Real

variable {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E] [FiniteDimensional ‚Ñù E]
variable [MeasurableSpace E] [BorelSpace E]
variable (L : AddSubgroup E) [DiscreteTopology L] [IsZLattice ‚Ñù L]
variable (Œº : Measure E := by volume_tac) [Measure.IsAddHaarMeasure Œº]

theorem covolume_eq_measure_fundamentalDomain {F : Set E} (h : IsAddFundamentalDomain L F Œº) :
    covolume L Œº = (Œº F).toReal := congr_arg ENNReal.toReal (h.covolume_eq_volume Œº)

theorem covolume_ne_zero : covolume L Œº ‚â† 0 := by
  rw [covolume_eq_measure_fundamentalDomain L Œº (isAddFundamentalDomain (Free.chooseBasis ‚Ñ§ L) Œº),
    ENNReal.toReal_ne_zero]
  refine ‚ü®measure_fundamentalDomain_ne_zero _, ne_of_lt ?_‚ü©
  exact Bornology.IsBounded.measure_lt_top (fundamentalDomain_isBounded _)

theorem covolume_pos : 0 < covolume L Œº :=
  lt_of_le_of_ne ENNReal.toReal_nonneg (covolume_ne_zero L Œº).symm

theorem covolume_eq_det_mul_measure {Œπ : Type*} [Fintype Œπ] [DecidableEq Œπ] (b : Basis Œπ ‚Ñ§ L)
    (b‚ÇÄ : Basis Œπ ‚Ñù E) :
    covolume L Œº = |b‚ÇÄ.det ((‚Üë) ‚àò b)| * (Œº (fundamentalDomain b‚ÇÄ)).toReal := by
  rw [covolume_eq_measure_fundamentalDomain L Œº (isAddFundamentalDomain b Œº),
    measure_fundamentalDomain _ _ b‚ÇÄ, measure_congr (fundamentalDomain_ae_parallelepiped b‚ÇÄ Œº),
    ENNReal.toReal_mul, ENNReal.toReal_ofReal (by positivity)]
  congr
  ext
  exact b.ofZLatticeBasis_apply ‚Ñù L _

theorem covolume_eq_det {Œπ : Type*} [Fintype Œπ] [DecidableEq Œπ] (L : AddSubgroup (Œπ ‚Üí ‚Ñù))
    [DiscreteTopology L] [IsZLattice ‚Ñù L] (b : Basis Œπ ‚Ñ§ L) :
    covolume L = |(Matrix.of ((‚Üë) ‚àò b)).det| := by
  rw [covolume_eq_measure_fundamentalDomain L volume (isAddFundamentalDomain b volume),
    volume_fundamentalDomain, ENNReal.toReal_ofReal (by positivity)]
  congr
  ext1
  exact b.ofZLatticeBasis_apply ‚Ñù L _

theorem covolume_comap {F : Type*} [NormedAddCommGroup F] [NormedSpace ‚Ñù F] [FiniteDimensional ‚Ñù F]
    [MeasurableSpace F] [BorelSpace F] (ŒΩ : Measure F := by volume_tac) [Measure.IsAddHaarMeasure ŒΩ]
    {e : F ‚âÉL[‚Ñù] E} (he : MeasurePreserving e ŒΩ Œº) :
    covolume (L.comap e.toAddMonoidHom) ŒΩ = covolume L Œº := by
  sorry
--  have : IsZLattice ‚Ñù (L.comap e.toAddMonoidHom) := IsZLattice.comap ‚Ñù _ _
--   let b := Free.chooseBasis ‚Ñ§ L

--   have : IsAddFundamentalDomain (L.comap e.toAddMonoidHom)
--       (e ‚Åª¬π' (fundamentalDomain ((Free.chooseBasis ‚Ñ§ L).ofZLatticeBasis ‚Ñù))) ŒΩ := by

--     have := (Free.chooseBasis ‚Ñ§ L).ofZLatticeBasis_span ‚Ñù
--     have := congr_arg (AddSubgroup.comap e.toAddMonoidHom ¬∑) this
--     dsimp at this


--     rw [‚Üê e.image_symm_eq_preimage, ‚Üê e.symm.coe_toLinearEquiv, ZSpan.map_fundamentalDomain]
-- --    rw [‚Üê this, Submodule.map_span]

--     convert
--       Zspan.isAddFundamentalDomain (((Free.chooseBasis ‚Ñ§ L).ofZlatticeBasis ‚Ñù).map e.symm) ŒΩ

--     have := (Free.chooseBasis ‚Ñ§ L).ofZlatticeBasis_span ‚Ñù

--     have : (L.comap e.toAddMonoidHom) = (span ‚Ñ§ (Set.range
--         (((Free.chooseBasis ‚Ñ§ L).ofZlatticeBasis ‚Ñù).map e.symm))).toAddSubgroup := by
--       simp_rw [‚Üê b.ofZlatticeBasis_span ‚Ñù]

--     rw [this]
--     exact Zspan.isAddFundamentalDomain _ ŒΩ

--   rw [covolume_eq_measure_fundamentalDomain _ ŒΩ this, he.measure_preimage
--     (fundamentalDomain_measurableSet _).nullMeasurableSet,
--     ‚Üê covolume_eq_measure_fundamentalDomain _ Œº (Zlattice.isAddFundamentalDomain _ Œº)]

theorem volume_image_eq_volume_div_covolume {Œπ : Type*} [Fintype Œπ]
    (L : AddSubgroup (Œπ ‚Üí ‚Ñù)) [DiscreteTopology L] [IsZLattice ‚Ñù L] (b : Basis Œπ ‚Ñ§ L)
    (s : Set (Œπ ‚Üí ‚Ñù)) :
    volume ((b.ofZLatticeBasis ‚Ñù L).equivFun '' s) = (volume s) / ENNReal.ofReal (covolume L) := by
  sorry

end Real

section InnerProductSpace

variable {E : Type*} [NormedAddCommGroup E] [InnerProductSpace ‚Ñù E] [FiniteDimensional ‚Ñù E]
  [MeasurableSpace E] [BorelSpace E]

variable (L : AddSubgroup E) [DiscreteTopology L] [IsZLattice ‚Ñù L]


theorem volume_image_eq_volume_div_covolume' {s : Set E} (hs : MeasurableSet s)
    {Œπ : Type*} [Fintype Œπ] (b : Basis Œπ ‚Ñ§ L) :
    volume ((b.ofZLatticeBasis ‚Ñù).equivFun '' s) = volume s / ENNReal.ofReal (covolume L) := by
  sorry

open Bornology Filter Topology

theorem tendsto_card_le_div_covolume' {X : Set E} (hX : ‚àÄ ‚¶Éx‚¶Ñ ‚¶Ér : ‚Ñù‚¶Ñ, x ‚àà X ‚Üí 0 < r ‚Üí r ‚Ä¢ x ‚àà X)
    {F : E ‚Üí ‚Ñù} (hF‚ÇÅ : ‚àÄ x ‚¶Ér : ‚Ñù‚¶Ñ, 0 < r ‚Üí  F (r ‚Ä¢ x) = r ^ finrank ‚Ñù E * (F x))
    (hF‚ÇÇ : IsBounded {x ‚àà X | F x ‚â§ 1}) (hF‚ÇÉ : MeasurableSet {x ‚àà X | F x ‚â§ 1})
    (hF‚ÇÑ : volume (frontier {x ‚àà X | F x ‚â§  1}) = 0) [Nontrivial E] :
    Tendsto (fun c : ‚Ñù ‚Ü¶
      Nat.card ({x ‚àà X | F x ‚â§ c} ‚à© L : Set E) / (c : ‚Ñù))
        atTop (ùìù ((volume {x ‚àà X | F x ‚â§ 1}).toReal / covolume L)) := by
  sorry

end InnerProductSpace

end ZLattice
